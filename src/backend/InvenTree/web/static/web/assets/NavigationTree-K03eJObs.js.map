{"version":3,"file":"NavigationTree-K03eJObs.js","sources":["../../../../../../frontend/src/components/nav/NavigationTree.tsx"],"sourcesContent":["import {\n  ActionIcon,\n  Alert,\n  Anchor,\n  Divider,\n  Drawer,\n  Group,\n  LoadingOverlay,\n  type RenderTreeNodePayload,\n  Space,\n  Stack,\n  Tree,\n  type TreeNodeData,\n  useTree\n} from '@mantine/core';\nimport {\n  IconChevronDown,\n  IconChevronRight,\n  IconExclamationCircle,\n  IconSitemap\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport type { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport {\n  eventModified,\n  getDetailUrl,\n  navigateToLink\n} from '@lib/functions/Navigation';\nimport { t } from '@lingui/core/macro';\nimport { useApi } from '../../contexts/ApiContext';\nimport { ApiIcon } from '../items/ApiIcon';\nimport { StylishText } from '../items/StylishText';\n\n/*\n * A generic navigation tree component.\n */\nexport default function NavigationTree({\n  title,\n  opened,\n  onClose,\n  selectedId,\n  modelType,\n  endpoint\n}: Readonly<{\n  title: string;\n  opened: boolean;\n  onClose: () => void;\n  selectedId?: number | null;\n  modelType: ModelType;\n  endpoint: ApiEndpoints;\n}>) {\n  const api = useApi();\n  const navigate = useNavigate();\n  const treeState = useTree();\n\n  // Data query to fetch the tree data from server\n  const query = useQuery({\n    enabled: opened,\n    queryKey: [modelType, opened],\n    queryFn: async () =>\n      api\n        .get(apiUrl(endpoint), {\n          data: {\n            ordering: 'level'\n          }\n        })\n        .then((response) => response.data ?? [])\n  });\n\n  const follow = useCallback(\n    (node: TreeNodeData, event?: any) => {\n      const url = getDetailUrl(modelType, node.value);\n      if (eventModified(event)) {\n        navigateToLink(url, navigate, event);\n      } else {\n        onClose();\n        navigate(url);\n      }\n    },\n    [modelType, navigate]\n  );\n\n  // Map returned query to a \"tree\" structure\n  const data: TreeNodeData[] = useMemo(() => {\n    /*\n     * Reconstruct the navigation tree from the provided data.\n     * It is required (and assumed) that the data is first sorted by level.\n     */\n\n    const nodes: Record<number, any> = {};\n    const tree: TreeNodeData[] = [];\n\n    if (!query || !query?.data?.length) {\n      return [];\n    }\n\n    for (let ii = 0; ii < query.data.length; ii++) {\n      const node = {\n        ...query.data[ii],\n        children: [],\n        label: (\n          <Group gap='xs'>\n            <ApiIcon name={query.data[ii].icon} />\n            {query.data[ii].name}\n          </Group>\n        ),\n        value: query.data[ii].pk.toString(),\n        selected: query.data[ii].pk === selectedId\n      };\n\n      const pk: number = node.pk;\n      const parent: number | null = node.parent;\n\n      if (!parent) {\n        // This is a top level node\n        tree.push(node);\n      } else {\n        // This is *not* a top level node, so the parent *must* already exist\n        nodes[parent]?.children.push(node);\n      }\n\n      // Finally, add this node\n      nodes[pk] = node;\n\n      if (pk === selectedId) {\n        // Expand all parents\n        let parent = nodes[node.parent];\n        while (parent) {\n          parent.expanded = true;\n          parent = nodes[parent.parent];\n        }\n      }\n    }\n\n    return tree;\n  }, [selectedId, query.data]);\n\n  const renderNode = useCallback(\n    (payload: RenderTreeNodePayload) => {\n      return (\n        <Group\n          p={3}\n          justify='left'\n          key={payload.node.value}\n          wrap='nowrap'\n          onClick={() => {\n            if (payload.hasChildren) {\n              treeState.toggleExpanded(payload.node.value);\n            }\n          }}\n        >\n          <Space w={3 * payload.level} />\n          <ActionIcon\n            size='sm'\n            variant='transparent'\n            aria-label={`nav-tree-toggle-${payload.node.value}}`}\n          >\n            {payload.hasChildren ? (\n              payload.expanded ? (\n                <IconChevronDown />\n              ) : (\n                <IconChevronRight />\n              )\n            ) : null}\n          </ActionIcon>\n          <Anchor\n            onClick={(event: any) => follow(payload.node, event)}\n            aria-label={`nav-tree-item-${payload.node.value}`}\n            c='var(--mantine-color-text)'\n          >\n            {payload.node.label}\n          </Anchor>\n        </Group>\n      );\n    },\n    [treeState]\n  );\n\n  return (\n    <Drawer\n      opened={opened}\n      size='md'\n      position='left'\n      onClose={onClose}\n      withCloseButton={true}\n      styles={{\n        header: {\n          width: '100%'\n        },\n        title: {\n          width: '100%'\n        }\n      }}\n      title={\n        <Group justify='left' p='ms' gap='md' wrap='nowrap'>\n          <IconSitemap />\n          <StylishText size='lg'>{title}</StylishText>\n        </Group>\n      }\n    >\n      <Stack gap='xs'>\n        <Divider />\n        <LoadingOverlay visible={query.isFetching || query.isLoading} />\n        {query.isError ? (\n          <Alert color='red' title={t`Error`} icon={<IconExclamationCircle />}>\n            {t`Error loading navigation tree.`}\n          </Alert>\n        ) : (\n          <Tree data={data} tree={treeState} renderNode={renderNode} />\n        )}\n      </Stack>\n    </Drawer>\n  );\n}\n"],"names":["NavigationTree","title","opened","onClose","selectedId","modelType","endpoint","api","useApi","navigate","useNavigate","treeState","useTree","query","useQuery","enabled","queryKey","queryFn","get","apiUrl","data","ordering","then","response","follow","useCallback","node","event","url","getDetailUrl","value","eventModified","useMemo","nodes","tree","length","ii","children","label","jsxs","Group","jsx","ApiIcon","icon","name","pk","toString","selected","parent","push","expanded","renderNode","payload","hasChildren","toggleExpanded","Space","level","ActionIcon","IconChevronDown","IconChevronRight","Anchor","Drawer","header","width","IconSitemap","StylishText","Stack","Divider","LoadingOverlay","isFetching","isLoading","isError","Alert","_i18n","_","id","IconExclamationCircle","Tree"],"mappings":"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"}
