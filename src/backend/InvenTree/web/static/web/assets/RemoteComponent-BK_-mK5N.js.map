{"version":3,"file":"RemoteComponent-BK_-mK5N.js","sources":["../../../../../../frontend/src/components/plugins/PluginUIFeature.tsx","../../../../../../frontend/src/components/plugins/RemoteComponent.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Alert, Stack, Text } from '@mantine/core';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\n\nimport type { TemplateI } from '../../tables/settings/TemplateTable';\nimport type {\n  EditorComponent,\n  PreviewAreaComponent,\n  PreviewAreaRef\n} from '../editors/TemplateEditor/TemplateEditor';\nimport type {\n  PluginUIFuncWithoutInvenTreeContextType,\n  TemplateEditorUIFeature,\n  TemplatePreviewUIFeature\n} from './PluginUIFeatureTypes';\n\n/**\n * Enumeration for available plugin UI feature types.\n */\nexport enum PluginUIFeatureType {\n  dashboard = 'dashboard',\n  panel = 'panel',\n  template_editor = 'template_editor',\n  template_preview = 'template_preview',\n  navigation = 'navigation'\n}\n\n/**\n * Type definition for a UI component which can be loaded via plugin.\n * Ref: src/backend/InvenTree/plugin/base/ui/serializers.py:PluginUIFeatureSerializer\n *\n * @param plugin_name: The name of the plugin\n * @param feature_type: The type of the UI feature (see PluginUIFeatureType)\n * @param key: The unique key for the feature (used to identify the feature in the DOM)\n * @param title: The title of the feature (human readable)\n * @param description: A description of the feature (human readable, optional)\n * @param options: Additional options for the feature (optional, depends on the feature type)\n * @param context: Additional context data passed to the rendering function (optional)\n * @param source: The source of the feature (must point to an accessible javascript module)\n *\n */\nexport interface PluginUIFeature {\n  plugin_name: string;\n  feature_type: PluginUIFeatureType;\n  key: string;\n  title: string;\n  description?: string;\n  icon?: string;\n  options?: any;\n  context?: any;\n  source: string;\n}\n\nexport const getPluginTemplateEditor = (\n  func: PluginUIFuncWithoutInvenTreeContextType<TemplateEditorUIFeature>,\n  template: TemplateI\n) =>\n  forwardRef((props, ref) => {\n    const elRef = useRef<HTMLDivElement>();\n    const [error, setError] = useState<string | undefined>(undefined);\n\n    const initialCodeRef = useRef<string>();\n    const setCodeRef = useRef<(code: string) => void>();\n    const getCodeRef = useRef<() => string>();\n\n    useImperativeHandle(ref, () => ({\n      setCode: (code) => {\n        // if the editor is not yet initialized, store the initial code in a ref to set it later\n        if (setCodeRef.current) {\n          setCodeRef.current(code);\n        } else {\n          initialCodeRef.current = code;\n        }\n      },\n      getCode: () => getCodeRef.current?.()\n    }));\n\n    useEffect(() => {\n      let unmountHandler: (() => void) | undefined;\n      (async () => {\n        try {\n          unmountHandler = await func({\n            ref: elRef.current!,\n            registerHandlers: ({ getCode, setCode }) => {\n              setCodeRef.current = setCode;\n              getCodeRef.current = getCode;\n\n              if (initialCodeRef.current) {\n                setCode(initialCodeRef.current);\n              }\n            },\n            template\n          });\n        } catch (error) {\n          setError(t`Error occurred while rendering the template editor.`);\n          console.error(error);\n        }\n      })();\n\n      return () => {\n        if (typeof unmountHandler === 'function') {\n          unmountHandler();\n        }\n      };\n    }, []);\n\n    return (\n      <Stack gap='xs' style={{ display: 'flex', flex: 1 }}>\n        {error && (\n          <Alert\n            color='red'\n            title={t`Error Loading Plugin Editor`}\n            icon={<IconExclamationCircle />}\n          >\n            <Text>{error}</Text>\n          </Alert>\n        )}\n        <div ref={elRef as any} style={{ display: 'flex', flex: 1 }} />\n      </Stack>\n    );\n  }) as EditorComponent;\n\nexport const getPluginTemplatePreview = (\n  func: PluginUIFuncWithoutInvenTreeContextType<TemplatePreviewUIFeature>,\n  template: TemplateI\n) =>\n  forwardRef((props, ref) => {\n    const elRef = useRef<HTMLDivElement>();\n    const [error, setError] = useState<string | undefined>(undefined);\n\n    const updatePreviewRef = useRef<PreviewAreaRef['updatePreview']>();\n\n    useImperativeHandle(ref, () => ({\n      updatePreview: (...args) => updatePreviewRef.current?.(...args)\n    }));\n\n    useEffect(() => {\n      (async () => {\n        try {\n          func({\n            ref: elRef.current!,\n            registerHandlers: ({ updatePreview }) => {\n              updatePreviewRef.current = updatePreview;\n            },\n            template\n          });\n        } catch (error) {\n          setError(t`Error occurred while rendering the template preview.`);\n          console.error(error);\n        }\n      })();\n    }, []);\n\n    return (\n      <Stack gap='xs' style={{ display: 'flex', flex: 1 }}>\n        {error && (\n          <Alert\n            color='red'\n            title={t`Error Loading Plugin Preview`}\n            icon={<IconExclamationCircle />}\n          >\n            <Text>{error}</Text>\n          </Alert>\n        )}\n        <div ref={elRef as any} style={{ display: 'flex', flex: 1 }} />\n      </Stack>\n    );\n  }) as PreviewAreaComponent;\n","import { t } from '@lingui/core/macro';\nimport { Alert, MantineProvider, Stack, Text } from '@mantine/core';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { identifierString } from '@lib/functions/Conversion';\nimport type { InvenTreePluginContext } from '@lib/types/Plugins';\nimport { type Root, createRoot } from 'react-dom/client';\nimport { api, queryClient } from '../../App';\nimport { ApiProvider } from '../../contexts/ApiContext';\nimport { LanguageContext } from '../../contexts/LanguageContext';\nimport { useLocalState } from '../../states/LocalState';\nimport { Boundary } from '../Boundary';\nimport { findExternalPluginFunction } from './PluginSource';\n\n/**\n * A remote component which can be used to display plugin content.\n * Content is loaded dynamically (from an external source).\n *\n * @param pluginFeature: The plugin feature to render\n * @param defaultFunctionName: The default function name to call (if not overridden by pluginFeature.source)\n * @param pluginContext: The context to pass to the plugin function\n *\n */\nexport default function RemoteComponent({\n  source,\n  defaultFunctionName,\n  context\n}: Readonly<{\n  source: string;\n  defaultFunctionName: string;\n  context: InvenTreePluginContext;\n}>) {\n  const componentRef = useRef<HTMLDivElement>();\n  const rootElement = useRef<Root | null>(null);\n\n  useEffect(() => {\n    if (componentRef.current && rootElement.current === null) {\n      rootElement.current = createRoot(componentRef.current);\n    }\n  }, [rootElement]);\n\n  const [renderingError, setRenderingError] = useState<string | undefined>(\n    undefined\n  );\n\n  const func: string = useMemo(() => {\n    // Attempt to extract the function name from the source\n    const { getHost } = useLocalState.getState();\n    const url = new URL(source, getHost());\n\n    if (url.pathname.includes(':')) {\n      const parts = url.pathname.split(':');\n      return parts[1] || defaultFunctionName; // Use the second part as the function name, or fallback to default\n    } else {\n      return defaultFunctionName;\n    }\n  }, [source, defaultFunctionName]);\n\n  const reloadPluginContent = useCallback(() => {\n    if (!rootElement.current) {\n      return;\n    }\n\n    const ctx: InvenTreePluginContext = {\n      ...context,\n      reloadContent: reloadPluginContent\n    };\n\n    if (source && defaultFunctionName) {\n      findExternalPluginFunction(source, func)\n        .then((func) => {\n          if (!!func) {\n            try {\n              if (func.length > 1) {\n                // Support \"legacy\" plugin functions which call createRoot() internally\n                // Ref: https://github.com/inventree/InvenTree/pull/9439/\n                func(componentRef.current, ctx);\n              } else {\n                // Render the plugin component into the target element\n                // Note that we have to provide the right context(s) to the component\n                // This approach ensures that the component is rendered in the correct context tree\n                rootElement.current?.render(\n                  <ApiProvider client={queryClient} api={api}>\n                    <MantineProvider\n                      theme={ctx.theme}\n                      defaultColorScheme={ctx.colorScheme}\n                    >\n                      <LanguageContext>{func(ctx)}</LanguageContext>\n                    </MantineProvider>\n                  </ApiProvider>\n                );\n              }\n\n              setRenderingError('');\n            } catch (error) {\n              setRenderingError(`${error}`);\n              console.error(error);\n            }\n          } else {\n            setRenderingError(`${source} / ${func}`);\n          }\n        })\n        .catch((_error) => {\n          console.error(\n            `ERR: Failed to load remote plugin function: ${source} /${func}`\n          );\n        });\n    } else {\n      setRenderingError(\n        `${t`Invalid source or function name`} - ${source} /${func}`\n      );\n    }\n  }, [\n    componentRef.current,\n    rootElement.current,\n    source,\n    defaultFunctionName,\n    context\n  ]);\n\n  // Reload the plugin content dynamically\n  useEffect(() => {\n    reloadPluginContent();\n  }, [\n    func,\n    rootElement.current,\n    context.id,\n    context.model,\n    context.instance,\n    context.user,\n    context.colorScheme,\n    context.locale,\n    context.context\n  ]);\n\n  return (\n    <Boundary label={identifierString(`RemoteComponent-${func}`)}>\n      <Stack gap='xs'>\n        {renderingError && (\n          <Alert\n            color='red'\n            title={t`Error Loading Content`}\n            icon={<IconExclamationCircle />}\n          >\n            <Text>\n              {t`Error occurred while loading plugin content`}: {renderingError}\n            </Text>\n          </Alert>\n        )}\n        {componentRef && <div ref={componentRef as any} />}\n      </Stack>\n    </Boundary>\n  );\n}\n"],"names":["PluginUIFeatureType","dashboard","panel","template_editor","template_preview","navigation","getPluginTemplateEditor","func","template","forwardRef","props","ref","elRef","useRef","error","setError","useState","undefined","initialCodeRef","setCodeRef","getCodeRef","useImperativeHandle","setCode","code","current","getCode","useEffect","unmountHandler","registerHandlers","_i18n","_","id","console","jsxs","Stack","display","flex","jsx","Alert","IconExclamationCircle","Text","getPluginTemplatePreview","updatePreviewRef","updatePreview","args","RemoteComponent","source","defaultFunctionName","context","componentRef","rootElement","createRoot","renderingError","setRenderingError","useMemo","getHost","useLocalState","getState","url","URL","pathname","includes","split","reloadPluginContent","useCallback","ctx","reloadContent","findExternalPluginFunction","then","length","render","ApiProvider","queryClient","api","MantineProvider","theme","colorScheme","LanguageContext","catch","_error","model","instance","user","locale","Boundary","identifierString"],"mappings":"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"}
