{"version":3,"file":"SettingList-Bx7uAi1U.js","sources":["../../../../../../frontend/src/components/nav/SettingsHeader.tsx","../../../../../../frontend/src/components/settings/SettingItem.tsx","../../../../../../frontend/src/components/settings/SettingList.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, SegmentedControl, Stack, Text } from '@mantine/core';\nimport type { ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useUserState } from '../../states/UserState';\nimport { StylishText } from '../items/StylishText';\n\ninterface SettingsHeaderInterface {\n  label: string;\n  title: string;\n  shorthand?: string;\n  subtitle?: string | ReactNode;\n}\n\n/**\n * Construct a settings page header with interlinks to one other settings page\n */\nexport function SettingsHeader({\n  label,\n  title,\n  shorthand,\n  subtitle\n}: Readonly<SettingsHeaderInterface>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n\n  return (\n    <Group justify='space-between'>\n      <Stack gap='0' ml={'sm'}>\n        <Group>\n          <StylishText size='xl'>{title}</StylishText>\n          {shorthand && <Text c='dimmed'>({shorthand})</Text>}\n        </Group>\n        <Group>{subtitle ? <Text c='dimmed'>{subtitle}</Text> : null}</Group>\n      </Stack>\n      {user.isStaff() && (\n        <SegmentedControl\n          data={[\n            { value: 'user', label: t`User Settings` },\n            { value: 'system', label: t`System Settings` },\n            { value: 'admin', label: t`Admin Center` }\n          ]}\n          onChange={(value) => navigate(`/settings/${value}`)}\n          value={label}\n        />\n      )}\n    </Group>\n  );\n}\n","import {\n  Button,\n  Group,\n  Paper,\n  Space,\n  Stack,\n  Switch,\n  Text,\n  useMantineColorScheme\n} from '@mantine/core';\nimport { IconEdit } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ModelInformationDict } from '@lib/enums/ModelInformation';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { Setting } from '@lib/types/Settings';\nimport { api } from '../../App';\nimport { vars } from '../../theme';\nimport { Boundary } from '../Boundary';\nimport { RenderInstance } from '../render/Instance';\n\n/**\n * Render a single setting value\n */\nfunction SettingValue({\n  setting,\n  onEdit,\n  onToggle\n}: Readonly<{\n  setting: Setting;\n  onEdit: (setting: Setting) => void;\n  onToggle: (setting: Setting, value: boolean) => void;\n}>) {\n  // Determine the text to display for the setting value\n  const valueText: string = useMemo(() => {\n    let value = setting.value;\n\n    // If the setting has a choice, display the choice label\n    if (setting?.choices && setting?.choices?.length > 0) {\n      const choice = setting.choices.find((c) => c.value == setting.value);\n      value = choice?.display_name || setting.value;\n    }\n\n    if (setting?.units) {\n      value = `${value} ${setting.units}`;\n    }\n\n    return value;\n  }, [setting]);\n\n  const [modelInstance, setModelInstance] = useState<any>(null);\n\n  // Launch the edit dialog for this setting\n  const editSetting = useCallback(() => {\n    if (!setting.read_only) {\n      onEdit(setting);\n    }\n  }, [setting, onEdit]);\n\n  // Toggle the setting value (if it is a boolean)\n  const toggleSetting = useCallback(\n    (event: any) => {\n      if (!setting.read_only) {\n        onToggle(setting, event.currentTarget.checked);\n      }\n    },\n    [setting, onToggle]\n  );\n\n  // Does this setting map to an internal database model?\n  const modelType: ModelType | null = useMemo(() => {\n    if (setting.model_name) {\n      const model = setting.model_name.split('.')[1];\n      return ModelType[model as keyof typeof ModelType] || null;\n    }\n    return null;\n  }, [setting]);\n\n  useEffect(() => {\n    setModelInstance(null);\n\n    if (modelType && setting.value) {\n      const endpoint = ModelInformationDict[modelType].api_endpoint;\n\n      api\n        .get(apiUrl(endpoint, setting.value))\n        .then((response) => {\n          if (response.data) {\n            setModelInstance(response.data);\n          } else {\n            setModelInstance(null);\n          }\n        })\n        .catch((error) => {\n          setModelInstance(null);\n        });\n    }\n  }, [setting, modelType]);\n\n  // If a full model instance is available, render it\n  if (modelInstance && modelType && setting.value) {\n    return (\n      <Group justify='right' gap='xs'>\n        <RenderInstance instance={modelInstance} model={modelType} />\n        <Button\n          aria-label={`edit-setting-${setting.key}`}\n          variant='subtle'\n          disabled={setting.read_only}\n          onClick={editSetting}\n        >\n          <IconEdit />\n        </Button>\n      </Group>\n    );\n  }\n\n  switch (setting?.type || 'string') {\n    case 'boolean':\n      return (\n        <Switch\n          size='sm'\n          radius='lg'\n          aria-label={`toggle-setting-${setting.key}`}\n          disabled={setting.read_only}\n          checked={setting.value.toString().toLowerCase() == 'true'}\n          onChange={toggleSetting}\n          wrapperProps={{\n            'aria-label': `setting-${setting.key}-wrapper`\n          }}\n          style={{\n            paddingRight: '20px'\n          }}\n        />\n      );\n    default:\n      return valueText ? (\n        <Group gap='xs' justify='right'>\n          <Space />\n          <Button\n            aria-label={`edit-setting-${setting.key}`}\n            variant='subtle'\n            disabled={setting.read_only}\n            onClick={editSetting}\n          >\n            {valueText}\n          </Button>\n        </Group>\n      ) : (\n        <Button\n          aria-label={`edit-setting-${setting.key}`}\n          variant='subtle'\n          disabled={setting.read_only}\n          onClick={editSetting}\n        >\n          <IconEdit />\n        </Button>\n      );\n  }\n}\n\n/**\n * Display a single setting item, and allow editing of the value\n */\nexport function SettingItem({\n  setting,\n  shaded,\n  onEdit,\n  onToggle\n}: Readonly<{\n  setting: Setting;\n  shaded: boolean;\n  onEdit: (setting: Setting) => void;\n  onToggle: (setting: Setting, value: boolean) => void;\n}>) {\n  const { colorScheme } = useMantineColorScheme();\n\n  const style: Record<string, string> = { paddingLeft: '8px' };\n  if (shaded) {\n    style['backgroundColor'] =\n      colorScheme === 'light' ? vars.colors.gray[1] : vars.colors.gray[9];\n  }\n\n  return (\n    <Paper style={style}>\n      <Group justify='space-between' p='3'>\n        <Stack gap='2' p='4px'>\n          <Text>\n            {setting.name}\n            {setting.required ? ' *' : ''}\n          </Text>\n          <Text size='xs'>{setting.description}</Text>\n        </Stack>\n        <Boundary label={`setting-value-${setting.key}`}>\n          <SettingValue setting={setting} onEdit={onEdit} onToggle={onToggle} />\n        </Boundary>\n      </Group>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Alert, Skeleton, Stack, Text } from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { useStore } from 'zustand';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { Setting, SettingsStateProps } from '@lib/types/Settings';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport { useApi } from '../../contexts/ApiContext';\nimport { useEditApiFormModal } from '../../hooks/UseForm';\nimport {\n  createMachineSettingsState,\n  createPluginSettingsState,\n  useGlobalSettingsState,\n  useUserSettingsState\n} from '../../states/SettingsStates';\nimport { SettingItem } from './SettingItem';\n\n/**\n * Display a list of setting items, based on a list of provided keys\n */\nexport function SettingList({\n  settingsState,\n  keys,\n  onChange,\n  onLoaded\n}: Readonly<{\n  settingsState: SettingsStateProps;\n  keys?: string[];\n  onChange?: () => void;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  useEffect(() => {\n    if (settingsState.loaded) {\n      // Call the onLoaded callback if provided\n      onLoaded?.(settingsState);\n    }\n  }, [settingsState.loaded, settingsState.settings]);\n\n  const api = useApi();\n\n  const allKeys = useMemo(\n    () => settingsState?.settings?.map((s) => s.key) ?? [],\n    [settingsState?.settings]\n  );\n\n  const [setting, setSetting] = useState<Setting | undefined>(undefined);\n\n  // Determine the field type of the setting\n  const fieldType = useMemo(() => {\n    if (setting?.choices?.length) {\n      return 'choice';\n    }\n\n    if (setting?.type != undefined) {\n      return setting.type;\n    }\n\n    return 'string';\n  }, [setting]);\n\n  const key: string = useMemo(() => setting?.key ?? '', [setting]);\n\n  const editSettingModal = useEditApiFormModal({\n    url: settingsState.endpoint,\n    pk: key,\n    pathParams: settingsState.pathParams,\n    title: t`Edit Setting`,\n    fields: {\n      value: {\n        field_type: fieldType,\n        required: setting?.required ?? false,\n        label: setting?.name,\n        description: setting?.description,\n        api_url: setting?.api_url ?? '',\n        model: (setting?.model_name?.split('.')[1] as ModelType) ?? null,\n        filters: setting?.model_filters || undefined,\n        choices: setting?.choices ?? undefined\n      }\n    },\n    successMessage: t`Setting ${key} updated successfully`,\n    onFormSuccess: () => {\n      settingsState.fetchSettings();\n      onChange?.();\n    }\n  });\n\n  // Callback for editing a single setting instance\n  const onValueEdit = useCallback(\n    (setting: Setting) => {\n      setSetting(setting);\n      editSettingModal.open();\n    },\n    [editSettingModal]\n  );\n\n  // Callback for toggling a single boolean setting instance\n  const onValueToggle = useCallback(\n    (setting: Setting, value: boolean) => {\n      api\n        .patch(\n          apiUrl(settingsState.endpoint, setting.key, settingsState.pathParams),\n          {\n            value: value\n          }\n        )\n        .then(() => {\n          notifications.hide('setting');\n          notifications.show({\n            title: t`Setting updated`,\n            message: t`Setting ${setting.key} updated successfully`,\n            color: 'green',\n            id: 'setting'\n          });\n          onChange?.();\n        })\n        .catch((error) => {\n          notifications.hide('setting');\n          notifications.show({\n            title: t`Error editing setting`,\n            message: error.message,\n            color: 'red',\n            id: 'setting'\n          });\n        })\n        .finally(() => {\n          settingsState.fetchSettings();\n        });\n    },\n    [settingsState]\n  );\n\n  if (settingsState.isError) {\n    return (\n      <Alert color='red' icon={<IconExclamationCircle />} title={t`Error`}>\n        <Text>{t`Error loading settings`}</Text>\n      </Alert>\n    );\n  }\n\n  if (!settingsState?.loaded) {\n    return <Skeleton animate />;\n  }\n\n  return (\n    <>\n      {editSettingModal.modal}\n      <Stack gap='xs'>\n        {(keys || allKeys)?.map((key, i) => {\n          const setting = settingsState?.settings?.find(\n            (s: any) => s.key === key\n          );\n\n          if (settingsState?.settings && !setting) {\n            console.error(`Setting ${key} not found`);\n          }\n\n          return (\n            <React.Fragment key={key}>\n              {setting ? (\n                <SettingItem\n                  setting={setting}\n                  shaded={i % 2 === 0}\n                  onEdit={onValueEdit}\n                  onToggle={onValueToggle}\n                />\n              ) : (\n                <Text size='sm' style={{ fontStyle: 'italic' }} c='red'>\n                  Setting {key} not found\n                </Text>\n              )}\n            </React.Fragment>\n          );\n        })}\n        {(keys || allKeys)?.length === 0 && (\n          <Text style={{ fontStyle: 'italic' }}>\n            <Trans>No settings specified</Trans>\n          </Text>\n        )}\n      </Stack>\n    </>\n  );\n}\n\nexport function UserSettingList({ keys }: Readonly<{ keys: string[] }>) {\n  const userSettings = useUserSettingsState();\n\n  return <SettingList settingsState={userSettings} keys={keys} />;\n}\n\nexport function GlobalSettingList({ keys }: Readonly<{ keys: string[] }>) {\n  const globalSettings = useGlobalSettingsState();\n\n  return <SettingList settingsState={globalSettings} keys={keys} />;\n}\n\nexport function PluginSettingList({\n  pluginKey,\n  onLoaded\n}: Readonly<{\n  pluginKey: string;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  const pluginSettingsStore = useRef(\n    createPluginSettingsState({\n      plugin: pluginKey,\n      endpoint: ApiEndpoints.plugin_setting_list\n    })\n  ).current;\n  const pluginSettings = useStore(pluginSettingsStore);\n\n  return <SettingList settingsState={pluginSettings} onLoaded={onLoaded} />;\n}\n\nexport function PluginUserSettingList({\n  pluginKey,\n  onLoaded\n}: Readonly<{\n  pluginKey: string;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  const pluginUserSettingsState = useRef(\n    createPluginSettingsState({\n      plugin: pluginKey,\n      endpoint: ApiEndpoints.plugin_user_setting_list\n    })\n  ).current;\n  const pluginUserSettings = useStore(pluginUserSettingsState);\n\n  return <SettingList settingsState={pluginUserSettings} onLoaded={onLoaded} />;\n}\n\nexport function MachineSettingList({\n  machinePk,\n  configType,\n  onChange\n}: Readonly<{\n  machinePk: string;\n  configType: 'M' | 'D';\n  onChange?: () => void;\n}>) {\n  const machineSettingsStore = useRef(\n    createMachineSettingsState({\n      machine: machinePk,\n      configType: configType\n    })\n  ).current;\n  const machineSettings = useStore(machineSettingsStore);\n\n  return <SettingList settingsState={machineSettings} onChange={onChange} />;\n}\n"],"names":["SettingsHeader","label","title","shorthand","subtitle","user","useUserState","navigate","useNavigate","jsxs","Group","Stack","jsx","StylishText","Text","isStaff","SegmentedControl","value","_i18n","_","id","SettingValue","setting","onEdit","onToggle","valueText","useMemo","choices","length","choice","find","c","display_name","units","modelInstance","setModelInstance","useState","editSetting","useCallback","read_only","toggleSetting","event","currentTarget","checked","modelType","model_name","model","split","ModelType","useEffect","endpoint","ModelInformationDict","api_endpoint","get","apiUrl","then","response","data","catch","error","RenderInstance","Button","key","IconEdit","type","Switch","toString","toLowerCase","paddingRight","Space","SettingItem","shaded","colorScheme","useMantineColorScheme","style","paddingLeft","vars","colors","gray","Paper","name","required","description","Boundary","SettingList","settingsState","keys","onChange","onLoaded","loaded","settings","api","useApi","allKeys","map","s","setSetting","undefined","fieldType","editSettingModal","useEditApiFormModal","url","pk","pathParams","fields","field_type","api_url","filters","model_filters","successMessage","values","onFormSuccess","fetchSettings","onValueEdit","open","onValueToggle","patch","notifications","hide","show","message","0","color","finally","isError","Alert","IconExclamationCircle","modal","i","React","fontStyle","_Trans","Skeleton","UserSettingList","userSettings","useUserSettingsState","GlobalSettingList","globalSettings","useGlobalSettingsState","PluginSettingList","pluginKey","pluginSettingsStore","useRef","createPluginSettingsState","plugin","ApiEndpoints","plugin_setting_list","current","pluginSettings","useStore","PluginUserSettingList","pluginUserSettingsState","plugin_user_setting_list","pluginUserSettings","MachineSettingList","machinePk","configType","machineSettingsStore","createMachineSettingsState","machine","machineSettings"],"mappings":"ocAkBO,SAASA,GAAe,CAC7BC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,SAAAA,CACiC,EAAG,CACpC,MAAMC,EAAOC,EAAa,EACpBC,EAAWC,EAAY,EAG3B,OAAAC,EAAA,KAACC,EAAM,CAAA,QAAQ,gBACb,SAAA,CAAAD,EAAA,KAACE,EAAM,CAAA,IAAI,IAAI,GAAI,KACjB,SAAA,CAAAF,OAACC,EACC,CAAA,SAAA,CAACE,EAAA,IAAAC,GAAA,CAAY,KAAK,KAAMX,SAAMA,EAAA,EAC7BC,GAAaM,EAAA,KAACK,EAAK,CAAA,EAAE,SAAS,SAAA,CAAA,IAAEX,EAAU,GAAA,CAAC,CAAA,CAAA,EAC9C,EACAS,EAAAA,IAACF,GAAON,SAAWA,EAAAQ,EAAAA,IAACE,GAAK,EAAE,SAAUV,SAASA,CAAA,CAAA,EAAU,IAAK,CAAA,CAAA,EAC/D,EACCC,EAAKU,QAAQ,GACXH,EAAAA,IAAAI,EAAA,CACC,KAAM,CACJ,CAAEC,MAAO,OAAQhB,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,CAAC,EACxC,CAAEH,MAAO,SAAUhB,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,CAAC,EAC5C,CAAEH,MAAO,QAAShB,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,CAAG,CAAA,EAE5C,SAAqBb,GAAAA,EAAS,aAAaU,CAAK,EAAE,EAClD,MAAOhB,CAEV,CAAA,CAAA,EACH,CAEJ,CCxBA,SAASoB,GAAa,CACpBC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,CAKD,EAAG,CAEIC,MAAAA,EAAoBC,EAAAA,QAAQ,IAAM,OACtC,IAAIT,EAAQK,EAAQL,MAGpB,GAAIK,GAAAA,MAAAA,EAASK,WAAWL,EAAAA,GAAAA,YAAAA,EAASK,UAATL,YAAAA,EAAkBM,QAAS,EAAG,CAC9CC,MAAAA,EAASP,EAAQK,QAAQG,QAAYC,EAAEd,OAASK,EAAQL,KAAK,EAC3DY,GAAAA,GAAAA,YAAAA,EAAQG,eAAgBV,EAAQL,KAAAA,CAG1C,OAAIK,GAAAA,MAAAA,EAASW,QACXhB,EAAQ,GAAGA,CAAK,IAAIK,EAAQW,KAAK,IAG5BhB,CAAAA,EACN,CAACK,CAAO,CAAC,EAEN,CAACY,EAAeC,CAAgB,EAAIC,EAAAA,SAAc,IAAI,EAGtDC,EAAcC,EAAAA,YAAY,IAAM,CAC/BhB,EAAQiB,WACXhB,EAAOD,CAAO,CAChB,EACC,CAACA,EAASC,CAAM,CAAC,EAGdiB,EAAgBF,cACnBG,GAAe,CACTnB,EAAQiB,WACFjB,EAAAA,EAASmB,EAAMC,cAAcC,OAAO,CAC/C,EAEF,CAACrB,EAASE,CAAQ,CACpB,EAGMoB,EAA8BlB,EAAAA,QAAQ,IAAM,CAChD,GAAIJ,EAAQuB,WAAY,CACtB,MAAMC,EAAQxB,EAAQuB,WAAWE,MAAM,GAAG,EAAE,CAAC,EACtCC,OAAAA,EAAUF,CAA+B,GAAK,IAAA,CAEhD,OAAA,IAAA,EACN,CAACxB,CAAO,CAAC,EAwBRY,GAtBJe,EAAAA,UAAU,IAAM,CAGVL,GAFJT,EAAiB,IAAI,EAEjBS,GAAatB,EAAQL,MAAO,CACxBiC,MAAAA,EAAWC,EAAqBP,CAAS,EAAEQ,aAG9CC,EAAAA,IAAIC,EAAOJ,EAAU5B,EAAQL,KAAK,CAAC,EACnCsC,KAAmBC,GAAA,CACdA,EAASC,KACXtB,EAAiBqB,EAASC,IAAI,EAE9BtB,EAAiB,IAAI,CACvB,CACD,EACAuB,MAAiBC,GAAA,CAChBxB,EAAiB,IAAI,CAAA,CACtB,CAAA,CACL,EACC,CAACb,EAASsB,CAAS,CAAC,EAGnBV,GAAiBU,GAAatB,EAAQL,MACxC,OACGR,EAAAA,KAAAC,EAAA,CAAM,QAAQ,QAAQ,IAAI,KACzB,SAAA,CAAAE,EAAA,IAACgD,GAAe,CAAA,SAAU1B,EAAe,MAAOU,EAAU,QACzDiB,EACC,CAAA,aAAY,gBAAgBvC,EAAQwC,GAAG,GACvC,QAAQ,SACR,SAAUxC,EAAQiB,UAClB,QAASF,EAET,SAAAzB,EAAA,IAACmD,IAAQ,CACX,CAAA,CAAA,EACF,EAIIzC,QAAAA,GAAAA,YAAAA,EAAS0C,OAAQ,SAAQ,CAC/B,IAAK,UAED,OAAApD,MAACqD,EACC,CAAA,KAAK,KACL,OAAO,KACP,aAAY,kBAAkB3C,EAAQwC,GAAG,GACzC,SAAUxC,EAAQiB,UAClB,QAASjB,EAAQL,MAAMiD,WAAWC,YAAiB,GAAA,OACnD,SAAU3B,EACV,aAAc,CACZ,aAAc,WAAWlB,EAAQwC,GAAG,YAEtC,MAAO,CACLM,aAAc,MAAA,EAEhB,EAEN,QACE,OAAO3C,EACJhB,EAAA,KAAAC,EAAA,CAAM,IAAI,KAAK,QAAQ,QACtB,SAAA,CAAAE,EAAA,IAACyD,EAAK,EAAA,EACLzD,EAAA,IAAAiD,EAAA,CACC,aAAY,gBAAgBvC,EAAQwC,GAAG,GACvC,QAAQ,SACR,SAAUxC,EAAQiB,UAClB,QAASF,EAERZ,SACHA,CAAA,CAAA,CAAA,EACF,EAECb,MAAAiD,EAAA,CACC,aAAY,gBAAgBvC,EAAQwC,GAAG,GACvC,QAAQ,SACR,SAAUxC,EAAQiB,UAClB,QAASF,EAET,SAAAzB,MAACmD,GAAQ,CAAA,EACX,CAAA,CAGR,CAKO,SAASO,GAAY,CAC1BhD,QAAAA,EACAiD,OAAAA,EACAhD,OAAAA,EACAC,SAAAA,CAMD,EAAG,CACI,KAAA,CAAEgD,YAAAA,GAAgBC,EAAsB,EAExCC,EAAgC,CAAEC,YAAa,KAAM,EAC3D,OAAIJ,IACFG,EAAM,gBACJF,IAAgB,QAAUI,EAAKC,OAAOC,KAAK,CAAC,EAAIF,EAAKC,OAAOC,KAAK,CAAC,GAIpElE,EAAA,IAACmE,GAAM,MAAAL,EACL,SAAAjE,EAAA,KAACC,GAAM,QAAQ,gBAAgB,EAAE,IAC/B,SAAA,CAAAD,EAAA,KAACE,EAAM,CAAA,IAAI,IAAI,EAAE,MACf,SAAA,CAAAF,OAACK,EACEQ,CAAAA,SAAAA,CAAQ0D,EAAAA,KACR1D,EAAQ2D,SAAW,KAAO,EAAA,EAC7B,EACCrE,EAAA,IAAAE,EAAA,CAAK,KAAK,KAAMQ,WAAQ4D,WAAY,CAAA,CAAA,EACvC,EACCtE,EAAA,IAAAuE,GAAA,CAAS,MAAO,iBAAiB7D,EAAQwC,GAAG,GAC3C,SAAAlD,EAAAA,IAACS,GAAa,CAAA,QAAAC,EAAkB,OAAAC,EAAgB,SAAAC,CAAA,CAAmB,CACrE,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ,CCxKO,SAAS4D,EAAY,CAC1BC,cAAAA,EACAC,KAAAA,EACAC,SAAAA,EACAC,SAAAA,CAMD,EAAG,WACFvC,EAAAA,UAAU,IAAM,CACVoC,EAAcI,SAEhBD,GAAAA,MAAAA,EAAWH,KAEZ,CAACA,EAAcI,OAAQJ,EAAcK,QAAQ,CAAC,EAEjD,MAAMC,EAAMC,GAAO,EAEbC,EAAUnE,EAAAA,QACd,IAAM2D,OAAAA,QAAAA,EAAAA,GAAAA,YAAAA,EAAeK,WAAfL,YAAAA,EAAyBS,IAAKC,GAAMA,EAAEjC,OAAQ,CAAA,GACpD,CAACuB,GAAAA,YAAAA,EAAeK,QAAQ,CAC1B,EAEM,CAACpE,EAAS0E,CAAU,EAAI5D,EAAAA,SAA8B6D,MAAS,EAG/DC,EAAYxE,EAAAA,QAAQ,IAAM,OAC1BJ,OAAAA,EAAAA,GAAAA,YAAAA,EAASK,UAATL,MAAAA,EAAkBM,OACb,UAGLN,GAAAA,YAAAA,EAAS0C,OAAQiC,KACZ3E,EAAQ0C,KAGV,QAAA,EACN,CAAC1C,CAAO,CAAC,EAENwC,EAAcpC,EAAAA,QAAQ,KAAMJ,GAAAA,YAAAA,EAASwC,MAAO,GAAI,CAACxC,CAAO,CAAC,EAEzD6E,EAAmBC,GAAoB,CAC3CC,IAAKhB,EAAcnC,SACnBoD,GAAIxC,EACJyC,WAAYlB,EAAckB,WAC1BrG,MAAKgB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtBoF,OAAQ,CACNvF,MAAO,CACLwF,WAAYP,EACZjB,UAAU3D,GAAAA,YAAAA,EAAS2D,WAAY,GAC/BhF,MAAOqB,GAAAA,YAAAA,EAAS0D,KAChBE,YAAa5D,GAAAA,YAAAA,EAAS4D,YACtBwB,SAASpF,GAAAA,YAAAA,EAASoF,UAAW,GAC7B5D,QAAQxB,EAAAA,GAAAA,YAAAA,EAASuB,aAATvB,YAAAA,EAAqByB,MAAM,KAAK,KAAoB,KAC5D4D,SAASrF,GAAAA,YAAAA,EAASsF,gBAAiBX,OACnCtE,SAASL,GAAAA,YAAAA,EAASK,UAAWsE,MAAAA,CAEjC,EACAY,eAAc3F,EAAAC,EAAE,CAAAC,GAAA,SAAA0F,OAAA,CAAAhD,IAAAA,CAAAA,CAAe,CAAuB,EACtDiD,cAAeA,IAAM,CACnB1B,EAAc2B,cAAc,EACjBzB,GAAA,MAAAA,GAAA,CACb,CACD,EAGK0B,EAAc3E,cACjBhB,GAAqB,CACpB0E,EAAW1E,CAAO,EAClB6E,EAAiBe,KAAK,CAAA,EAExB,CAACf,CAAgB,CACnB,EAGMgB,EAAgB7E,EAAAA,YACpB,CAAChB,EAAkBL,IAAmB,CAEjCmG,EAAAA,MACC9D,EAAO+B,EAAcnC,SAAU5B,EAAQwC,IAAKuB,EAAckB,UAAU,EACpE,CACEtF,MAAAA,CAAAA,CAEJ,EACCsC,KAAK,IAAM,CACV8D,EAAcC,KAAK,SAAS,EAC5BD,EAAcE,KAAK,CACjBrH,MAAKgB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzBoG,QAAOtG,EAAAC,EAAE,CAAAC,GAAA,SAAA0F,OAAA,CAAAW,EAAYnG,EAAQwC,GAAAA,CAAG,CAAuB,EACvD4D,MAAO,QACPtG,GAAI,SAAA,CACL,EACUmE,GAAA,MAAAA,GAAA,CACZ,EACA7B,MAAiBC,GAAA,CAChB0D,EAAcC,KAAK,SAAS,EAC5BD,EAAcE,KAAK,CACjBrH,MAAKgB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAwB,EAC/BoG,QAAS7D,EAAM6D,QACfE,MAAO,MACPtG,GAAI,SAAA,CACL,CAAA,CACF,EACAuG,QAAQ,IAAM,CACbtC,EAAc2B,cAAc,CAAA,CAC7B,CAAA,EAEL,CAAC3B,CAAa,CAChB,EAEA,OAAIA,EAAcuC,QAEdhH,MAACiH,GAAM,MAAM,MAAM,KAAOjH,EAAA,IAAAkH,EAAA,CAAqB,CAAA,EAAK,MAAM5G,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAO,EAChE,SAACR,EAAAA,IAAAE,EAAA,CAAKI,SAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,GAA0B,CACnC,CAAA,EAICiE,GAAAA,MAAAA,EAAeI,OAMfU,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAAiB4B,EAAAA,MAClBtH,EAAAA,KAACE,EAAM,CAAA,IAAI,KACP2E,SAAAA,EAAAA,EAAAA,GAAQO,IAARP,YAAAA,EAAkBQ,IAAI,CAAChC,EAAKkE,IAAM,OAC5B1G,MAAAA,GAAU+D,EAAAA,GAAAA,YAAAA,EAAeK,WAAfL,YAAAA,EAAyBvD,KACtCiE,GAAWA,EAAEjC,MAAQA,GAGpBuB,OAAAA,GAAAA,MAAAA,EAAeK,UAAY,CAACpE,GACtBqC,QAAAA,MAAM,WAAWG,CAAG,YAAY,EAIxClD,MAACqH,EAAM,SAAN,CACE3G,SAAAA,EACCV,EAAA,IAAC0D,GACC,CAAA,QAAShD,EACT,OAAQ0G,EAAI,IAAM,EAClB,OAAQf,EACR,SAAUE,CAAAA,CAAc,EAGzB1G,EAAAA,KAAAK,EAAA,CAAK,KAAK,KAAK,MAAO,CAAEoH,UAAW,QAAA,EAAY,EAAE,MAAK,SAAA,CAAA,WAC5CpE,EAAI,YAAA,CACf,CAAA,GAXiBA,CAarB,CAAA,KAGFwB,EAAAA,GAAQO,IAARP,YAAAA,EAAkB1D,UAAW,GAC7BhB,MAACE,GAAK,MAAO,CAAEoH,UAAW,QAAA,EACxB,eAAAC,EAAA,CAAA/G,GAAA,SAAoC,CACtC,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAvCOR,EAAA,IAACwH,EAAS,CAAA,QAAO,EAAG,CAAA,CAyC/B,CAEO,SAASC,GAAgB,CAAE/C,KAAAA,CAAmC,EAAG,CACtE,MAAMgD,EAAeC,EAAqB,EAE1C,OAAQ3H,EAAAA,IAAAwE,EAAA,CAAY,cAAekD,EAAc,KAAAhD,CAAc,CAAA,CACjE,CAEO,SAASkD,GAAkB,CAAElD,KAAAA,CAAmC,EAAG,CACxE,MAAMmD,EAAiBC,EAAuB,EAE9C,OAAQ9H,EAAAA,IAAAwE,EAAA,CAAY,cAAeqD,EAAgB,KAAAnD,CAAc,CAAA,CACnE,CAEO,SAASqD,GAAkB,CAChCC,UAAAA,EACApD,SAAAA,CAID,EAAG,CACIqD,MAAAA,EAAsBC,SAC1BC,EAA0B,CACxBC,OAAQJ,EACR1F,SAAU+F,EAAaC,mBACxB,CAAA,CACH,EAAEC,QACIC,EAAiBC,EAASR,CAAmB,EAEnD,OAAQjI,EAAAA,IAAAwE,EAAA,CAAY,cAAegE,EAAgB,SAAA5D,CAAsB,CAAA,CAC3E,CAEO,SAAS8D,GAAsB,CACpCV,UAAAA,EACApD,SAAAA,CAID,EAAG,CACI+D,MAAAA,EAA0BT,SAC9BC,EAA0B,CACxBC,OAAQJ,EACR1F,SAAU+F,EAAaO,wBACxB,CAAA,CACH,EAAEL,QACIM,EAAqBJ,EAASE,CAAuB,EAE3D,OAAQ3I,EAAAA,IAAAwE,EAAA,CAAY,cAAeqE,EAAoB,SAAAjE,CAAsB,CAAA,CAC/E,CAEO,SAASkE,GAAmB,CACjCC,UAAAA,EACAC,WAAAA,EACArE,SAAAA,CAKD,EAAG,CACIsE,MAAAA,EAAuBf,SAC3BgB,EAA2B,CACzBC,QAASJ,EACTC,WAAAA,CACD,CAAA,CACH,EAAET,QACIa,EAAkBX,EAASQ,CAAoB,EAErD,OAAQjJ,EAAAA,IAAAwE,EAAA,CAAY,cAAe4E,EAAiB,SAAAzE,CAAsB,CAAA,CAC5E"}
