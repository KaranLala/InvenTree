{"version":3,"file":"BuildDetail-WKzPc85i.js","sources":["../../../../../../frontend/src/tables/build/BuildOrderTestTable.tsx","../../../../../../frontend/src/tables/build/BuildOutputTable.tsx","../../../../../../frontend/src/pages/build/BuildDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { ActionIcon, Badge, Group, Text, Tooltip } from '@mantine/core';\nimport { IconCirclePlus } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\n\nimport { PassFailButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { cancelEvent } from '@lib/functions/Events';\nimport { AddItemButton } from '@lib/index';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type { UseFormReturn } from 'react-hook-form';\nimport { RenderUser } from '../../components/render/User';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate } from '../../defaults/formatters';\nimport { useTestResultFields } from '../../forms/StockForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { LocationColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * A table which displays all \"test results\" for the outputs generated by a build order.\n */\nexport default function BuildOrderTestTable({\n  buildId,\n  partId\n}: Readonly<{\n  buildId: number;\n  partId: number;\n}>) {\n  const table = useTable('build-tests');\n  const api = useApi();\n\n  // Fetch the test templates required for this build order\n  const { data: testTemplates } = useQuery({\n    queryKey: ['build-test-templates', partId, buildId],\n    queryFn: async () => {\n      if (!partId) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.part_test_template_list), {\n          params: {\n            part: partId,\n            include_inherited: true,\n            enabled: true,\n            required: true\n          }\n        })\n        .then((res) => res.data);\n    }\n  });\n\n  // Reload the table data whenever the set of templates changes\n  useEffect(() => {\n    table.refreshTable();\n  }, [testTemplates]);\n\n  const [selectedOutput, setSelectedOutput] = useState<number>(0);\n  const [selectedTemplate, setSelectedTemplate] = useState<number | undefined>(\n    undefined\n  );\n\n  const testResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: selectedOutput,\n    templateId: selectedTemplate\n  });\n\n  const createTestResult = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_test_result_list),\n    title: t`Add Test Result`,\n    fields: testResultFields,\n    initialData: {\n      template: selectedTemplate,\n      result: true\n    },\n    onFormSuccess: () => table.refreshTable(),\n    successMessage: t`Test result added`\n  });\n\n  const multipleTestResultFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = { ...testResultFields };\n\n    // Do not allow attachment for multiple test results\n    delete fields.attachment;\n    delete fields.stock_item;\n\n    fields.template.disabled = false;\n\n    return fields;\n  }, [partId, testResultFields]);\n\n  const generateTestResults = useCallback(\n    (data: any, form: UseFormReturn) => {\n      // Generate a list of test results for each selected output\n      const results = table.selectedRecords.map((record: any) => {\n        return {\n          ...data,\n          stock_item: record.pk\n        };\n      });\n\n      return results;\n    },\n    [table.selectedIds]\n  );\n\n  const createTestResultMultiple = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_test_result_list),\n    title: t`Add Test Results`,\n    fields: multipleTestResultFields,\n    initialData: {\n      result: true\n    },\n    onFormSuccess: () => {\n      table.clearSelectedRecords();\n      table.refreshTable();\n    },\n    processFormData: generateTestResults,\n    successMessage: t`Test results added`\n  });\n\n  // Generate a table column for each test template\n  const testColumns: TableColumn[] = useMemo(() => {\n    if (!testTemplates || testTemplates.length == 0) {\n      return [];\n    }\n\n    return testTemplates.map((template: any) => {\n      return {\n        accessor: `test_${template.pk}`,\n        title: template.test_name,\n        sortable: false,\n        switchable: true,\n        render: (record: any) => {\n          const tests = record.tests || [];\n\n          // Find the most recent test result (highest primary key)\n          const test = tests\n            .filter((test: any) => test.template == template.pk)\n            .sort((a: any, b: any) => b.pk - a.pk)\n            .shift();\n\n          // No test result recorded\n          if (!test || test.result === undefined) {\n            return (\n              <Group gap='xs' wrap='nowrap' justify='space-between'>\n                <Badge color='lightblue' variant='filled'>{t`No Result`}</Badge>\n                <Tooltip label={t`Add Test Result`}>\n                  <ActionIcon\n                    size='lg'\n                    color='green'\n                    aria-label='add-test-result'\n                    variant='transparent'\n                    onClick={(event: any) => {\n                      cancelEvent(event);\n                      setSelectedOutput(record.pk);\n                      setSelectedTemplate(template.pk);\n                      createTestResult.open();\n                    }}\n                  >\n                    <IconCirclePlus />\n                  </ActionIcon>\n                </Tooltip>\n              </Group>\n            );\n          }\n\n          const extra: ReactNode[] = [];\n\n          if (test.value) {\n            extra.push(\n              <Text key='value' size='sm'>\n                {t`Value`}: {test.value}\n              </Text>\n            );\n          }\n\n          if (test.notes) {\n            extra.push(\n              <Text key='notes' size='sm'>\n                {t`Notes`}: {test.notes}\n              </Text>\n            );\n          }\n\n          if (test.date) {\n            extra.push(\n              <Text key='date' size='sm'>\n                {t`Date`}: {formatDate(test.date)}\n              </Text>\n            );\n          }\n\n          if (test.user_detail) {\n            extra.push(<RenderUser key='user' instance={test.user_detail} />);\n          }\n\n          return (\n            <TableHoverCard\n              value={<PassFailButton value={test.result} />}\n              title={template.test_name}\n              extra={extra}\n            />\n          );\n        }\n      };\n    });\n  }, [testTemplates]);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    // Fixed columns\n    const columns: TableColumn[] = [\n      {\n        accessor: 'stock',\n        title: t`Build Output`,\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          if (record.serial) {\n            return `# ${record.serial}`;\n          } else {\n            const extra: ReactNode[] = [];\n\n            if (record.batch) {\n              extra.push(\n                <Text key='batch' size='sm'>\n                  {t`Batch Code`}: {record.batch}\n                </Text>\n              );\n            }\n\n            return (\n              <TableHoverCard\n                value={\n                  <Text>\n                    {t`Quantity`}: {record.quantity}\n                  </Text>\n                }\n                title={t`Build Output`}\n                extra={extra}\n              />\n            );\n          }\n        }\n      },\n      LocationColumn({\n        accessor: 'location_detail'\n      })\n    ];\n\n    return [...columns, ...testColumns];\n  }, [testColumns]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'is_building',\n        label: t`In Production`,\n        description: t`Show build outputs currently in production`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-test-result'\n        tooltip={t`Add Test Result`}\n        disabled={!table.hasSelectedRecords}\n        onClick={(event: any) => {\n          createTestResultMultiple.open();\n        }}\n      />\n    ];\n  }, [table.hasSelectedRecords]);\n\n  const rowActions = useCallback((record: any) => {\n    return [\n      {\n        icon: <IconCirclePlus />,\n        color: 'green',\n        title: t`Add Test Result`,\n        onClick: (event: any) => {\n          setSelectedOutput(record.pk);\n          setSelectedTemplate(undefined);\n          createTestResult.open();\n        }\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      {createTestResult.modal}\n      {createTestResultMultiple.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_item_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            part_detail: true,\n            location_detail: true,\n            tests: true,\n            build: buildId\n          },\n          enableSelection: true,\n          rowActions: rowActions,\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.stockitem\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Alert,\n  Divider,\n  Drawer,\n  Group,\n  Paper,\n  Space,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport {\n  IconBuildingFactory2,\n  IconCircleCheck,\n  IconCircleX,\n  IconExclamationCircle\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { StylishText } from '../../components/items/StylishText';\nimport { useApi } from '../../contexts/ApiContext';\nimport {\n  useBuildOrderOutputFields,\n  useCancelBuildOutputsForm,\n  useCompleteBuildOutputsForm,\n  useScrapBuildOutputsForm\n} from '../../forms/BuildForms';\nimport {\n  type StockOperationProps,\n  useStockFields,\n  useStockItemSerializeFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { LocationColumn, PartColumn, StatusColumn } from '../ColumnRenderers';\nimport {\n  BatchFilter,\n  HasBatchCodeFilter,\n  IsSerializedFilter,\n  SerialFilter,\n  SerialGTEFilter,\n  SerialLTEFilter,\n  StatusFilterOptions,\n  StockLocationFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\nimport BuildLineTable from './BuildLineTable';\n\ntype TestResultOverview = {\n  name: string;\n  result: boolean;\n};\n\n/**\n * Detail drawer view for allocating stock against a specific build output\n */\nfunction OutputAllocationDrawer({\n  build,\n  output,\n  opened,\n  close\n}: Readonly<{\n  build: any;\n  output: any;\n  opened: boolean;\n  close: () => void;\n}>) {\n  return (\n    <Drawer\n      position='bottom'\n      size='lg'\n      title={\n        <Group p='md' wrap='nowrap' justify='space-apart'>\n          <StylishText size='lg'>{t`Build Output Stock Allocation`}</StylishText>\n          <Space h='lg' />\n          <PartColumn part={build.part_detail} />\n          {output?.serial && (\n            <Text size='sm'>\n              {t`Serial Number`}: {output.serial}\n            </Text>\n          )}\n          {output?.batch && (\n            <Text size='sm'>\n              {t`Batch Code`}: {output.batch}\n            </Text>\n          )}\n          <Space h='lg' />\n        </Group>\n      }\n      opened={opened}\n      onClose={close}\n      withCloseButton\n      closeOnEscape\n      closeOnClickOutside\n      styles={{\n        header: {\n          width: '100%'\n        },\n        title: {\n          width: '100%'\n        }\n      }}\n    >\n      <Divider />\n      <Paper p='md'>\n        <BuildLineTable\n          build={build}\n          output={output}\n          params={{\n            tracked: true\n          }}\n        />\n      </Paper>\n    </Drawer>\n  );\n}\n\nexport default function BuildOutputTable({\n  build,\n  refreshBuild\n}: Readonly<{ build: any; refreshBuild: () => void }>) {\n  const api = useApi();\n  const user = useUserState();\n  const navigate = useNavigate();\n  const table = useTable('build-outputs');\n\n  const buildId: number = useMemo(() => {\n    return build.pk ?? -1;\n  }, [build.pk]);\n\n  const partId: number = useMemo(() => {\n    return build.part ?? -1;\n  }, [build.part]);\n\n  const buildStatus = useStatusCodes({ modelType: ModelType.build });\n\n  // Fetch the test templates associated with the partId\n  const { data: testTemplates, refetch: refetchTestTemplates } = useQuery({\n    queryKey: ['buildoutputtests', partId, build],\n    queryFn: async () => {\n      if (!partId || partId < 0) {\n        return [];\n      }\n\n      // If the part is not testable, return an empty array\n      if (!build?.part_detail?.testable) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.part_test_template_list), {\n          params: {\n            part: partId,\n            include_inherited: true,\n            enabled: true,\n            required: true\n          }\n        })\n        .then((response) => response.data);\n    }\n  });\n\n  const hasRequiredTests: boolean = useMemo(() => {\n    return (testTemplates?.length ?? 0) > 0;\n  }, [partId, testTemplates]);\n\n  // Fetch the \"tracked\" BOM items associated with the partId\n  const { data: trackedItems, refetch: refetchTrackedItems } = useQuery({\n    queryKey: ['trackeditems', buildId],\n    queryFn: async () => {\n      if (!buildId || buildId < 0) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.build_line_list), {\n          params: {\n            build: buildId,\n            tracked: true\n          }\n        })\n        .then((response) => response.data);\n    }\n  });\n\n  const hasTrackedItems: boolean = useMemo(() => {\n    return (trackedItems?.length ?? 0) > 0;\n  }, [trackedItems]);\n\n  // Ensure base table data is updated correctly\n  useEffect(() => {\n    table.refreshTable();\n  }, [testTemplates, trackedItems, hasTrackedItems, hasRequiredTests]);\n\n  // Format table records\n  const formatRecords = useCallback(\n    (records: any[]): any[] => {\n      records?.forEach((record: any, index: number) => {\n        // Test result information, per record\n        const results: TestResultOverview[] = [];\n        let passCount = 0;\n\n        // Iterate through each\n        testTemplates?.forEach((template: any) => {\n          // Find the \"newest\" result for this template in the returned data\n          const result = record.tests\n            ?.filter((test: any) => test.template == template.pk)\n            .sort((a: any, b: any) => {\n              return a.pk < b.pk ? 1 : -1;\n            })\n            .shift();\n\n          if (template?.required && result?.result) {\n            passCount += 1;\n          }\n\n          results.push({\n            name: template.test_name,\n            result: result?.result ?? false\n          });\n        });\n\n        records[index].passCount = passCount;\n        records[index].results = results;\n\n        // Stock allocation information, per record\n        let fullyAllocatedCount = 0;\n\n        // Iterate through each tracked item\n        trackedItems?.forEach((item: any) => {\n          let allocated = 0;\n\n          // Find all allocations which match the build output\n          item.allocations\n            ?.filter((allocation: any) => allocation.install_into == record.pk)\n            ?.forEach((allocation: any) => {\n              allocated += allocation.quantity;\n            });\n\n          if (allocated >= item.bom_item_detail.quantity) {\n            fullyAllocatedCount += 1;\n          }\n        });\n\n        records[index].fullyAllocated = fullyAllocatedCount;\n      });\n\n      return records;\n    },\n    [partId, buildId, testTemplates, trackedItems]\n  );\n\n  const buildOutputFields = useBuildOrderOutputFields({\n    build: build,\n    modalId: 'add-build-output'\n  });\n\n  const addBuildOutput = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_create, buildId),\n    title: t`Add Build Output`,\n    modalId: 'add-build-output',\n    fields: buildOutputFields,\n    successMessage: t`Build output created`,\n    timeout: 10000,\n    initialData: {\n      batch_code: build.batch,\n      location: build.destination ?? build.part_detail?.default_location\n    },\n    onFormSuccess: () => {\n      // Refresh all associated table data\n      refetchTrackedItems();\n      refetchTestTemplates();\n      table.refreshTable(true);\n    }\n  });\n\n  const [selectedOutputs, setSelectedOutputs] = useState<any[]>([]);\n\n  const completeBuildOutputsForm = useCompleteBuildOutputsForm({\n    build: build,\n    outputs: selectedOutputs,\n    onFormSuccess: () => {\n      table.refreshTable(true);\n      refreshBuild();\n    }\n  });\n\n  const scrapBuildOutputsForm = useScrapBuildOutputsForm({\n    build: build,\n    outputs: selectedOutputs,\n    onFormSuccess: () => {\n      table.refreshTable(true);\n      refreshBuild();\n    }\n  });\n\n  const cancelBuildOutputsForm = useCancelBuildOutputsForm({\n    build: build,\n    outputs: selectedOutputs,\n    onFormSuccess: () => {\n      table.refreshTable(true);\n      refreshBuild();\n    }\n  });\n\n  const editStockItemFields = useStockFields({\n    create: false,\n    partId: partId,\n    stockItem: selectedOutputs[0],\n    modalId: 'edit-build-output'\n  });\n\n  const editBuildOutput = useEditApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    pk: selectedOutputs[0]?.pk,\n    title: t`Edit Build Output`,\n    modalId: 'edit-build-output',\n    fields: editStockItemFields,\n    table: table\n  });\n\n  const deallocateBuildOutput = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_deallocate,\n    pk: build.pk,\n    title: t`Deallocate Stock`,\n    preFormContent: (\n      <Alert\n        color='yellow'\n        icon={<IconExclamationCircle />}\n        title={t`Deallocate Stock`}\n      >\n        {t`This action will deallocate all stock from the selected build output`}\n      </Alert>\n    ),\n    fields: {\n      output: {\n        hidden: true\n      }\n    },\n    initialData: {\n      output: selectedOutputs[0]?.pk\n    },\n    onFormSuccess: () => {\n      refetchTrackedItems();\n    }\n  });\n\n  const serializeStockFields = useStockItemSerializeFields({\n    partId: selectedOutputs[0]?.part,\n    trackable: selectedOutputs[0]?.part_detail?.trackable,\n    modalId: 'build-output-serialize'\n  });\n\n  const serializeOutput = useCreateApiFormModal({\n    url: ApiEndpoints.stock_serialize,\n    pk: selectedOutputs[0]?.pk,\n    title: t`Serialize Build Output`,\n    modalId: 'build-output-serialize',\n    fields: serializeStockFields,\n    initialData: {\n      quantity: selectedOutputs[0]?.quantity ?? 1,\n      destination: selectedOutputs[0]?.location ?? build.destination\n    },\n    onFormSuccess: () => {\n      table.refreshTable(true);\n      refreshBuild();\n    }\n  });\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'status',\n        label: t`Status`,\n        description: t`Filter by stock status`,\n        choiceFunction: StatusFilterOptions(ModelType.stockitem)\n      },\n      StockLocationFilter(),\n      HasBatchCodeFilter(),\n      BatchFilter(),\n      IsSerializedFilter(),\n      SerialFilter(),\n      SerialLTEFilter(),\n      SerialGTEFilter()\n    ];\n  }, []);\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      items: table.selectedRecords,\n      model: ModelType.stockitem,\n      refresh: table.refreshTable,\n      filters: {}\n    };\n  }, [table.selectedRecords, table.refreshTable]);\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    merge: false,\n    assign: false,\n    delete: false,\n    add: false,\n    count: false,\n    remove: false\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      stockAdjustActions.dropdown,\n      <ActionButton\n        key='complete-selected-outputs'\n        tooltip={t`Complete selected outputs`}\n        icon={<InvenTreeIcon icon='success' />}\n        color='green'\n        disabled={!table.hasSelectedRecords}\n        onClick={() => {\n          setSelectedOutputs(table.selectedRecords);\n          completeBuildOutputsForm.open();\n        }}\n      />,\n      <ActionButton\n        key='scrap-selected-outputs'\n        tooltip={t`Scrap selected outputs`}\n        icon={<InvenTreeIcon icon='delete' />}\n        color='red'\n        disabled={!table.hasSelectedRecords}\n        onClick={() => {\n          setSelectedOutputs(table.selectedRecords);\n          scrapBuildOutputsForm.open();\n        }}\n      />,\n      <ActionButton\n        key='cancel-selected-outputs'\n        tooltip={t`Cancel selected outputs`}\n        icon={<InvenTreeIcon icon='cancel' />}\n        color='red'\n        disabled={!table.hasSelectedRecords}\n        onClick={() => {\n          setSelectedOutputs(table.selectedRecords);\n          cancelBuildOutputsForm.open();\n        }}\n      />,\n      <AddItemButton\n        key='add-build-output'\n        tooltip={t`Add Build Output`}\n        hidden={build.external || !user.hasAddRole(UserRoles.build)}\n        onClick={addBuildOutput.open}\n      />\n    ];\n  }, [\n    build,\n    user,\n    table.selectedRecords,\n    table.hasSelectedRecords,\n    stockAdjustActions.dropdown\n  ]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const production = build?.status == buildStatus.PRODUCTION;\n\n      return [\n        RowViewAction({\n          title: t`View Build Output`,\n          modelId: record.pk,\n          modelType: ModelType.stockitem,\n          navigate: navigate\n        }),\n        {\n          title: t`Allocate`,\n          tooltip: t`Allocate stock to build output`,\n          color: 'blue',\n          hidden:\n            !production ||\n            !hasTrackedItems ||\n            !user.hasChangeRole(UserRoles.build),\n          icon: <InvenTreeIcon icon='plus' />,\n          onClick: () => {\n            setSelectedOutputs([record]);\n            openAllocationDrawer();\n          }\n        },\n        {\n          title: t`Deallocate`,\n          tooltip: t`Deallocate stock from build output`,\n          color: 'red',\n          hidden:\n            !production ||\n            !hasTrackedItems ||\n            !user.hasChangeRole(UserRoles.build),\n          icon: <InvenTreeIcon icon='minus' />,\n          onClick: () => {\n            setSelectedOutputs([record]);\n            deallocateBuildOutput.open();\n          }\n        },\n        {\n          title: t`Serialize`,\n          tooltip: t`Serialize build output`,\n          color: 'blue',\n          hidden: !record.part_detail?.trackable || !!record.serial,\n          icon: <InvenTreeIcon icon='serial' />,\n          onClick: () => {\n            setSelectedOutputs([record]);\n            serializeOutput.open();\n          }\n        },\n        {\n          title: t`Complete`,\n          tooltip: t`Complete build output`,\n          color: 'green',\n          icon: <InvenTreeIcon icon='success' />,\n          onClick: () => {\n            setSelectedOutputs([record]);\n            completeBuildOutputsForm.open();\n          }\n        },\n        RowEditAction({\n          tooltip: t`Edit Build Output`,\n          onClick: () => {\n            setSelectedOutputs([record]);\n            editBuildOutput.open();\n          }\n        }),\n        {\n          title: t`Scrap`,\n          tooltip: t`Scrap build output`,\n          icon: <InvenTreeIcon icon='delete' />,\n          color: 'red',\n          onClick: () => {\n            setSelectedOutputs([record]);\n            scrapBuildOutputsForm.open();\n          }\n        },\n        {\n          title: t`Cancel`,\n          tooltip: t`Cancel build output`,\n          icon: <InvenTreeIcon icon='cancel' />,\n          color: 'red',\n          onClick: () => {\n            setSelectedOutputs([record]);\n            cancelBuildOutputsForm.open();\n          }\n        }\n      ];\n    },\n    [buildStatus, user, partId, hasTrackedItems]\n  );\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'part',\n        sortable: true,\n        render: (record: any) => PartColumn({ part: record?.part_detail })\n      },\n      {\n        accessor: 'quantity',\n        ordering: 'stock',\n        sortable: true,\n        switchable: false,\n        title: t`Build Output`,\n        render: (record: any) => {\n          let text = record.quantity;\n\n          if (record.serial) {\n            text = `# ${record.serial}`;\n          }\n\n          return text;\n        }\n      },\n      {\n        accessor: 'batch',\n        sortable: true\n      },\n      StatusColumn({\n        accessor: 'status',\n        sortable: true,\n        model: ModelType.stockitem\n      }),\n      LocationColumn({\n        accessor: 'location_detail'\n      }),\n      {\n        accessor: 'allocations',\n        sortable: false,\n        switchable: false,\n        hidden: !hasTrackedItems,\n        title: t`Allocated Lines`,\n        render: (record: any) => {\n          return (\n            <ProgressBar\n              progressLabel\n              value={record.fullyAllocated ?? 0}\n              maximum={trackedItems?.length ?? 0}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'tests',\n        sortable: false,\n        switchable: false,\n        title: t`Required Tests`,\n        hidden: !hasRequiredTests,\n        render: (record: any) => {\n          const extra =\n            record.results?.map((result: TestResultOverview) => {\n              return (\n                result && (\n                  <Group justify='left' key={result.name} wrap='nowrap'>\n                    {result.result ? (\n                      <IconCircleCheck color='green' />\n                    ) : (\n                      <IconCircleX color='red' />\n                    )}\n                    <Text>{result.name}</Text>\n                  </Group>\n                )\n              );\n            }) ?? [];\n\n          return (\n            <TableHoverCard\n              value={\n                <ProgressBar\n                  progressLabel\n                  value={record.passCount ?? 0}\n                  maximum={testTemplates?.length ?? 0}\n                />\n              }\n              extra={extra}\n              title={t`Test Results`}\n            />\n          );\n        }\n      }\n    ];\n  }, [\n    buildId,\n    partId,\n    hasRequiredTests,\n    hasTrackedItems,\n    testTemplates,\n    trackedItems\n  ]);\n\n  const [\n    allocationDrawerOpen,\n    { open: openAllocationDrawer, close: closeAllocationDrawer }\n  ] = useDisclosure(false);\n\n  const closeDrawer = useCallback(() => {\n    closeAllocationDrawer();\n    refetchTrackedItems();\n  }, [closeAllocationDrawer, refetchTrackedItems]);\n\n  return (\n    <>\n      {addBuildOutput.modal}\n      {completeBuildOutputsForm.modal}\n      {scrapBuildOutputsForm.modal}\n      {editBuildOutput.modal}\n      {deallocateBuildOutput.modal}\n      {cancelBuildOutputsForm.modal}\n      {serializeOutput.modal}\n      {stockAdjustActions.modals.map((modal) => modal.modal)}\n      <OutputAllocationDrawer\n        build={build}\n        output={selectedOutputs[0]}\n        opened={allocationDrawerOpen}\n        close={closeDrawer}\n      />\n      <Stack gap='xs'>\n        {build.external && (\n          <Alert\n            color='blue'\n            icon={<IconBuildingFactory2 />}\n            title={t`External Build`}\n          >\n            {t`This build order is fulfilled by an external purchase order`}\n          </Alert>\n        )}\n        <InvenTreeTable\n          tableState={table}\n          url={apiUrl(ApiEndpoints.stock_item_list)}\n          columns={tableColumns}\n          props={{\n            params: {\n              part_detail: true,\n              location_detail: true,\n              tests: true,\n              is_building: true,\n              build: buildId\n            },\n            enableLabels: true,\n            enableReports: true,\n            modelType: ModelType.stockitem,\n            dataFormatter: formatRecords,\n            tableFilters: tableFilters,\n            tableActions: tableActions,\n            rowActions: rowActions,\n            enableSelection: true,\n            onRowClick: (record: any) => {\n              if (hasTrackedItems && !!record.serial) {\n                setSelectedOutputs([record]);\n                openAllocationDrawer();\n              }\n            }\n          }}\n        />\n      </Stack>\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Alert, Grid, Skeleton, Stack, Text } from '@mantine/core';\nimport {\n  IconChecklist,\n  IconCircleCheck,\n  IconClipboardCheck,\n  IconClipboardList,\n  IconInfoCircle,\n  IconList,\n  IconListCheck,\n  IconListNumbers,\n  IconShoppingCart,\n  IconSitemap\n} from '@tabler/icons-react';\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport PrimaryActionButton from '../../components/buttons/PrimaryActionButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport DetailsBadge from '../../components/details/DetailsBadge';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  BarcodeActionDropdown,\n  CancelItemAction,\n  DuplicateItemAction,\n  EditItemAction,\n  HoldItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport { useBuildOrderFields } from '../../forms/BuildForms';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport BuildAllocatedStockTable from '../../tables/build/BuildAllocatedStockTable';\nimport BuildLineTable from '../../tables/build/BuildLineTable';\nimport { BuildOrderTable } from '../../tables/build/BuildOrderTable';\nimport BuildOrderTestTable from '../../tables/build/BuildOrderTestTable';\nimport BuildOutputTable from '../../tables/build/BuildOutputTable';\nimport { PurchaseOrderTable } from '../../tables/purchasing/PurchaseOrderTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\n\nfunction NoItems() {\n  return (\n    <Alert color='blue' icon={<IconInfoCircle />} title={t`No Required Items`}>\n      <Stack gap='xs'>\n        <Text>{t`This build order does not have any required items.`}</Text>\n        <Text>{t`The assembled part may not have a Bill of Materials (BOM) defined, or the BOM is empty.`}</Text>\n      </Stack>\n    </Alert>\n  );\n}\n\n/**\n * Panel to display the lines of a build order\n */\nfunction BuildLinesPanel({\n  build,\n  isLoading,\n  hasItems\n}: Readonly<{\n  build: any;\n  isLoading: boolean;\n  hasItems: boolean;\n}>) {\n  if (isLoading || !build.pk) {\n    return <Skeleton w={'100%'} h={400} animate />;\n  }\n\n  if (!hasItems) {\n    return <NoItems />;\n  }\n\n  return <BuildLineTable build={build} />;\n}\n\nfunction BuildAllocationsPanel({\n  build,\n  isLoading,\n  hasItems\n}: Readonly<{\n  build: any;\n  isLoading: boolean;\n  hasItems: boolean;\n}>) {\n  if (isLoading || !build.pk) {\n    return <Skeleton w={'100%'} h={400} animate />;\n  }\n\n  if (!hasItems) {\n    return <NoItems />;\n  }\n\n  return <BuildAllocatedStockTable buildId={build.pk} showPartInfo allowEdit />;\n}\n\n/**\n * Detail page for a single Build Order\n */\nexport default function BuildDetail() {\n  const { id } = useParams();\n\n  const user = useUserState();\n  const globalSettings = useGlobalSettingsState();\n\n  // Fetch the number of BOM items associated with the build order\n  const { instance: buildLineData, instanceQuery: buildLineQuery } =\n    useInstance({\n      endpoint: ApiEndpoints.build_line_list,\n      params: {\n        build: id,\n        allocations: false,\n        part_detail: false,\n        build_detail: false,\n        bom_item_detail: false,\n        limit: 1\n      },\n      disabled: !id,\n      hasPrimaryKey: false,\n      defaultValue: {}\n    });\n\n  const buildStatus = useStatusCodes({ modelType: ModelType.build });\n\n  const {\n    instance: build,\n    refreshInstance,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.build_order_list,\n    pk: id,\n    params: {\n      part_detail: true\n    },\n    refetchOnMount: true\n  });\n\n  const { instance: partRequirements, instanceQuery: partRequirementsQuery } =\n    useInstance({\n      endpoint: ApiEndpoints.part_requirements,\n      pk: build?.part,\n      hasPrimaryKey: true,\n      defaultValue: {}\n    });\n\n  const detailsPanel = useMemo(() => {\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const data = {\n      ...build,\n      can_build: partRequirements?.can_build ?? 0\n    };\n\n    const tl: DetailsField[] = [\n      {\n        type: 'link',\n        name: 'part',\n        label: t`Part`,\n        model: ModelType.part\n      },\n      {\n        type: 'text',\n        name: 'part_detail.IPN',\n        icon: 'part',\n        label: t`IPN`,\n        hidden: !build.part_detail?.IPN,\n        copy: true\n      },\n      {\n        type: 'string',\n        name: 'part_detail.revision',\n        icon: 'revision',\n        label: t`Revision`,\n        hidden: !build.part_detail?.revision,\n        copy: true\n      },\n      {\n        type: 'status',\n        name: 'status',\n        label: t`Status`,\n        model: ModelType.build\n      },\n      {\n        type: 'status',\n        name: 'status_custom_key',\n        label: t`Custom Status`,\n        model: ModelType.build,\n        icon: 'status',\n        hidden:\n          !build.status_custom_key || build.status_custom_key == build.status\n      },\n      {\n        type: 'boolean',\n        name: 'external',\n        label: t`External`,\n        icon: 'manufacturers',\n        hidden: !build.external\n      },\n      {\n        type: 'text',\n        name: 'purchase_order',\n        label: t`Purchase Order`,\n        icon: 'purchase_orders',\n        copy: true,\n        hidden: !build.external,\n        value_formatter: () => {\n          return 'TODO: external PO';\n        }\n      },\n      {\n        type: 'text',\n        name: 'reference',\n        label: t`Reference`,\n        copy: true\n      },\n      {\n        type: 'text',\n        name: 'title',\n        label: t`Description`,\n        icon: 'description',\n        copy: true\n      },\n      {\n        type: 'link',\n        name: 'parent',\n        icon: 'builds',\n        label: t`Parent Build`,\n        model_field: 'reference',\n        model: ModelType.build,\n        hidden: !build.parent\n      }\n    ];\n\n    const tr: DetailsField[] = [\n      {\n        type: 'number',\n        name: 'quantity',\n        label: t`Build Quantity`\n      },\n      {\n        type: 'number',\n        name: 'can_build',\n        unit: build.part_detail?.units,\n        label: t`Can Build`,\n        hidden: partRequirementsQuery.isFetching\n      },\n      {\n        type: 'progressbar',\n        name: 'completed',\n        icon: 'progress',\n        total: build.quantity,\n        progress: build.completed,\n        label: t`Completed Outputs`\n      },\n      {\n        type: 'link',\n        name: 'sales_order',\n        label: t`Sales Order`,\n        icon: 'sales_orders',\n        model: ModelType.salesorder,\n        model_field: 'reference',\n        hidden: !build.sales_order\n      }\n    ];\n\n    const bl: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'issued_by',\n        label: t`Issued By`,\n        icon: 'user',\n        badge: 'user',\n        hidden: !build.issued_by\n      },\n      {\n        type: 'text',\n        name: 'responsible',\n        label: t`Responsible`,\n        badge: 'owner',\n        hidden: !build.responsible\n      },\n      {\n        type: 'text',\n        name: 'project_code_label',\n        label: t`Project Code`,\n        icon: 'reference',\n        copy: true,\n        hidden: !build.project_code\n      },\n      {\n        type: 'link',\n        name: 'take_from',\n        icon: 'location',\n        model: ModelType.stocklocation,\n        label: t`Source Location`,\n        backup_value: t`Any location`\n      },\n      {\n        type: 'link',\n        name: 'destination',\n        icon: 'location',\n        model: ModelType.stocklocation,\n        label: t`Destination Location`,\n        hidden: !build.destination\n      },\n      {\n        type: 'text',\n        name: 'batch',\n        label: t`Batch Code`,\n        hidden: !build.batch,\n        copy: true\n      }\n    ];\n\n    const br: DetailsField[] = [\n      {\n        type: 'date',\n        name: 'creation_date',\n        label: t`Created`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !build.creation_date\n      },\n      {\n        type: 'date',\n        name: 'start_date',\n        label: t`Start Date`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !build.start_date\n      },\n      {\n        type: 'date',\n        name: 'target_date',\n        label: t`Target Date`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !build.target_date\n      },\n      {\n        type: 'date',\n        name: 'completion_date',\n        label: t`Completed`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !build.completion_date\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.part}\n            apiPath={ApiEndpoints.part_list}\n            src={build.part_detail?.image ?? build.part_detail?.thumbnail}\n            pk={build.part}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable fields={tl} item={data} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable fields={tr} item={data} />\n        <DetailsTable fields={bl} item={data} />\n        <DetailsTable fields={br} item={data} />\n      </ItemDetailsGrid>\n    );\n  }, [\n    build,\n    instanceQuery,\n    partRequirements,\n    partRequirementsQuery.isFetching\n  ]);\n\n  const buildPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'details',\n        label: t`Build Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'line-items',\n        label: t`Required Parts`,\n        icon: <IconListNumbers />,\n        content: (\n          <BuildLinesPanel\n            build={build}\n            isLoading={buildLineQuery.isFetching || buildLineQuery.isLoading}\n            hasItems={buildLineData?.count > 0}\n          />\n        )\n      },\n      {\n        name: 'allocated-stock',\n        label: t`Allocated Stock`,\n        icon: <IconList />,\n        hidden:\n          build.status == buildStatus.COMPLETE ||\n          build.status == buildStatus.CANCELLED ||\n          (buildLineData?.count ?? 0) <= 0, // Hide if no required parts\n        content: (\n          <BuildAllocationsPanel\n            build={build}\n            isLoading={buildLineQuery.isFetching || buildLineQuery.isLoading}\n            hasItems={buildLineData?.count > 0}\n          />\n        )\n      },\n      {\n        name: 'consumed-stock',\n        label: t`Consumed Stock`,\n        icon: <IconListCheck />,\n        hidden: (buildLineData?.count ?? 0) <= 0, // Hide if no required parts\n        content: (\n          <StockItemTable\n            allowAdd={false}\n            tableName='build-consumed'\n            showLocation={false}\n            allowReturn\n            params={{\n              consumed_by: id\n            }}\n          />\n        )\n      },\n      {\n        name: 'incomplete-outputs',\n        label: t`Incomplete Outputs`,\n        icon: <IconClipboardList />,\n        content: build.pk ? (\n          <BuildOutputTable build={build} refreshBuild={refreshInstance} />\n        ) : (\n          <Skeleton />\n        ),\n        hidden:\n          build.status == buildStatus.COMPLETE ||\n          build.status == buildStatus.CANCELLED\n      },\n      {\n        name: 'complete-outputs',\n        label: t`Completed Outputs`,\n        icon: <IconClipboardCheck />,\n        content: (\n          <StockItemTable\n            allowAdd={false}\n            tableName='completed-build-outputs'\n            params={{\n              build: id,\n              is_building: false\n            }}\n          />\n        )\n      },\n      {\n        name: 'external-purchase-orders',\n        label: t`External Orders`,\n        icon: <IconShoppingCart />,\n        content: build.pk ? (\n          <PurchaseOrderTable externalBuildId={build.pk} />\n        ) : (\n          <Skeleton />\n        ),\n        hidden:\n          !user.hasViewRole(UserRoles.purchase_order) ||\n          !build.external ||\n          !globalSettings.isSet('BUILDORDER_EXTERNAL_BUILDS')\n      },\n      {\n        name: 'child-orders',\n        label: t`Child Build Orders`,\n        icon: <IconSitemap />,\n        content: build.pk ? (\n          <BuildOrderTable parentBuildId={build.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'test-results',\n        label: t`Test Results`,\n        icon: <IconChecklist />,\n        hidden: !build.part_detail?.testable,\n        content: build.pk ? (\n          <BuildOrderTestTable buildId={build.pk} partId={build.part} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      AttachmentPanel({\n        model_type: ModelType.build,\n        model_id: build.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.build,\n        model_id: build.pk\n      })\n    ];\n  }, [\n    build,\n    id,\n    user,\n    buildStatus,\n    globalSettings,\n    buildLineQuery.isFetching,\n    buildLineQuery.isLoading,\n    buildLineData\n  ]);\n\n  const editBuildOrderFields = useBuildOrderFields({\n    create: false,\n    modalId: 'edit-build-order'\n  });\n\n  const editBuild = useEditApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    pk: build.pk,\n    title: t`Edit Build Order`,\n    modalId: 'edit-build-order',\n    fields: editBuildOrderFields,\n    onFormSuccess: refreshInstance\n  });\n\n  const duplicateBuildOrderInitialData = useMemo(() => {\n    const data = { ...build };\n    // if we set the reference to null/undefined, it will be left blank in the form\n    // if we omit the reference altogether, it will be auto-generated via reference pattern\n    // from the OPTIONS response\n    delete data.reference;\n    return data;\n  }, [build]);\n\n  const duplicateBuildOrderFields = useBuildOrderFields({\n    create: false,\n    modalId: 'duplicate-build-order'\n  });\n\n  const duplicateBuild = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Add Build Order`,\n    modalId: 'duplicate-build-order',\n    fields: duplicateBuildOrderFields,\n    initialData: duplicateBuildOrderInitialData,\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const cancelOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_order_cancel, build.pk),\n    title: t`Cancel Build Order`,\n    onFormSuccess: refreshInstance,\n    successMessage: t`Order cancelled`,\n    preFormWarning: t`Cancel this order`,\n    fields: {\n      remove_allocated_stock: {},\n      remove_incomplete_outputs: {}\n    }\n  });\n\n  const holdOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_order_hold, build.pk),\n    title: t`Hold Build Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Place this order on hold`,\n    successMessage: t`Order placed on hold`\n  });\n\n  const issueOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_order_issue, build.pk),\n    title: t`Issue Build Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Issue this order`,\n    successMessage: t`Order issued`\n  });\n\n  const completeOrderFields: ApiFormFieldSet = useMemo(() => {\n    const hasBom = (buildLineData?.count ?? 0) > 0;\n\n    return {\n      accept_overallocated: {\n        hidden: !hasBom\n      },\n      accept_unallocated: {\n        hidden: !hasBom\n      },\n      accept_incomplete: {}\n    };\n  }, [buildLineData.count]);\n\n  const completeOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_order_complete, build.pk),\n    title: t`Complete Build Order`,\n    onFormSuccess: refreshInstance,\n    preFormContent: (\n      <Alert\n        color='green'\n        icon={<IconCircleCheck />}\n        title={t`Mark this order as complete`}\n      />\n    ),\n    successMessage: t`Order completed`,\n    fields: completeOrderFields\n  });\n\n  const buildActions = useMemo(() => {\n    const canEdit = user.hasChangeRole(UserRoles.build);\n\n    const canIssue =\n      canEdit &&\n      (build.status == buildStatus.PENDING ||\n        build.status == buildStatus.ON_HOLD);\n\n    const canComplete = canEdit && build.status == buildStatus.PRODUCTION;\n\n    const canHold =\n      canEdit &&\n      (build.status == buildStatus.PENDING ||\n        build.status == buildStatus.PRODUCTION);\n\n    const canCancel =\n      canEdit &&\n      (build.status == buildStatus.PENDING ||\n        build.status == buildStatus.ON_HOLD ||\n        build.status == buildStatus.PRODUCTION);\n\n    return [\n      <PrimaryActionButton\n        title={t`Issue Order`}\n        icon='issue'\n        hidden={!canIssue}\n        color='blue'\n        onClick={issueOrder.open}\n      />,\n      <PrimaryActionButton\n        title={t`Complete Order`}\n        icon='complete'\n        hidden={!canComplete}\n        color='green'\n        onClick={completeOrder.open}\n      />,\n      <AdminButton model={ModelType.build} id={build.pk} />,\n      <BarcodeActionDropdown\n        model={ModelType.build}\n        pk={build.pk}\n        hash={build?.barcode_hash}\n      />,\n      <PrintingActions\n        modelType={ModelType.build}\n        items={[build.pk]}\n        enableReports\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Build Order Actions`}\n        actions={[\n          EditItemAction({\n            onClick: () => editBuild.open(),\n            hidden: !canEdit,\n            tooltip: t`Edit order`\n          }),\n          DuplicateItemAction({\n            onClick: () => duplicateBuild.open(),\n            tooltip: t`Duplicate order`,\n            hidden: !user.hasAddRole(UserRoles.build)\n          }),\n          HoldItemAction({\n            tooltip: t`Hold order`,\n            hidden: !canHold,\n            onClick: holdOrder.open\n          }),\n          CancelItemAction({\n            tooltip: t`Cancel order`,\n            onClick: cancelOrder.open,\n            hidden: !canCancel\n          })\n        ]}\n      />\n    ];\n  }, [id, build, user, buildStatus]);\n\n  const buildBadges = useMemo(() => {\n    return instanceQuery.isFetching\n      ? []\n      : [\n          <StatusRenderer\n            status={build.status_custom_key}\n            type={ModelType.build}\n            options={{ size: 'lg' }}\n          />,\n          <DetailsBadge\n            label={t`External`}\n            color='blue'\n            key='external'\n            visible={build.external}\n          />\n        ];\n  }, [build, instanceQuery]);\n\n  return (\n    <>\n      {editBuild.modal}\n      {duplicateBuild.modal}\n      {cancelOrder.modal}\n      {holdOrder.modal}\n      {issueOrder.modal}\n      {completeOrder.modal}\n      <InstanceDetail query={instanceQuery} requiredRole={UserRoles.build}>\n        <Stack gap='xs'>\n          <PageDetail\n            title={`${t`Build Order`}: ${build.reference}`}\n            subtitle={`${build.quantity} x ${build.part_detail?.full_name}`}\n            badges={buildBadges}\n            editAction={editBuild.open}\n            editEnabled={user.hasChangePermission(ModelType.part)}\n            imageUrl={build.part_detail?.image ?? build.part_detail?.thumbnail}\n            breadcrumbs={[{ name: t`Manufacturing`, url: '/manufacturing' }]}\n            lastCrumb={[\n              {\n                name: build.reference,\n                url: getDetailUrl(ModelType.build, build.pk)\n              }\n            ]}\n            actions={buildActions}\n          />\n          <PanelGroup\n            pageKey='build'\n            panels={buildPanels}\n            instance={build}\n            reloadInstance={refreshInstance}\n            model={ModelType.build}\n            id={build.pk}\n          />\n        </Stack>\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["BuildOrderTestTable","buildId","partId","table","useTable","api","useApi","data","testTemplates","useQuery","queryKey","queryFn","get","apiUrl","ApiEndpoints","part_test_template_list","params","part","include_inherited","enabled","required","then","res","useEffect","refreshTable","selectedOutput","setSelectedOutput","useState","selectedTemplate","setSelectedTemplate","undefined","testResultFields","useTestResultFields","itemId","templateId","createTestResult","useCreateApiFormModal","url","stock_test_result_list","title","_i18n","_","id","fields","initialData","template","result","onFormSuccess","successMessage","multipleTestResultFields","useMemo","attachment","stock_item","disabled","generateTestResults","useCallback","form","selectedRecords","map","record","pk","selectedIds","createTestResultMultiple","clearSelectedRecords","processFormData","testColumns","length","accessor","test_name","sortable","switchable","render","test","tests","filter","sort","a","b","shift","Group","jsx","Badge","Tooltip","ActionIcon","event","cancelEvent","open","IconCirclePlus","extra","value","push","jsxs","Text","notes","date","formatDate","user_detail","RenderUser","TableHoverCard","PassFailButton","tableColumns","serial","batch","quantity","LocationColumn","tableFilters","name","label","description","tableActions","AddItemButton","hasSelectedRecords","rowActions","icon","color","onClick","modal","InvenTreeTable","stock_item_list","part_detail","location_detail","build","enableSelection","modelType","ModelType","stockitem","OutputAllocationDrawer","output","opened","close","Drawer","StylishText","Space","PartColumn","header","width","Divider","Paper","BuildLineTable","tracked","BuildOutputTable","refreshBuild","user","useUserState","navigate","useNavigate","buildStatus","useStatusCodes","refetch","refetchTestTemplates","testable","response","hasRequiredTests","trackedItems","refetchTrackedItems","build_line_list","hasTrackedItems","formatRecords","records","forEach","index","results","passCount","fullyAllocatedCount","item","allocated","allocations","allocation","install_into","bom_item_detail","fullyAllocated","buildOutputFields","useBuildOrderOutputFields","modalId","addBuildOutput","build_output_create","timeout","batch_code","location","destination","default_location","selectedOutputs","setSelectedOutputs","completeBuildOutputsForm","useCompleteBuildOutputsForm","outputs","scrapBuildOutputsForm","useScrapBuildOutputsForm","cancelBuildOutputsForm","useCancelBuildOutputsForm","editStockItemFields","useStockFields","create","stockItem","editBuildOutput","useEditApiFormModal","deallocateBuildOutput","build_order_deallocate","preFormContent","Alert","IconExclamationCircle","hidden","serializeStockFields","useStockItemSerializeFields","trackable","serializeOutput","stock_serialize","choiceFunction","StatusFilterOptions","StockLocationFilter","HasBatchCodeFilter","BatchFilter","IsSerializedFilter","SerialFilter","SerialLTEFilter","SerialGTEFilter","stockOperationProps","items","model","refresh","filters","stockAdjustActions","useStockAdjustActions","formProps","merge","assign","delete","add","count","remove","dropdown","ActionButton","InvenTreeIcon","external","hasAddRole","UserRoles","production","status","PRODUCTION","RowViewAction","modelId","tooltip","hasChangeRole","openAllocationDrawer","RowEditAction","ordering","text","StatusColumn","ProgressBar","IconCircleCheck","IconCircleX","allocationDrawerOpen","closeAllocationDrawer","useDisclosure","closeDrawer","modals","Stack","IconBuildingFactory2","is_building","enableLabels","enableReports","dataFormatter","onRowClick","NoItems","IconInfoCircle","BuildLinesPanel","isLoading","hasItems","Skeleton","BuildAllocationsPanel","BuildAllocatedStockTable","BuildDetail","useParams","globalSettings","useGlobalSettingsState","instance","buildLineData","instanceQuery","buildLineQuery","useInstance","endpoint","build_detail","limit","hasPrimaryKey","defaultValue","refreshInstance","build_order_list","refetchOnMount","partRequirements","partRequirementsQuery","part_requirements","detailsPanel","isFetching","can_build","tl","type","IPN","copy","revision","status_custom_key","value_formatter","model_field","parent","tr","unit","units","total","progress","completed","salesorder","sales_order","bl","badge","issued_by","responsible","project_code","stocklocation","backup_value","br","creation_date","start_date","target_date","completion_date","ItemDetailsGrid","Grid","DetailsImage","part_list","image","thumbnail","base","sm","DetailsTable","buildPanels","content","IconListNumbers","IconList","COMPLETE","CANCELLED","IconListCheck","StockItemTable","consumed_by","IconClipboardList","IconClipboardCheck","IconShoppingCart","PurchaseOrderTable","hasViewRole","purchase_order","isSet","IconSitemap","BuildOrderTable","IconChecklist","AttachmentPanel","model_type","model_id","NotesPanel","editBuildOrderFields","useBuildOrderFields","editBuild","duplicateBuildOrderInitialData","reference","duplicateBuildOrderFields","duplicateBuild","follow","cancelOrder","build_order_cancel","preFormWarning","remove_allocated_stock","remove_incomplete_outputs","holdOrder","build_order_hold","issueOrder","build_order_issue","completeOrderFields","hasBom","accept_overallocated","accept_unallocated","accept_incomplete","completeOrder","build_order_complete","buildActions","canEdit","canIssue","PENDING","ON_HOLD","canComplete","canHold","canCancel","PrimaryActionButton","AdminButton","BarcodeActionDropdown","barcode_hash","PrintingActions","OptionsActionDropdown","EditItemAction","DuplicateItemAction","HoldItemAction","CancelItemAction","buildBadges","StatusRenderer","size","DetailsBadge","InstanceDetail","PageDetail","full_name","hasChangePermission","getDetailUrl","PanelGroup"],"mappings":"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"}
