{"version":3,"file":"BuildOrderTable-p5FINNWK.js","sources":["../../../../../../frontend/src/forms/BuildForms.tsx","../../../../../../frontend/src/tables/build/BuildOrderTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Alert, Divider, List, Stack, Table } from '@mantine/core';\nimport {\n  IconCalendar,\n  IconInfoCircle,\n  IconLink,\n  IconList,\n  IconSitemap,\n  IconTruckDelivery,\n  IconUser,\n  IconUsersGroup\n} from '@tabler/icons-react';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport RemoveRowButton from '../components/buttons/RemoveRowButton';\nimport { StandaloneField } from '../components/forms/StandaloneField';\n\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { ApiFormFieldSet, ApiFormFieldType } from '@lib/types/Forms';\nimport {\n  TableFieldErrorWrapper,\n  type TableFieldRowProps\n} from '../components/forms/fields/TableField';\nimport { StatusRenderer } from '../components/render/StatusRenderer';\nimport { RenderStockItem } from '../components/render/Stock';\nimport { useCreateApiFormModal } from '../hooks/UseForm';\nimport {\n  useBatchCodeGenerator,\n  useSerialNumberGenerator\n} from '../hooks/UseGenerator';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\nimport { PartColumn } from '../tables/ColumnRenderers';\n\n/**\n * Field set for BuildOrder forms\n */\nexport function useBuildOrderFields({\n  create,\n  modalId\n}: {\n  create: boolean;\n  modalId: string;\n}): ApiFormFieldSet {\n  const [destination, setDestination] = useState<number | null | undefined>(\n    null\n  );\n\n  const [batchCode, setBatchCode] = useState<string>('');\n\n  const batchGenerator = useBatchCodeGenerator({\n    modalId: modalId,\n    onGenerate: (value: any) => {\n      setBatchCode((batch: any) => batch || value);\n    }\n  });\n\n  const globalSettings = useGlobalSettingsState();\n\n  return useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      reference: {},\n      part: {\n        disabled: !create,\n        filters: {\n          assembly: true,\n          virtual: false,\n          active: globalSettings.isSet('BUILDORDER_REQUIRE_ACTIVE_PART')\n            ? true\n            : undefined,\n          locked: globalSettings.isSet('BUILDORDER_REQUIRE_LOCKED_PART')\n            ? true\n            : undefined\n        },\n        onValueChange(value: any, record?: any) {\n          // Adjust the destination location for the build order\n          if (record) {\n            setDestination(\n              record.default_location || record.category_default_location\n            );\n          }\n\n          batchGenerator.update({\n            part: value\n          });\n        }\n      },\n      title: {},\n      quantity: {},\n      project_code: {\n        icon: <IconList />\n      },\n      priority: {},\n      parent: {\n        icon: <IconSitemap />,\n        filters: {\n          part_detail: true\n        }\n      },\n      sales_order: {\n        icon: <IconTruckDelivery />\n      },\n      batch: {\n        placeholder:\n          batchGenerator.result &&\n          `${t`Next batch code`}: ${batchGenerator.result}`,\n        value: batchCode,\n        onValueChange: (value: any) => setBatchCode(value)\n      },\n      start_date: {\n        icon: <IconCalendar />\n      },\n      target_date: {\n        icon: <IconCalendar />\n      },\n      take_from: {},\n      destination: {\n        filters: {\n          structural: false\n        },\n        value: destination\n      },\n      link: {\n        icon: <IconLink />\n      },\n      issued_by: {\n        icon: <IconUser />,\n        filters: {\n          is_active: true\n        }\n      },\n      responsible: {\n        icon: <IconUsersGroup />,\n        filters: {\n          is_active: true\n        }\n      },\n      external: {}\n    };\n\n    if (!globalSettings.isSet('PROJECT_CODES_ENABLED', true)) {\n      delete fields.project_code;\n    }\n\n    if (!globalSettings.isSet('BUILDORDER_EXTERNAL_BUILDS', true)) {\n      delete fields.external;\n    }\n\n    return fields;\n  }, [create, destination, batchCode, batchGenerator.result, globalSettings]);\n}\n\nexport function useBuildOrderOutputFields({\n  build,\n  modalId\n}: {\n  build: any;\n  modalId: string;\n}): ApiFormFieldSet {\n  const trackable: boolean = useMemo(() => {\n    return build.part_detail?.trackable ?? false;\n  }, [build.part_detail]);\n\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    setLocation(build.location || build.part_detail?.default_location || null);\n  }, [build.location, build.part_detail]);\n\n  const [quantity, setQuantity] = useState<number>(0);\n\n  useEffect(() => {\n    const build_quantity = build.quantity ?? 0;\n    const build_complete = build.completed ?? 0;\n\n    setQuantity(Math.max(0, build_quantity - build_complete));\n  }, [build]);\n\n  const serialGenerator = useSerialNumberGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: build.part || build.part_detail?.pk\n    }\n  });\n\n  const batchGenerator = useBatchCodeGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: build.part || build.part_detail?.pk,\n      quantity: build.quantity\n    }\n  });\n\n  return useMemo(() => {\n    return {\n      quantity: {\n        value: quantity,\n        onValueChange: (value: any) => {\n          setQuantity(value);\n        }\n      },\n      serial_numbers: {\n        hidden: !trackable,\n        placeholder:\n          serialGenerator.result &&\n          `${t`Next serial number`}: ${serialGenerator.result}`\n      },\n      batch_code: {\n        placeholder:\n          batchGenerator.result &&\n          `${t`Next batch code`}: ${batchGenerator.result}`\n      },\n      location: {\n        value: location,\n        onValueChange: (value: any) => {\n          setQuantity(value);\n        }\n      },\n      auto_allocate: {\n        hidden: !trackable\n      }\n    };\n  }, [quantity, batchGenerator.result, serialGenerator.result, trackable]);\n}\n\nfunction BuildOutputFormRow({\n  props,\n  record\n}: Readonly<{\n  props: TableFieldRowProps;\n  record: any;\n}>) {\n  const serial = useMemo(() => {\n    if (record.serial) {\n      return `# ${record.serial}`;\n    } else {\n      return `${t`Quantity`}: ${record.quantity}`;\n    }\n  }, [record]);\n\n  return (\n    <>\n      <Table.Tr>\n        <Table.Td>\n          <PartColumn part={record.part_detail} />\n        </Table.Td>\n        <Table.Td>\n          <TableFieldErrorWrapper props={props} errorKey='output'>\n            {serial}\n          </TableFieldErrorWrapper>\n        </Table.Td>\n        <Table.Td>{record.batch}</Table.Td>\n        <Table.Td>\n          <StatusRenderer\n            status={record.status}\n            type={ModelType.stockitem}\n          />{' '}\n        </Table.Td>\n        <Table.Td style={{ width: '1%', whiteSpace: 'nowrap' }}>\n          <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n        </Table.Td>\n      </Table.Tr>\n    </>\n  );\n}\n\nexport function useCompleteBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (location) {\n      return;\n    }\n\n    setLocation(\n      build.destination || build.part_detail?.default_location || null\n    );\n  }, [location, build.destination, build.part_detail]);\n\n  const buildOutputCompleteFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Build Output` },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      },\n      status_custom_key: {},\n      location: {\n        filters: {\n          structural: false\n        },\n        value: location,\n        onValueChange: (value: any) => {\n          setLocation(value);\n        }\n      },\n      notes: {},\n      accept_incomplete_allocation: {}\n    };\n  }, [location, outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_complete, build.pk),\n    method: 'POST',\n    title: t`Complete Build Outputs`,\n    fields: buildOutputCompleteFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been completed`,\n    size: '80%'\n  });\n}\n\n/*\n * Dynamic form for scraping multiple build outputs\n */\nexport function useScrapBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (location) {\n      return;\n    }\n\n    setLocation(\n      build.destination || build.part_detail?.default_location || null\n    );\n  }, [location, build.destination, build.part_detail]);\n\n  const buildOutputScrapFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk,\n            quantity: output.quantity\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Stock Item` },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      },\n      location: {\n        value: location,\n        onValueChange: (value) => {\n          setLocation(value);\n        }\n      },\n      notes: {},\n      discard_allocations: {}\n    };\n  }, [location, outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_scrap, build.pk),\n    method: 'POST',\n    title: t`Scrap Build Outputs`,\n    preFormContent: (\n      <Alert title={t`Scrap Build Outputs`} color='yellow'>\n        <List>\n          <List.Item>\n            {t`Selected build outputs will be completed, but marked as scrapped`}\n          </List.Item>\n          <List.Item>{t`Allocated stock items will be consumed`}</List.Item>\n        </List>\n      </Alert>\n    ),\n    fields: buildOutputScrapFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been scrapped`,\n    size: '80%'\n  });\n}\n\nexport function useCancelBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const buildOutputCancelFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Stock Item` },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      }\n    };\n  }, [outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_delete, build.pk),\n    method: 'POST',\n    title: t`Cancel Build Outputs`,\n    preFormContent: (\n      <Alert title={t`Cancel Build Outputs`} color='yellow'>\n        <List>\n          <List.Item>{t`Selected build outputs will be removed`}</List.Item>\n          <List.Item>\n            {t`Allocated stock items will be returned to stock`}\n          </List.Item>\n        </List>\n      </Alert>\n    ),\n    fields: buildOutputCancelFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been cancelled`,\n    size: '80%'\n  });\n}\n\n// Construct a single row in the 'allocate stock to build' table\nfunction BuildAllocateLineRow({\n  props,\n  output,\n  record,\n  sourceLocation\n}: Readonly<{\n  props: TableFieldRowProps;\n  output: any;\n  record: any;\n  sourceLocation: number | undefined;\n}>) {\n  const stockField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'related field',\n      api_url: apiUrl(ApiEndpoints.stock_item_list),\n      model: ModelType.stockitem,\n      autoFill: !!output?.serial,\n      autoFillFilters: {\n        serial: output?.serial\n      },\n      filters: {\n        available: true,\n        part_detail: true,\n        location_detail: true,\n        bom_item: record.bom_item,\n        location: sourceLocation,\n        cascade: sourceLocation ? true : undefined\n      },\n      value: props.item.stock_item,\n      name: 'stock_item',\n      onValueChange: (value: any, instance: any) => {\n        props.changeFn(props.idx, 'stock_item', value);\n\n        // Update the allocated quantity based on the selected stock item\n        if (instance) {\n          const available = instance.quantity - instance.allocated;\n\n          if (available < props.item.quantity) {\n            props.changeFn(\n              props.idx,\n              'quantity',\n              Math.min(props.item.quantity, available)\n            );\n          }\n        }\n      }\n    };\n  }, [record, props]);\n\n  const quantityField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'number',\n      name: 'quantity',\n      required: true,\n      value: props.item.quantity,\n      onValueChange: (value: any) => {\n        props.changeFn(props.idx, 'quantity', value);\n      }\n    };\n  }, [props]);\n\n  return (\n    <Table.Tr key={`table-row-${record.pk}`}>\n      <Table.Td>\n        <PartColumn part={record.part_detail} />\n      </Table.Td>\n      <Table.Td>\n        <ProgressBar\n          value={record.allocatedQuantity}\n          maximum={record.requiredQuantity}\n          progressLabel\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='stock_item'\n          fieldDefinition={stockField}\n          error={props.rowErrors?.stock_item?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='quantity'\n          fieldDefinition={quantityField}\n          error={props.rowErrors?.quantity?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\n/*\n * Dynamic form for allocating stock against multiple build order line items\n */\nexport function useAllocateStockToBuildForm({\n  buildId,\n  output,\n  outputId,\n  build,\n  lineItems,\n  onFormSuccess\n}: {\n  buildId?: number;\n  output?: any;\n  outputId?: number | null;\n  build?: any;\n  lineItems: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [sourceLocation, setSourceLocation] = useState<number | undefined>(\n    undefined\n  );\n\n  const buildAllocateFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      items: {\n        field_type: 'table',\n        value: [],\n        headers: [\n          { title: t`Part`, style: { minWidth: '175px' } },\n          { title: t`Allocated`, style: { minWidth: '175px' } },\n          { title: t`Stock Item`, style: { width: '100%' } },\n          { title: t`Quantity`, style: { minWidth: '175px' } },\n          { title: '', style: { width: '50px' } }\n        ],\n        modelRenderer: (row: TableFieldRowProps) => {\n          // Find the matching record from the passed 'lineItems'\n          const record =\n            lineItems.find((item) => item.pk == row.item.build_line) ?? {};\n          return (\n            <BuildAllocateLineRow\n              key={row.idx}\n              output={output}\n              props={row}\n              record={record}\n              sourceLocation={sourceLocation}\n            />\n          );\n        }\n      }\n    };\n\n    return fields;\n  }, [output, lineItems, sourceLocation]);\n\n  useEffect(() => {\n    setSourceLocation(build?.take_from);\n  }, [build?.take_from]);\n\n  const sourceLocationField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'related field',\n      api_url: apiUrl(ApiEndpoints.stock_location_list),\n      model: ModelType.stocklocation,\n      required: false,\n      label: t`Source Location`,\n      description: t`Select the source location for the stock allocation`,\n      name: 'source_location',\n      value: build?.take_from,\n      onValueChange: (value: any) => {\n        setSourceLocation(value);\n      }\n    };\n  }, [build?.take_from]);\n\n  const preFormContent = useMemo(() => {\n    return (\n      <Stack gap='xs'>\n        {output?.pk && (\n          <Stack gap='xs'>\n            <Alert\n              color='blue'\n              icon={<IconInfoCircle />}\n              title={t`Build Output`}\n            >\n              <RenderStockItem instance={output} />\n            </Alert>\n            <Divider />\n          </Stack>\n        )}\n        <StandaloneField fieldDefinition={sourceLocationField} />\n      </Stack>\n    );\n  }, [output, sourceLocationField]);\n\n  return useCreateApiFormModal({\n    url: ApiEndpoints.build_order_allocate,\n    pk: buildId,\n    title: t`Allocate Stock`,\n    fields: buildAllocateFields,\n    preFormContent: preFormContent,\n    successMessage: t`Stock items allocated`,\n    onFormSuccess: onFormSuccess,\n    initialData: {\n      items: lineItems.map((item) => {\n        return {\n          build_line: item.pk,\n          stock_item: undefined,\n          quantity: Math.max(0, item.requiredQuantity - item.allocatedQuantity),\n          output: outputId\n        };\n      })\n    },\n    size: '80%'\n  });\n}\n","import { t } from '@lingui/core/macro';\nimport { useMemo } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport { RenderUser } from '../../components/render/User';\nimport { useBuildOrderFields } from '../../forms/BuildForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport {\n  BooleanColumn,\n  CreationDateColumn,\n  DateColumn,\n  PartColumn,\n  ProjectCodeColumn,\n  ReferenceColumn,\n  ResponsibleColumn,\n  StartDateColumn,\n  StatusColumn,\n  TargetDateColumn\n} from '../ColumnRenderers';\nimport {\n  AssignedToMeFilter,\n  CompletedAfterFilter,\n  CompletedBeforeFilter,\n  CreatedAfterFilter,\n  CreatedBeforeFilter,\n  HasProjectCodeFilter,\n  IncludeVariantsFilter,\n  IssuedByFilter,\n  MaxDateFilter,\n  MinDateFilter,\n  OrderStatusFilter,\n  OutstandingFilter,\n  OverdueFilter,\n  PartCategoryFilter,\n  ProjectCodeFilter,\n  ResponsibleFilter,\n  StartDateAfterFilter,\n  StartDateBeforeFilter,\n  TargetDateAfterFilter,\n  TargetDateBeforeFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/*\n * Construct a table of build orders, according to the provided parameters\n */\nexport function BuildOrderTable({\n  partId,\n  parentBuildId,\n  salesOrderId\n}: Readonly<{\n  partId?: number;\n  parentBuildId?: number;\n  salesOrderId?: number;\n}>) {\n  const globalSettings = useGlobalSettingsState();\n  const table = useTable(!!partId ? 'buildorder-part' : 'buildorder-index');\n\n  const tableColumns = useMemo(() => {\n    return [\n      ReferenceColumn({}),\n      {\n        accessor: 'part',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => PartColumn({ part: record.part_detail })\n      },\n      {\n        accessor: 'part_detail.IPN',\n        sortable: true,\n        switchable: true,\n        title: t`IPN`\n      },\n      {\n        accessor: 'part_detail.revision',\n        title: t`Revision`,\n        sortable: true,\n        defaultVisible: false\n      },\n      {\n        accessor: 'title',\n        sortable: false\n      },\n      {\n        accessor: 'completed',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => (\n          <ProgressBar\n            progressLabel={true}\n            value={record.completed}\n            maximum={record.quantity}\n          />\n        )\n      },\n      StatusColumn({ model: ModelType.build }),\n      ProjectCodeColumn({\n        defaultVisible: false\n      }),\n      {\n        accessor: 'level',\n        sortable: true,\n        switchable: true,\n        hidden: !parentBuildId,\n        defaultVisible: false\n      },\n      {\n        accessor: 'priority',\n        sortable: true,\n        defaultVisible: false\n      },\n      BooleanColumn({\n        accessor: 'external',\n        title: t`External`,\n        sortable: true,\n        switchable: true,\n        hidden: !globalSettings.isSet('BUILDORDER_EXTERNAL_BUILDS')\n      }),\n      CreationDateColumn({\n        defaultVisible: false\n      }),\n      StartDateColumn({\n        defaultVisible: false\n      }),\n      TargetDateColumn({}),\n      DateColumn({\n        accessor: 'completion_date',\n        title: t`Completion Date`,\n        sortable: true\n      }),\n      {\n        accessor: 'issued_by',\n        sortable: true,\n        render: (record: any) => (\n          <RenderUser instance={record?.issued_by_detail} />\n        )\n      },\n      ResponsibleColumn({})\n    ];\n  }, [parentBuildId, globalSettings]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    const filters: TableFilter[] = [\n      OutstandingFilter(),\n      OrderStatusFilter({ model: ModelType.build }),\n      OverdueFilter(),\n      AssignedToMeFilter(),\n      MinDateFilter(),\n      MaxDateFilter(),\n      CreatedBeforeFilter(),\n      CreatedAfterFilter(),\n      TargetDateBeforeFilter(),\n      TargetDateAfterFilter(),\n      StartDateBeforeFilter(),\n      StartDateAfterFilter(),\n      {\n        name: 'has_target_date',\n        type: 'boolean',\n        label: t`Has Target Date`,\n        description: t`Show orders with a target date`\n      },\n      {\n        name: 'has_start_date',\n        type: 'boolean',\n        label: t`Has Start Date`,\n        description: t`Show orders with a start date`\n      },\n      CompletedBeforeFilter(),\n      CompletedAfterFilter(),\n      ProjectCodeFilter(),\n      HasProjectCodeFilter(),\n      IssuedByFilter(),\n      ResponsibleFilter(),\n      {\n        name: 'external',\n        label: t`External`,\n        description: t`Show external build orders`,\n        active: globalSettings.isSet('BUILDORDER_EXTERNAL_BUILDS')\n      },\n      PartCategoryFilter()\n    ];\n\n    // If we are filtering on a specific part, we can include the \"include variants\" filter\n    if (!!partId) {\n      filters.push(IncludeVariantsFilter());\n    }\n\n    return filters;\n  }, [partId, globalSettings]);\n\n  const user = useUserState();\n\n  const buildOrderFields = useBuildOrderFields({\n    create: true,\n    modalId: 'create-build-order'\n  });\n\n  const newBuild = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Add Build Order`,\n    modalId: 'create-build-order',\n    fields: buildOrderFields,\n    initialData: {\n      part: partId,\n      sales_order: salesOrderId,\n      parent: parentBuildId\n    },\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        hidden={!user.hasAddRole(UserRoles.build)}\n        tooltip={t`Add Build Order`}\n        onClick={() => newBuild.open()}\n        key='add-build-order'\n      />\n    ];\n  }, [user]);\n\n  return (\n    <>\n      {newBuild.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.build_order_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            part: partId,\n            ancestor: parentBuildId,\n            sales_order: salesOrderId,\n            part_detail: true\n          },\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          modelType: ModelType.build,\n          enableSelection: true,\n          enableReports: true,\n          enableDownload: true\n        }}\n      />\n    </>\n  );\n}\n"],"names":["useBuildOrderFields","create","modalId","destination","setDestination","useState","batchCode","setBatchCode","batchGenerator","useBatchCodeGenerator","onGenerate","value","batch","globalSettings","useGlobalSettingsState","useMemo","fields","reference","part","disabled","filters","assembly","virtual","active","isSet","undefined","locked","onValueChange","record","default_location","category_default_location","update","title","quantity","project_code","icon","IconList","priority","parent","IconSitemap","part_detail","sales_order","IconTruckDelivery","placeholder","result","_i18n","_","id","start_date","IconCalendar","target_date","take_from","structural","link","IconLink","issued_by","IconUser","is_active","responsible","IconUsersGroup","external","useBuildOrderOutputFields","build","trackable","location","setLocation","useEffect","setQuantity","build_quantity","build_complete","completed","Math","max","serialGenerator","useSerialNumberGenerator","initialQuery","pk","serial_numbers","hidden","batch_code","auto_allocate","BuildOutputFormRow","props","serial","jsx","Fragment","jsxs","Table","PartColumn","TableFieldErrorWrapper","StatusRenderer","status","ModelType","stockitem","width","whiteSpace","RemoveRowButton","removeFn","idx","useCompleteBuildOutputsForm","outputs","onFormSuccess","buildOutputCompleteFields","field_type","map","output","modelRenderer","row","find","item","headers","style","status_custom_key","notes","accept_incomplete_allocation","useCreateApiFormModal","url","apiUrl","ApiEndpoints","build_output_complete","method","successMessage","size","useScrapBuildOutputsForm","buildOutputScrapFields","discard_allocations","build_output_scrap","preFormContent","Alert","List","useCancelBuildOutputsForm","buildOutputCancelFields","build_output_delete","BuildAllocateLineRow","sourceLocation","stockField","api_url","stock_item_list","model","autoFill","autoFillFilters","available","location_detail","bom_item","cascade","stock_item","name","instance","changeFn","allocated","min","quantityField","required","ProgressBar","allocatedQuantity","requiredQuantity","StandaloneField","rowErrors","message","useAllocateStockToBuildForm","buildId","outputId","lineItems","setSourceLocation","buildAllocateFields","items","minWidth","build_line","sourceLocationField","stock_location_list","stocklocation","label","description","Stack","IconInfoCircle","RenderStockItem","Divider","build_order_allocate","initialData","BuildOrderTable","partId","parentBuildId","salesOrderId","table","useTable","tableColumns","ReferenceColumn","accessor","sortable","switchable","render","defaultVisible","StatusColumn","ProjectCodeColumn","BooleanColumn","CreationDateColumn","StartDateColumn","TargetDateColumn","DateColumn","RenderUser","issued_by_detail","ResponsibleColumn","tableFilters","OutstandingFilter","OrderStatusFilter","OverdueFilter","AssignedToMeFilter","MinDateFilter","MaxDateFilter","CreatedBeforeFilter","CreatedAfterFilter","TargetDateBeforeFilter","TargetDateAfterFilter","StartDateBeforeFilter","StartDateAfterFilter","type","CompletedBeforeFilter","CompletedAfterFilter","ProjectCodeFilter","HasProjectCodeFilter","IssuedByFilter","ResponsibleFilter","PartCategoryFilter","push","IncludeVariantsFilter","user","useUserState","buildOrderFields","newBuild","build_order_list","follow","modelType","tableActions","AddItemButton","hasAddRole","UserRoles","open","modal","InvenTreeTable","params","ancestor","enableSelection","enableReports","enableDownload"],"mappings":"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"}
