{"version":3,"file":"LocationDetail-BuV7sOza.js","sources":["../../../../../../frontend/src/tables/stock/StockLocationTable.tsx","../../../../../../frontend/src/pages/stock/LocationDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group } from '@mantine/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { type RowAction, RowEditAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { ActionDropdown } from '../../components/items/ActionDropdown';\nimport { ApiIcon } from '../../components/items/ApiIcon';\nimport { stockLocationFields } from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useBulkEditApiFormModal,\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { BooleanColumn, DescriptionColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * Stock location table\n */\nexport function StockLocationTable({ parentId }: Readonly<{ parentId?: any }>) {\n  const table = useTable('stocklocation');\n  const user = useUserState();\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'cascade',\n        label: t`Include Sublocations`,\n        description: t`Include sublocations in results`\n      },\n      {\n        name: 'structural',\n        label: t`Structural`,\n        description: t`Show structural locations`\n      },\n      {\n        name: 'external',\n        label: t`External`,\n        description: t`Show external locations`\n      },\n      {\n        name: 'has_location_type',\n        label: t`Has location type`\n      },\n      {\n        name: 'location_type',\n        label: t`Location Type`,\n        description: t`Filter by location type`,\n        apiUrl: apiUrl(ApiEndpoints.stock_location_type_list),\n        model: ModelType.stocklocationtype,\n        modelRenderer: (instance: any) => instance.name\n      }\n    ];\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        switchable: false,\n        render: (record: any) => (\n          <Group gap='xs'>\n            {record.icon && <ApiIcon name={record.icon} />}\n            {record.name}\n          </Group>\n        )\n      },\n      DescriptionColumn({}),\n      {\n        accessor: 'pathstring',\n        sortable: true\n      },\n      {\n        accessor: 'items',\n        sortable: true\n      },\n      BooleanColumn({\n        accessor: 'structural',\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'external',\n        defaultVisible: false\n      }),\n      {\n        accessor: 'location_type',\n        sortable: false,\n        render: (record: any) => record.location_type_detail?.name\n      }\n    ];\n  }, []);\n\n  const newLocation = useCreateApiFormModal({\n    url: ApiEndpoints.stock_location_list,\n    title: t`Add Stock Location`,\n    fields: stockLocationFields(),\n    focus: 'name',\n    initialData: {\n      parent: parentId\n    },\n    follow: true,\n    modelType: ModelType.stocklocation,\n    table: table\n  });\n\n  const [selectedLocation, setSelectedLocation] = useState<number>(-1);\n\n  const editLocation = useEditApiFormModal({\n    url: ApiEndpoints.stock_location_list,\n    pk: selectedLocation,\n    title: t`Edit Stock Location`,\n    fields: stockLocationFields(),\n    onFormSuccess: (record: any) => table.updateRecord(record)\n  });\n\n  const setParent = useBulkEditApiFormModal({\n    url: ApiEndpoints.stock_location_list,\n    items: table.selectedIds,\n    title: t`Set Parent Location`,\n    fields: {\n      parent: {}\n    },\n    onFormSuccess: table.refreshTable\n  });\n\n  const tableActions = useMemo(() => {\n    const can_add = user.hasAddRole(UserRoles.stock_location);\n    const can_edit = user.hasChangeRole(UserRoles.stock_location);\n\n    return [\n      <ActionDropdown\n        tooltip={t`Location Actions`}\n        icon={<InvenTreeIcon icon='location' />}\n        disabled={!table.hasSelectedRecords}\n        actions={[\n          {\n            name: t`Set Parent`,\n            icon: <InvenTreeIcon icon='location' />,\n            tooltip: t`Set parent location for the selected items`,\n            hidden: !can_edit,\n            disabled: !table.hasSelectedRecords,\n            onClick: () => {\n              setParent.open();\n            }\n          }\n        ]}\n      />,\n      <AddItemButton\n        key='add-stock-location'\n        tooltip={t`Add Stock Location`}\n        onClick={() => newLocation.open()}\n        hidden={!can_add}\n      />\n    ];\n  }, [user, table.hasSelectedRecords]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const can_edit = user.hasChangeRole(UserRoles.stock_location);\n\n      return [\n        RowEditAction({\n          hidden: !can_edit,\n          onClick: () => {\n            setSelectedLocation(record.pk);\n            editLocation.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {newLocation.modal}\n      {editLocation.modal}\n      {setParent.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_location_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableSelection: true,\n          enableDownload: true,\n          enableLabels: true,\n          enableReports: true,\n          params: {\n            parent: parentId,\n            top_level: parentId === undefined ? true : undefined\n          },\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          rowActions: rowActions,\n          modelType: ModelType.stocklocation\n        }}\n      />\n    </>\n  );\n}\n","import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport { t } from '@lingui/core/macro';\nimport { Group, Skeleton, Stack, Text } from '@mantine/core';\nimport { IconInfoCircle, IconPackages, IconSitemap } from '@tabler/icons-react';\nimport { useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { api } from '../../App';\nimport { useBarcodeScanDialog } from '../../components/barcodes/BarcodeScanDialog';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  BarcodeActionDropdown,\n  DeleteItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { ApiIcon } from '../../components/items/ApiIcon';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport NavigationTree from '../../components/nav/NavigationTree';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport LocateItemButton from '../../components/plugins/LocateItemButton';\nimport {\n  type StockOperationProps,\n  stockLocationFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useUserState } from '../../states/UserState';\nimport { PartListTable } from '../../tables/part/PartTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\nimport { StockLocationTable } from '../../tables/stock/StockLocationTable';\n\nexport default function Stock() {\n  const { id: _id } = useParams();\n\n  const id = useMemo(\n    () => (!Number.isNaN(Number.parseInt(_id || '')) ? _id : undefined),\n    [_id]\n  );\n\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const [treeOpen, setTreeOpen] = useState(false);\n\n  const {\n    instance: location,\n    refreshInstance,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.stock_location_list,\n    hasPrimaryKey: true,\n    pk: id,\n    params: {\n      path_detail: true\n    }\n  });\n\n  const detailsPanel = useMemo(() => {\n    if (id && instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const left: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'name',\n        label: t`Name`,\n        copy: true,\n        value_formatter: () => (\n          <Group gap='xs'>\n            {location.icon && <ApiIcon name={location.icon} />}\n            {location.name}\n          </Group>\n        )\n      },\n      {\n        type: 'text',\n        name: 'pathstring',\n        label: t`Path`,\n        icon: 'sitemap',\n        copy: true,\n        hidden: !id\n      },\n      {\n        type: 'text',\n        name: 'description',\n        label: t`Description`,\n        copy: true\n      },\n      {\n        type: 'link',\n        name: 'parent',\n        model_field: 'name',\n        icon: 'location',\n        label: t`Parent Location`,\n        model: ModelType.stocklocation,\n        hidden: !location?.parent\n      }\n    ];\n\n    const right: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'items',\n        icon: 'stock',\n        label: t`Stock Items`,\n        value_formatter: () => location?.items || '0'\n      },\n      {\n        type: 'text',\n        name: 'sublocations',\n        icon: 'location',\n        label: t`Sublocations`,\n        hidden: !location?.sublocations\n      },\n      {\n        type: 'boolean',\n        name: 'structural',\n        label: t`Structural`,\n        icon: 'sitemap'\n      },\n      {\n        type: 'boolean',\n        name: 'external',\n        label: t`External`\n      },\n      {\n        type: 'string',\n        // TODO: render location type icon here (ref: #7237)\n        name: 'location_type_detail.name',\n        label: t`Location Type`,\n        hidden: !location?.location_type,\n        icon: 'packages'\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        {id && location?.pk ? (\n          <DetailsTable item={location} fields={left} />\n        ) : (\n          <Text>{t`Top level stock location`}</Text>\n        )}\n        {id && location?.pk && <DetailsTable item={location} fields={right} />}\n      </ItemDetailsGrid>\n    );\n  }, [location, instanceQuery]);\n\n  const locationPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'details',\n        label: t`Location Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'sublocations',\n        label: t`Stock Locations`,\n        icon: <IconSitemap />,\n        content: <StockLocationTable parentId={id} />\n      },\n      {\n        name: 'stock-items',\n        label: t`Stock Items`,\n        icon: <IconPackages />,\n        content: (\n          <StockItemTable\n            tableName='location-stock'\n            allowAdd\n            params={{\n              location: id\n            }}\n          />\n        )\n      },\n      {\n        name: 'default_parts',\n        label: t`Default Parts`,\n        icon: <IconPackages />,\n        hidden: !location.pk,\n        content: (\n          <PartListTable\n            props={{\n              params: {\n                default_location: location.pk\n              }\n            }}\n          />\n        )\n      }\n    ];\n  }, [location, id]);\n\n  const editLocation = useEditApiFormModal({\n    url: ApiEndpoints.stock_location_list,\n    pk: id,\n    title: t`Edit Stock Location`,\n    fields: stockLocationFields(),\n    onFormSuccess: refreshInstance\n  });\n\n  const deleteOptions = useMemo(() => {\n    return [\n      {\n        value: 0,\n        display_name: t`Move items to parent location`\n      },\n      {\n        value: 1,\n        display_name: t`Delete items`\n      }\n    ];\n  }, []);\n\n  const deleteLocation = useDeleteApiFormModal({\n    url: ApiEndpoints.stock_location_list,\n    pk: id,\n    title: t`Delete Stock Location`,\n    fields: {\n      delete_stock_items: {\n        label: t`Items Action`,\n        description: t`Action for stock items in this location`,\n        field_type: 'choice',\n        choices: deleteOptions\n      },\n      delete_sub_location: {\n        label: t`Child Locations Action`,\n        description: t`Action for child locations in this location`,\n        field_type: 'choice',\n        choices: deleteOptions\n      }\n    },\n    onFormSuccess: () => {\n      if (location.parent) {\n        navigate(getDetailUrl(ModelType.stocklocation, location.parent));\n      } else {\n        navigate('/stock/');\n      }\n    }\n  });\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      pk: location.pk,\n      model: 'location',\n      refresh: refreshInstance,\n      filters: {\n        in_stock: true\n      }\n    };\n  }, [location]);\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    enabled: true,\n    delete: false,\n    merge: false,\n    assign: false\n  });\n\n  const scanInStockItem = useBarcodeScanDialog({\n    title: t`Scan Stock Item`,\n    modelType: ModelType.stockitem,\n    callback: async (barcode, response) => {\n      const item = response.stockitem.instance;\n\n      // Scan the stock item into the current location\n      return api\n        .post(apiUrl(ApiEndpoints.stock_transfer), {\n          location: location.pk,\n          items: [\n            {\n              pk: item.pk,\n              quantity: item.quantity\n            }\n          ]\n        })\n        .then(() => {\n          return {\n            success: t`Scanned stock item into location`\n          };\n        })\n        .catch((error) => {\n          console.error('Error scanning stock item:', error);\n          return {\n            error: t`Error scanning stock item`\n          };\n        });\n    }\n  });\n\n  const scanInStockLocation = useBarcodeScanDialog({\n    title: t`Scan Stock Location`,\n    modelType: ModelType.stocklocation,\n    callback: async (barcode, response) => {\n      const pk = response.stocklocation.pk;\n\n      // Set the parent location\n      return api\n        .patch(apiUrl(ApiEndpoints.stock_location_list, pk), {\n          parent: location.pk\n        })\n        .then(() => {\n          return {\n            success: t`Scanned stock location into location`\n          };\n        })\n        .catch((error) => {\n          console.error('Error scanning stock location:', error);\n          return {\n            error: t`Error scanning stock location`\n          };\n        });\n    }\n  });\n\n  const locationActions = useMemo(\n    () => [\n      <AdminButton model={ModelType.stocklocation} id={location.pk} />,\n      <LocateItemButton locationId={location.pk} />,\n      location.pk ? (\n        <BarcodeActionDropdown\n          model={ModelType.stocklocation}\n          pk={location.pk}\n          hash={location?.barcode_hash}\n          perm={user.hasChangeRole(UserRoles.stock_location)}\n          actions={[\n            {\n              name: 'Scan in stock items',\n              icon: <InvenTreeIcon icon='stock' />,\n              tooltip: 'Scan item into this location',\n              onClick: scanInStockItem.open\n            },\n            {\n              name: 'Scan in container',\n              icon: <InvenTreeIcon icon='unallocated_stock' />,\n              tooltip: 'Scan container into this location',\n              onClick: scanInStockLocation.open\n            }\n          ]}\n        />\n      ) : null,\n      <PrintingActions\n        modelType={ModelType.stocklocation}\n        items={[location.pk ?? 0]}\n        hidden={!location?.pk}\n        enableLabels\n        enableReports\n      />,\n      stockAdjustActions.dropdown,\n      <OptionsActionDropdown\n        tooltip={t`Location Actions`}\n        actions={[\n          EditItemAction({\n            hidden: !id || !user.hasChangeRole(UserRoles.stock_location),\n            tooltip: t`Edit Stock Location`,\n            onClick: () => editLocation.open()\n          }),\n          DeleteItemAction({\n            hidden: !id || !user.hasDeleteRole(UserRoles.stock_location),\n            tooltip: t`Delete Stock Location`,\n            onClick: () => deleteLocation.open()\n          })\n        ]}\n      />\n    ],\n    [location, id, user, stockAdjustActions.dropdown]\n  );\n\n  const breadcrumbs = useMemo(\n    () => [\n      { name: t`Stock`, url: '/stock' },\n      ...(location.path ?? []).map((l: any) => ({\n        name: l.name,\n        url: getDetailUrl(ModelType.stocklocation, l.pk),\n        icon: l.icon ? <ApiIcon name={l.icon} /> : undefined\n      }))\n    ],\n    [location]\n  );\n\n  return (\n    <>\n      {editLocation.modal}\n      {deleteLocation.modal}\n      {scanInStockItem.dialog}\n      {scanInStockLocation.dialog}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredRole={UserRoles.stock_location}\n      >\n        <Stack>\n          <NavigationTree\n            title={t`Stock Locations`}\n            modelType={ModelType.stocklocation}\n            endpoint={ApiEndpoints.stock_location_tree}\n            opened={treeOpen}\n            onClose={() => setTreeOpen(false)}\n            selectedId={location?.pk}\n          />\n          <PageDetail\n            title={location?.name ?? t`Stock Location`}\n            subtitle={location?.description}\n            icon={location?.icon && <ApiIcon name={location?.icon} />}\n            actions={locationActions}\n            editAction={editLocation.open}\n            editEnabled={\n              !!location?.pk &&\n              user.hasChangePermission(ModelType.stocklocation)\n            }\n            breadcrumbs={breadcrumbs}\n            lastCrumb={[\n              {\n                name: location.name,\n                url: `/stock/location/${location.pk}/`\n              }\n            ]}\n            breadcrumbAction={() => {\n              setTreeOpen(true);\n            }}\n          />\n          <PanelGroup\n            pageKey='stocklocation'\n            panels={locationPanels}\n            model={ModelType.stocklocation}\n            reloadInstance={refreshInstance}\n            id={location?.pk}\n            instance={location}\n          />\n        </Stack>\n        {stockAdjustActions.modals.map((modal) => modal.modal)}\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["StockLocationTable","parentId","table","useTable","user","useUserState","tableFilters","useMemo","name","label","_i18n","_","id","description","apiUrl","ApiEndpoints","stock_location_type_list","model","ModelType","stocklocationtype","modelRenderer","instance","tableColumns","accessor","switchable","render","record","jsxs","Group","icon","jsx","ApiIcon","DescriptionColumn","sortable","BooleanColumn","defaultVisible","location_type_detail","newLocation","useCreateApiFormModal","url","stock_location_list","title","fields","stockLocationFields","focus","initialData","parent","follow","modelType","stocklocation","selectedLocation","setSelectedLocation","useState","editLocation","useEditApiFormModal","pk","onFormSuccess","updateRecord","setParent","useBulkEditApiFormModal","items","selectedIds","refreshTable","tableActions","can_add","hasAddRole","UserRoles","stock_location","can_edit","hasChangeRole","ActionDropdown","InvenTreeIcon","hasSelectedRecords","tooltip","hidden","disabled","onClick","open","AddItemButton","rowActions","useCallback","RowEditAction","modal","InvenTreeTable","enableSelection","enableDownload","enableLabels","enableReports","params","top_level","undefined","Stock","_id","useParams","Number","isNaN","parseInt","navigate","useNavigate","treeOpen","setTreeOpen","location","refreshInstance","instanceQuery","useInstance","endpoint","hasPrimaryKey","path_detail","detailsPanel","isFetching","Skeleton","left","type","copy","value_formatter","model_field","right","sublocations","location_type","ItemDetailsGrid","DetailsTable","Text","locationPanels","IconInfoCircle","content","IconSitemap","IconPackages","StockItemTable","PartListTable","default_location","deleteOptions","value","display_name","deleteLocation","useDeleteApiFormModal","delete_stock_items","field_type","choices","delete_sub_location","getDetailUrl","stockOperationProps","refresh","filters","in_stock","stockAdjustActions","useStockAdjustActions","formProps","enabled","delete","merge","assign","scanInStockItem","useBarcodeScanDialog","stockitem","callback","barcode","response","item","api","post","stock_transfer","quantity","then","success","catch","error","scanInStockLocation","patch","locationActions","AdminButton","LocateItemButton","BarcodeActionDropdown","barcode_hash","PrintingActions","dropdown","OptionsActionDropdown","EditItemAction","DeleteItemAction","hasDeleteRole","breadcrumbs","path","map","l","dialog","InstanceDetail","Stack","NavigationTree","stock_location_tree","PageDetail","hasChangePermission","PanelGroup","modals"],"mappings":"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"}
