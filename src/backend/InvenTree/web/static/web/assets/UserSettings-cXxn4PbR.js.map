{"version":3,"mappings":"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","names":["createPromise","resolver","Promise","resolve","useReauth","inputProps","setInputProps","useState","label","name","description","value","setValue","open","setOpen","setResolver","getReauthText","props","promise","onClick","result","positive","ReauthModal","jsx","Modal","_i18n","_","id","Stack","TextInput","event","currentTarget","jsxs","Group","Button","_Trans","SecurityContent","auth_config","sso_enabled","useServerApiState","useShallow","state","Accordion","StylishText","EmailSection","ProviderSection","Alert","IconAlertCircle","MfaSection","ApiTokenTable","selectedEmail","setSelectedEmail","newEmailValue","setNewEmailValue","isLoading","data","refetch","useQuery","queryKey","queryFn","authApi","apiUrl","ApiEndpoints","auth_email","then","res","emailAvailable","useMemo","undefined","length","runServerAction","action","vals","email","catch","err","hideNotification","showNotification","title","message","color","Loader","SimpleGrid","xs","md","Radio","map","String","primary","Badge","verified","IconAt","status","response","errors","error","join","icon","IconX","ProviderButton","provider","ProviderLogin","auth_providers","availableProviders","configuredProviders","item","socialaccount","providers","filter","includes","removeProvider","uid","split","account","console","log","Grid","link","display","Text","recoveryCodes","setRecoveryCodes","recoveryCodesOpen","openRecoveryCodes","close","closeRecoveryCodes","useDisclosure","api","get","auth_authenticators","showRecoveryCodes","codes","removeTotp","runActionWithFallback","auth_totp","ResultType","viewRecoveryCodes","auth_recovery","parseDate","date","Date","toLocaleString","rows","token","Table","type","last_used_at","created_at","usedFactors","Fragment","MfaAddSection","Code","unused_codes","used_codes","totpQrOpen","openTotpQr","closeTotpQr","totpQr","setTotpQr","registerRecoveryCodes","registerTotp","meta","secret","possibleFactors","function","used","factor","mfa","supported_types","totpError","setTotpError","Tooltip","QrRegistrationForm","totp_url","code","errorMsg","IconExclamationCircle","setAuthContext","getState","flows","find","flow","FlowEnum","MfaReauthenticate","Reauthenticate","auth_mfa_reauthenticate","auth_reauthenticate","password","AccountDetailPanel","navigate","useNavigate","user","fetchUserState","useUserState","userFields","first_name","last_name","editAccount","useEditApiFormModal","url","user_me","onFormSuccess","fields","successMessage","profileFields","displayname","position","location","active","contact","organisation","primary_group","editProfile","user_profile","accountDetailFields","username","YesNoUndefinedButton","profile","is_staff","is_superuser","profileDetailFields","modal","ActionDropdown","IconUser","IconEdit","tooltip","IconKey","renderDetailTable","ActionButton","values","0","getLkp","DEFAULT_THEME","colors","LOOKUP","Object","assign","keys","clr","UserTheme","height","theme","useMantineTheme","userTheme","setTheme","setLanguage","useLocalState","getMark","obj","SizeMarks","mark","getDefaultRadius","Number","parseInt","radius","toString","some","setRadius","changeRadius","key","Container","LanguageSelect","IS_DEV","ColorToggle","ColorPicker","v","primaryColor","ColorInput","whiteColor","ActionIcon","IconRestore","blackColor","Slider","val","Select","loader","AccountContent","base","SECONDARY_COL_HEIGHT","PluginSettingsGroup","Loadable","lazy","UserSettings","isLoggedIn","userSettingsPanels","IconUserCircle","content","IconLock","IconDeviceDesktop","UserSettingList","IconSearch","IconBellCog","IconFileAnalytics","IconPlugConnected","PageTitle","SettingsHeader","PanelGroup","Skeleton"],"ignoreList":[],"sources":["../../../../../../frontend/src/pages/Index/Settings/AccountSettings/useConfirm.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/SecurityContent.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/AccountDetailPanel.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/UserThemePanel.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/UserPanel.tsx","../../../../../../frontend/src/pages/Index/Settings/UserSettings.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Button, Group, Modal, Stack, TextInput } from '@mantine/core';\nimport { type JSX, useState } from 'react';\n\n/* Adapted from https://daveteu.medium.com/react-custom-confirmation-box-458cceba3f7b */\nconst createPromise = () => {\n  let resolver: any;\n  return [\n    new Promise((resolve) => {\n      resolver = resolve;\n    }),\n    resolver\n  ];\n};\n\n/* Adapted from https://daveteu.medium.com/react-custom-confirmation-box-458cceba3f7b */\nexport const useConfirm = () => {\n  const [open, setOpen] = useState(false);\n  const [resolver, setResolver] = useState<((status: boolean) => void) | null>(\n    null\n  );\n  const [label, setLabel] = useState('');\n\n  const getConfirmation = async (text: string) => {\n    setLabel(text);\n    setOpen(true);\n    const [promise, resolve] = await createPromise();\n\n    setResolver(resolve);\n    return promise;\n  };\n\n  const onClick = async (status: boolean) => {\n    setOpen(false);\n    if (resolver) {\n      resolver(status);\n    }\n  };\n\n  const Confirmation = () => (\n    <Modal opened={open} onClose={() => setOpen(false)}>\n      {label}\n      <Button onClick={() => onClick(false)}> Cancel </Button>\n      <Button onClick={() => onClick(true)}> OK </Button>\n    </Modal>\n  );\n\n  return [getConfirmation, Confirmation];\n};\n\ntype InputProps = {\n  label: string;\n  name: string;\n  description: string;\n};\nexport const useReauth = (): [\n  (props: InputProps) => Promise<[string, boolean]>,\n  () => JSX.Element\n] => {\n  const [inputProps, setInputProps] = useState<InputProps>({\n    label: '',\n    name: '',\n    description: ''\n  });\n\n  const [value, setValue] = useState('');\n  const [open, setOpen] = useState(false);\n  const [resolver, setResolver] = useState<{\n    resolve: (result: string, positive: boolean) => void;\n  } | null>(null);\n\n  const getReauthText = async (props: InputProps) => {\n    setInputProps(props);\n    setOpen(true);\n    const [promise, resolve] = await createPromise();\n\n    setResolver({ resolve });\n    return promise;\n  };\n\n  const onClick = async (result: string, positive: boolean) => {\n    setOpen(false);\n    if (resolver) {\n      resolver.resolve(result, positive);\n    }\n  };\n\n  const ReauthModal = () => (\n    <Modal\n      opened={open}\n      onClose={() => setOpen(false)}\n      title={t`Reauthentication`}\n    >\n      <Stack>\n        <TextInput\n          required\n          label={inputProps.label}\n          name={inputProps.name}\n          description={inputProps.description}\n          value={value}\n          onChange={(event) => setValue(event.currentTarget.value)}\n        />\n        <Group justify='space-between'>\n          <Button onClick={() => onClick('', false)} color='red'>\n            <Trans>Cancel</Trans>\n          </Button>\n          <Button onClick={() => onClick(value, true)}>\n            <Trans>OK</Trans>\n          </Button>\n        </Group>\n      </Stack>\n    </Modal>\n  );\n\n  return [getReauthText, ReauthModal];\n};\n","import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { type AuthConfig, type AuthProvider, FlowEnum } from '@lib/types/Auth';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Accordion,\n  Alert,\n  Badge,\n  Button,\n  Code,\n  Grid,\n  Group,\n  Loader,\n  Modal,\n  Radio,\n  SimpleGrid,\n  Stack,\n  Table,\n  Text,\n  TextInput,\n  Tooltip\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { hideNotification, showNotification } from '@mantine/notifications';\nimport {\n  IconAlertCircle,\n  IconAt,\n  IconExclamationCircle,\n  IconX\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo, useState } from 'react';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api } from '../../../../App';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { ProviderLogin, authApi } from '../../../../functions/auth';\nimport { useServerApiState } from '../../../../states/ServerApiState';\nimport { ApiTokenTable } from '../../../../tables/settings/ApiTokenTable';\nimport { QrRegistrationForm } from './QrRegistrationForm';\nimport { useReauth } from './useConfirm';\n\nexport function SecurityContent() {\n  const [auth_config, sso_enabled] = useServerApiState(\n    useShallow((state) => [state.auth_config, state.sso_enabled])\n  );\n\n  return (\n    <Stack>\n      <Accordion multiple defaultValue={['email', 'sso', 'mfa', 'token']}>\n        <Accordion.Item value='email'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Email Addresses`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EmailSection />\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='sso'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Single Sign On`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            {sso_enabled() ? (\n              <ProviderSection auth_config={auth_config} />\n            ) : (\n              <Alert\n                icon={<IconAlertCircle size='1rem' />}\n                title={t`Not enabled`}\n                color='yellow'\n              >\n                <Trans>Single Sign On is not enabled for this server </Trans>\n              </Alert>\n            )}\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='mfa'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Multi-Factor Authentication`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <MfaSection />\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='token'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Access Tokens`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <ApiTokenTable only_myself />\n          </Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Stack>\n  );\n}\n\nfunction EmailSection() {\n  const [selectedEmail, setSelectedEmail] = useState<string>('');\n  const [newEmailValue, setNewEmailValue] = useState('');\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['emails'],\n    queryFn: () =>\n      authApi(apiUrl(ApiEndpoints.auth_email)).then((res) => res.data.data)\n  });\n  const emailAvailable = useMemo(() => {\n    return data == undefined || data.length == 0;\n  }, [data]);\n\n  function runServerAction(\n    action: 'patch' | 'post' | 'put' | 'delete' = 'post',\n    data?: any\n  ) {\n    const vals: any = data || { email: selectedEmail };\n    return authApi(apiUrl(ApiEndpoints.auth_email), undefined, action, vals)\n      .then(() => {\n        refetch();\n      })\n      .catch((err) => {\n        hideNotification('email-error');\n\n        showNotification({\n          id: 'email-error',\n          title: t`Error`,\n          message: t`Error while updating email`,\n          color: 'red'\n        });\n      });\n  }\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <SimpleGrid cols={{ xs: 1, md: 2 }} spacing='sm'>\n      {emailAvailable ? (\n        <Stack gap='xs'>\n          <Alert\n            icon={<IconAlertCircle size='1rem' />}\n            title={t`Not Configured`}\n            color='yellow'\n          >\n            <Trans>Currently no email addresses are registered.</Trans>\n          </Alert>\n        </Stack>\n      ) : (\n        <Radio.Group\n          value={selectedEmail}\n          onChange={setSelectedEmail}\n          name='email_accounts'\n          label={t`The following email addresses are associated with your account:`}\n        >\n          <Stack mt='xs'>\n            {data.map((email: any) => (\n              <Radio\n                key={email.email}\n                value={String(email.email)}\n                label={\n                  <Group justify='space-apart'>\n                    {email.email}\n                    <Group justify='right'>\n                      {email.primary && (\n                        <Badge color='blue'>\n                          <Trans>Primary</Trans>\n                        </Badge>\n                      )}\n                      {email.verified ? (\n                        <Badge color='green'>\n                          <Trans>Verified</Trans>\n                        </Badge>\n                      ) : (\n                        <Badge color='yellow'>\n                          <Trans>Unverified</Trans>\n                        </Badge>\n                      )}\n                    </Group>\n                  </Group>\n                }\n              />\n            ))}\n            <Group>\n              <Button\n                onClick={() =>\n                  runServerAction('patch', {\n                    email: selectedEmail,\n                    primary: true\n                  })\n                }\n                disabled={!selectedEmail}\n              >\n                <Trans>Make Primary</Trans>\n              </Button>\n              <Button\n                onClick={() => runServerAction('put')}\n                disabled={!selectedEmail}\n              >\n                <Trans>Re-send Verification</Trans>\n              </Button>\n              <Button\n                onClick={() => runServerAction('delete')}\n                disabled={!selectedEmail}\n                color='red'\n              >\n                <Trans>Remove</Trans>\n              </Button>\n            </Group>\n          </Stack>\n        </Radio.Group>\n      )}\n      <Stack>\n        <StylishText size='md'>{t`Add Email Address`}</StylishText>\n        <TextInput\n          label={t`E-Mail`}\n          placeholder={t`E-Mail address`}\n          leftSection={<IconAt />}\n          aria-label='email-address-input'\n          value={newEmailValue}\n          onChange={(event) => setNewEmailValue(event.currentTarget.value)}\n        />\n        <Button\n          aria-label='email-address-submit'\n          onClick={() =>\n            runServerAction('post', { email: newEmailValue }).catch((err) => {\n              if (err.status == 400) {\n                showNotification({\n                  title: t`Error while adding email`,\n                  message: err.response.data.errors\n                    .map((error: any) => error.message)\n                    .join('\\n'),\n                  color: 'red',\n                  icon: <IconX />\n                });\n              }\n            })\n          }\n        >\n          <Trans>Add Email</Trans>\n        </Button>\n      </Stack>\n    </SimpleGrid>\n  );\n}\n\nfunction ProviderButton({ provider }: Readonly<{ provider: AuthProvider }>) {\n  return (\n    <Button\n      key={provider.id}\n      variant='outline'\n      onClick={() => ProviderLogin(provider, 'connect')}\n    >\n      <Group justify='space-between'>{provider.name}</Group>\n    </Button>\n  );\n}\n\nfunction ProviderSection({\n  auth_config\n}: Readonly<{ auth_config: AuthConfig | undefined }>) {\n  const [value, setValue] = useState<string>('');\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['provider-list'],\n    queryFn: () =>\n      authApi(apiUrl(ApiEndpoints.auth_providers))\n        .then((res) => res?.data?.data ?? [])\n        .catch(() => [])\n  });\n\n  const availableProviders = useMemo(() => {\n    if (!auth_config || !data) return [];\n\n    const configuredProviders = data.map((item: any) => item.provider.id);\n    return auth_config.socialaccount.providers.filter(\n      (provider: any) => !configuredProviders.includes(provider.id)\n    );\n  }, [auth_config, data]);\n\n  function removeProvider() {\n    const [uid, provider] = value.split('$');\n    authApi(apiUrl(ApiEndpoints.auth_providers), undefined, 'delete', {\n      provider,\n      account: uid\n    })\n      .then(() => {\n        refetch();\n      })\n      .catch((res) => console.log(res.data));\n  }\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <Grid>\n      <Grid.Col span={6}>\n        {data.length == 0 ? (\n          <Stack gap='xs'>\n            <Alert\n              icon={<IconAlertCircle size='1rem' />}\n              title={t`Not Configured`}\n              color='yellow'\n            >\n              <Trans>There are no providers connected to this account.</Trans>\n            </Alert>\n          </Stack>\n        ) : (\n          <Stack>\n            <Radio.Group\n              value={value}\n              onChange={setValue}\n              name='sso_accounts'\n              label={t`You can sign in to your account using any of the following providers`}\n            >\n              <Stack mt='xs'>\n                {data.map((link: any) => (\n                  <Radio\n                    key={link.uid}\n                    value={[link.uid, link.provider.id].join('$')}\n                    label={`${link.provider.name}: ${link.display}`}\n                  />\n                ))}\n              </Stack>\n            </Radio.Group>\n            <Button onClick={removeProvider}>\n              <Trans>Remove Provider Link</Trans>\n            </Button>\n          </Stack>\n        )}\n      </Grid.Col>\n      <Grid.Col span={6}>\n        <Stack>\n          <Text>Add SSO Account</Text>\n          {availableProviders === undefined ? (\n            <Text>\n              <Trans>Loading</Trans>\n            </Text>\n          ) : (\n            <Stack gap='xs'>\n              {availableProviders.map((provider: any) => (\n                <ProviderButton key={provider.id} provider={provider} />\n              ))}\n            </Stack>\n          )}\n        </Stack>\n      </Grid.Col>\n    </Grid>\n  );\n}\n\nfunction MfaSection() {\n  const [getReauthText, ReauthModal] = useReauth();\n  const [recoveryCodes, setRecoveryCodes] = useState<\n    Recoverycodes | undefined\n  >();\n  const [\n    recoveryCodesOpen,\n    { open: openRecoveryCodes, close: closeRecoveryCodes }\n  ] = useDisclosure(false);\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['mfa-list'],\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.auth_authenticators))\n        .then((res) => res?.data?.data ?? [])\n        .catch(() => [])\n  });\n\n  function showRecoveryCodes(codes: Recoverycodes) {\n    setRecoveryCodes(codes);\n    openRecoveryCodes();\n  }\n\n  const removeTotp = () => {\n    runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'delete').then(\n          () => {\n            refetch();\n            return ResultType.success;\n          }\n        ),\n      getReauthText\n    );\n  };\n  const viewRecoveryCodes = () => {\n    runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_recovery), undefined, 'get').then(\n          (res) => {\n            showRecoveryCodes(res.data.data);\n            return ResultType.success;\n          }\n        ),\n      getReauthText\n    );\n  };\n\n  const parseDate = (date: number) =>\n    date == null ? 'Never' : new Date(date * 1000).toLocaleString();\n\n  const rows = useMemo(() => {\n    if (isLoading || !data) return null;\n    return data.map((token: any) => (\n      <Table.Tr key={`${token.created_at}-${token.type}`}>\n        <Table.Td>{token.type}</Table.Td>\n        <Table.Td>{parseDate(token.last_used_at)}</Table.Td>\n        <Table.Td>{parseDate(token.created_at)}</Table.Td>\n        <Table.Td>\n          {token.type == 'totp' && (\n            <Button color='red' onClick={removeTotp}>\n              <Trans>Remove</Trans>\n            </Button>\n          )}\n          {token.type == 'recovery_codes' && (\n            <Button onClick={viewRecoveryCodes}>\n              <Trans>View</Trans>\n            </Button>\n          )}\n        </Table.Td>\n      </Table.Tr>\n    ));\n  }, [data, isLoading]);\n\n  const usedFactors: string[] = useMemo(() => {\n    if (isLoading || !data) return [];\n    return data.map((token: any) => token.type);\n  }, [data]);\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <>\n      <ReauthModal />\n      <SimpleGrid cols={{ xs: 1, md: 2 }} spacing='sm'>\n        {data.length == 0 ? (\n          <Stack gap='xs'>\n            <Alert\n              title={t`Not Configured`}\n              icon={<IconAlertCircle size='1rem' />}\n              color='yellow'\n            >\n              <Trans>No multi-factor tokens configured for this account</Trans>\n            </Alert>\n          </Stack>\n        ) : (\n          <Table stickyHeader striped highlightOnHover withTableBorder>\n            <Table.Thead>\n              <Table.Tr>\n                <Table.Th>\n                  <Trans>Type</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Last used at</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Created at</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Actions</Trans>\n                </Table.Th>\n              </Table.Tr>\n            </Table.Thead>\n            <Table.Tbody>{rows}</Table.Tbody>\n          </Table>\n        )}\n        <MfaAddSection\n          usedFactors={usedFactors}\n          refetch={refetch}\n          showRecoveryCodes={showRecoveryCodes}\n        />\n        <Modal\n          opened={recoveryCodesOpen}\n          onClose={() => {\n            refetch();\n            closeRecoveryCodes();\n          }}\n          title={t`Recovery Codes`}\n          centered\n        >\n          <StylishText size='lg'>\n            <Trans>Unused Codes</Trans>\n          </StylishText>\n          <Code>{recoveryCodes?.unused_codes?.join('\\n')}</Code>\n\n          <StylishText size='lg'>\n            <Trans>Used Codes</Trans>\n          </StylishText>\n          <Code>{recoveryCodes?.used_codes?.join('\\n')}</Code>\n        </Modal>\n      </SimpleGrid>\n    </>\n  );\n}\n\nenum ResultType {\n  success = 0,\n  reauth = 1,\n  mfareauth = 2,\n  error = 3\n}\n\nexport interface Recoverycodes {\n  type: string;\n  created_at: number;\n  last_used_at: null;\n  total_code_count: number;\n  unused_code_count: number;\n  unused_codes: string[];\n  used_code_count: number;\n  used_codes: string[];\n}\n\nfunction MfaAddSection({\n  usedFactors,\n  refetch,\n  showRecoveryCodes\n}: Readonly<{\n  usedFactors: string[];\n  refetch: () => void;\n  showRecoveryCodes: (codes: Recoverycodes) => void;\n}>) {\n  const [auth_config] = useServerApiState(\n    useShallow((state) => [state.auth_config])\n  );\n  const [totpQrOpen, { open: openTotpQr, close: closeTotpQr }] =\n    useDisclosure(false);\n  const [totpQr, setTotpQr] = useState<{ totp_url: string; secret: string }>();\n  const [value, setValue] = useState('');\n  const [getReauthText, ReauthModal] = useReauth();\n\n  const registerRecoveryCodes = async () => {\n    await runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_recovery), undefined, 'post')\n          .then((res) => {\n            showRecoveryCodes(res.data.data);\n            return ResultType.success;\n          })\n          .catch((err) => {\n            showNotification({\n              title: t`Error while registering recovery codes`,\n              message: err.response.data.errors\n                .map((error: any) => error.message)\n                .join('\\n'),\n              color: 'red',\n              icon: <IconX />\n            });\n\n            return ResultType.error;\n          }),\n      getReauthText\n    );\n  };\n  const registerTotp = async () => {\n    await runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'get')\n          .then(() => ResultType.error)\n          .catch((err) => {\n            if (err.status == 404 && err.response.data.meta.secret) {\n              setTotpQr(err.response.data.meta);\n              openTotpQr();\n              return ResultType.success;\n            }\n            return ResultType.error;\n          }),\n      getReauthText\n    );\n  };\n\n  const possibleFactors = useMemo(() => {\n    return [\n      {\n        type: 'totp',\n        name: t`TOTP`,\n        description: t`Time-based One-Time Password`,\n        function: registerTotp,\n        used: usedFactors?.includes('totp')\n      },\n      {\n        type: 'recovery_codes',\n        name: t`Recovery Codes`,\n        description: t`One-Time pre-generated recovery codes`,\n        function: registerRecoveryCodes,\n        used: usedFactors?.includes('recovery_codes')\n      }\n    ].filter((factor) => {\n      return auth_config?.mfa?.supported_types.includes(factor.type);\n    });\n  }, [usedFactors, auth_config]);\n\n  const [totpError, setTotpError] = useState<string>('');\n\n  return (\n    <Stack>\n      <ReauthModal />\n      <StylishText size='md'>{t`Add Token`}</StylishText>\n      {possibleFactors.map((factor) => (\n        <Tooltip label={factor.description} key={factor.type}>\n          <Button\n            onClick={factor.function}\n            disabled={factor.used}\n            variant='outline'\n          >\n            {factor.name}\n          </Button>\n        </Tooltip>\n      ))}\n      <Modal\n        opened={totpQrOpen}\n        onClose={closeTotpQr}\n        title={<StylishText size='lg'>{t`Register TOTP Token`}</StylishText>}\n      >\n        <Stack>\n          <QrRegistrationForm\n            url={totpQr?.totp_url ?? ''}\n            secret={totpQr?.secret ?? ''}\n            value={value}\n            error={totpError}\n            setValue={setValue}\n          />\n          <Button\n            fullWidth\n            onClick={() =>\n              runActionWithFallback(\n                () =>\n                  authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'post', {\n                    code: value\n                  })\n                    .then(() => {\n                      setTotpError('');\n                      closeTotpQr();\n                      refetch();\n                      return ResultType.success;\n                    })\n                    .catch((error) => {\n                      const errorMsg = t`Error registering TOTP token`;\n\n                      setTotpError(\n                        error.response?.data?.errors[0]?.message ?? errorMsg\n                      );\n\n                      hideNotification('totp-error');\n                      showNotification({\n                        id: 'totp-error',\n                        title: t`Error`,\n                        message: errorMsg,\n                        color: 'red',\n                        icon: <IconExclamationCircle />\n                      });\n                      return ResultType.error;\n                    }),\n                getReauthText\n              )\n            }\n          >\n            <Trans>Submit</Trans>\n          </Button>\n        </Stack>\n      </Modal>\n    </Stack>\n  );\n}\n\nasync function runActionWithFallback(\n  action: () => Promise<ResultType>,\n  getReauthText: (props: any) => any\n) {\n  const { setAuthContext } = useServerApiState.getState();\n  const result = await action().catch((err) => {\n    setAuthContext(err.response.data?.data);\n    // check if we need to re-authenticate\n    if (err.status == 401) {\n      if (\n        err.response.data.data.flows.find(\n          (flow: any) => flow.id == FlowEnum.MfaReauthenticate\n        )\n      ) {\n        return ResultType.mfareauth;\n      } else if (\n        err.response.data.data.flows.find(\n          (flow: any) => flow.id == FlowEnum.Reauthenticate\n        )\n      ) {\n        return ResultType.reauth;\n      } else {\n        return ResultType.error;\n      }\n    } else {\n      return ResultType.error;\n    }\n  });\n  if (result == ResultType.mfareauth) {\n    authApi(apiUrl(ApiEndpoints.auth_mfa_reauthenticate), undefined, 'post', {\n      code: await getReauthText({\n        label: t`TOTP Code`,\n        name: 'TOTP',\n        description: t`Enter your TOTP or recovery code`\n      })\n    })\n      .then((response) => {\n        setAuthContext(response.data?.data);\n        action();\n      })\n      .catch((err) => {\n        setAuthContext(err.response.data?.data);\n      });\n  } else if (result == ResultType.reauth) {\n    authApi(apiUrl(ApiEndpoints.auth_reauthenticate), undefined, 'post', {\n      password: await getReauthText({\n        label: t`Password`,\n        name: 'password',\n        description: t`Enter your password`\n      })\n    })\n      .then((response) => {\n        setAuthContext(response.data?.data);\n        action();\n      })\n      .catch((err) => {\n        setAuthContext(err.response.data?.data);\n      });\n  }\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Badge, Group, Stack, Table } from '@mantine/core';\nimport { IconEdit, IconKey, IconUser } from '@tabler/icons-react';\nimport { useMemo } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { YesNoUndefinedButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport { useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { ActionDropdown } from '../../../../components/items/ActionDropdown';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { useEditApiFormModal } from '../../../../hooks/UseForm';\nimport { useUserState } from '../../../../states/UserState';\n\nexport function AccountDetailPanel() {\n  const navigate = useNavigate();\n\n  const [user, fetchUserState] = useUserState(\n    useShallow((state) => [state.user, state.fetchUserState])\n  );\n\n  const userFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      first_name: {},\n      last_name: {}\n    };\n  }, []);\n\n  const editAccount = useEditApiFormModal({\n    title: t`Edit Account Information`,\n    url: ApiEndpoints.user_me,\n    onFormSuccess: fetchUserState,\n    fields: userFields,\n    successMessage: t`Account details updated`\n  });\n\n  const profileFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      displayname: {},\n      position: {},\n      status: {},\n      location: {},\n      active: {},\n      contact: {},\n      type: {},\n      organisation: {},\n      primary_group: {}\n    };\n  }, []);\n\n  const editProfile = useEditApiFormModal({\n    title: t`Edit Profile Information`,\n    url: ApiEndpoints.user_profile,\n    onFormSuccess: fetchUserState,\n    fields: profileFields,\n    successMessage: t`Profile details updated`\n  });\n\n  const accountDetailFields = useMemo(\n    () => [\n      { label: t`Username`, value: user?.username },\n      { label: t`First Name`, value: user?.first_name },\n      { label: t`Last Name`, value: user?.last_name },\n      {\n        label: t`Active`,\n        value: <YesNoUndefinedButton value={user?.profile?.active} />\n      },\n      {\n        label: t`Staff Access`,\n        value: <YesNoUndefinedButton value={user?.is_staff} />\n      },\n      {\n        label: t`Superuser`,\n        value: <YesNoUndefinedButton value={user?.is_superuser} />\n      }\n    ],\n    [user]\n  );\n\n  const profileDetailFields = useMemo(\n    () => [\n      { label: t`Display Name`, value: user?.profile?.displayname },\n      { label: t`Position`, value: user?.profile?.position },\n      { label: t`Status`, value: user?.profile?.status },\n      { label: t`Location`, value: user?.profile?.location },\n      { label: t`Contact`, value: user?.profile?.contact },\n      { label: t`Type`, value: <Badge>{user?.profile?.type}</Badge> },\n      { label: t`Organisation`, value: user?.profile?.organisation },\n      { label: t`Primary Group`, value: user?.profile?.primary_group }\n    ],\n    [user]\n  );\n\n  return (\n    <>\n      {editAccount.modal}\n      {editProfile.modal}\n      <Stack gap='xs'>\n        <Group justify='space-between'>\n          <StylishText size='lg'>\n            <Trans>Account Details</Trans>\n          </StylishText>\n          <ActionDropdown\n            tooltip={t`Account Actions`}\n            icon={<IconUser />}\n            actions={[\n              {\n                name: t`Edit Account`,\n                icon: <IconEdit />,\n                tooltip: t`Edit Account Information`,\n                onClick: editAccount.open\n              },\n              {\n                name: t`Change Password`,\n                icon: <IconKey />,\n                tooltip: t`Change User Password`,\n                onClick: () => {\n                  navigate('/change-password');\n                }\n              }\n            ]}\n          />\n        </Group>\n        {renderDetailTable(accountDetailFields)}\n\n        <Group justify='space-between'>\n          <StylishText size='lg'>\n            <Trans>Profile Details</Trans>\n          </StylishText>\n          <ActionButton\n            text={t`Edit Profile`}\n            icon={<IconEdit />}\n            tooltip={t`Edit Profile Information`}\n            onClick={editProfile.open}\n            variant='light'\n          />\n        </Group>\n        {renderDetailTable(profileDetailFields)}\n      </Stack>\n    </>\n  );\n\n  function renderDetailTable(data: { label: string; value: any }[]) {\n    return (\n      <Table>\n        <Table.Tbody>\n          {data.map((item) => (\n            <Table.Tr key={item.label}>\n              <Table.Td>\n                <Trans>{item.label}</Trans>\n              </Table.Td>\n              <Table.Td>{item.value}</Table.Td>\n            </Table.Tr>\n          ))}\n        </Table.Tbody>\n      </Table>\n    );\n  }\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  ActionIcon,\n  Button,\n  ColorInput,\n  ColorPicker,\n  Container,\n  DEFAULT_THEME,\n  Group,\n  Loader,\n  Select,\n  Slider,\n  Table,\n  useMantineTheme\n} from '@mantine/core';\nimport { IconRestore } from '@tabler/icons-react';\nimport { useState } from 'react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport { ColorToggle } from '../../../../components/items/ColorToggle';\nimport { LanguageSelect } from '../../../../components/items/LanguageSelect';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { SizeMarks } from '../../../../defaults/defaults';\nimport { IS_DEV } from '../../../../main';\nimport { useLocalState } from '../../../../states/LocalState';\n\nfunction getLkp(color: string) {\n  return { [DEFAULT_THEME.colors[color][6]]: color };\n}\nconst LOOKUP = Object.assign(\n  {},\n  ...Object.keys(DEFAULT_THEME.colors).map((clr) => getLkp(clr))\n);\n\nexport function UserTheme({ height }: Readonly<{ height: number }>) {\n  const theme = useMantineTheme();\n  const [userTheme, setTheme, setLanguage] = useLocalState(\n    useShallow((state) => [state.userTheme, state.setTheme, state.setLanguage])\n  );\n\n  // radius\n  function getMark(value: number) {\n    const obj = SizeMarks.find((mark) => mark.value === value);\n    if (obj) return obj;\n    return SizeMarks[0];\n  }\n  function getDefaultRadius() {\n    const value = Number.parseInt(userTheme.radius.toString());\n    return SizeMarks.some((mark) => mark.value === value) ? value : 50;\n  }\n  const [radius, setRadius] = useState(getDefaultRadius());\n  function changeRadius(value: number) {\n    setRadius(value);\n    setTheme([{ key: 'radius', value: value.toString() }]);\n  }\n\n  return (\n    <Container w='100%' mih={height} p={0}>\n      <StylishText size='lg'>\n        <Trans>Display Settings</Trans>\n      </StylishText>\n      <Table>\n        <Table.Tbody>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Language</Trans>\n            </Table.Td>\n            <Table.Td>\n              <LanguageSelect width={200} />\n            </Table.Td>\n            <Table.Td>\n              {IS_DEV && (\n                <Button\n                  onClick={() => setLanguage('pseudo-LOCALE', true)}\n                  variant='light'\n                >\n                  <Trans>Use pseudo language</Trans>\n                </Button>\n              )}\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Color Mode</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <ColorToggle />\n              </Group>\n            </Table.Td>\n            <Table.Td />\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Highlight color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorPicker\n                format='hex'\n                onChange={(v) =>\n                  setTheme([{ key: 'primaryColor', value: LOOKUP[v] }])\n                }\n                withPicker={false}\n                swatches={Object.keys(LOOKUP)}\n              />\n            </Table.Td>\n            <Table.Td>\n              <Button color={theme.primaryColor} variant='light'>\n                <Trans>Example</Trans>\n              </Button>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>White color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorInput\n                aria-label='Color Picker White'\n                value={userTheme.whiteColor}\n                onChange={(v) => setTheme([{ key: 'whiteColor', value: v }])}\n              />\n            </Table.Td>\n            <Table.Td>\n              <ActionIcon\n                variant='default'\n                aria-label='Reset White Color'\n                onClick={() =>\n                  setTheme([{ key: 'whiteColor', value: '#FFFFFF' }])\n                }\n              >\n                <IconRestore />\n              </ActionIcon>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Black color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorInput\n                aria-label='Color Picker Black'\n                value={userTheme.blackColor}\n                onChange={(v) => setTheme([{ key: 'blackColor', value: v }])}\n              />\n            </Table.Td>\n            <Table.Td>\n              <ActionIcon\n                variant='default'\n                aria-label='Reset Black Color'\n                onClick={() =>\n                  setTheme([{ key: 'blackColor', value: '#000000' }])\n                }\n              >\n                <IconRestore />\n              </ActionIcon>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Border Radius</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Slider\n                label={(val) => getMark(val).label}\n                defaultValue={50}\n                step={25}\n                marks={SizeMarks}\n                value={radius}\n                onChange={changeRadius}\n                mb={18}\n              />\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Loader</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <Select\n                  aria-label='Loader Type Selector'\n                  data={[\n                    { value: 'bars', label: t`Bars` },\n                    { value: 'oval', label: t`Oval` },\n                    { value: 'dots', label: t`Dots` }\n                  ]}\n                  value={userTheme.loader}\n                  onChange={(v) => {\n                    if (v != null) setTheme([{ key: 'loader', value: v }]);\n                  }}\n                />\n              </Group>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <Loader type={userTheme.loader} mah={16} size='sm' />\n              </Group>\n            </Table.Td>\n          </Table.Tr>\n        </Table.Tbody>\n      </Table>\n    </Container>\n  );\n}\n","import { Container, Grid, SimpleGrid } from '@mantine/core';\n\nimport { AccountDetailPanel } from './AccountDetailPanel';\nimport { UserTheme } from './UserThemePanel';\n\nexport function AccountContent() {\n  const PRIMARY_COL_HEIGHT = 300;\n  const SECONDARY_COL_HEIGHT = PRIMARY_COL_HEIGHT / 2 - 8;\n\n  return (\n    <div>\n      <SimpleGrid cols={{ base: 1, md: 2 }} spacing='md'>\n        <Container w='100%'>\n          <AccountDetailPanel />\n        </Container>\n        <Grid gutter='md'>\n          <Grid.Col>\n            <UserTheme height={SECONDARY_COL_HEIGHT} />\n          </Grid.Col>\n        </Grid>\n      </SimpleGrid>\n    </div>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Skeleton, Stack } from '@mantine/core';\nimport {\n  IconBellCog,\n  IconDeviceDesktop,\n  IconFileAnalytics,\n  IconLock,\n  IconPlugConnected,\n  IconSearch,\n  IconUserCircle\n} from '@tabler/icons-react';\nimport { lazy, useMemo } from 'react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport PageTitle from '../../../components/nav/PageTitle';\nimport { SettingsHeader } from '../../../components/nav/SettingsHeader';\nimport type { PanelType } from '../../../components/panels/Panel';\nimport { PanelGroup } from '../../../components/panels/PanelGroup';\nimport { UserSettingList } from '../../../components/settings/SettingList';\nimport { Loadable } from '../../../functions/loading';\nimport { useUserState } from '../../../states/UserState';\nimport { SecurityContent } from './AccountSettings/SecurityContent';\nimport { AccountContent } from './AccountSettings/UserPanel';\n\nconst PluginSettingsGroup = Loadable(\n  lazy(() => import('./PluginSettingsGroup'))\n);\n\n/**\n * User settings page\n */\nexport default function UserSettings() {\n  const [user, isLoggedIn] = useUserState(\n    useShallow((state) => [state.user, state.isLoggedIn])\n  );\n\n  const userSettingsPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'account',\n        label: t`Account`,\n        icon: <IconUserCircle />,\n        content: <AccountContent />\n      },\n      {\n        name: 'security',\n        label: t`Security`,\n        icon: <IconLock />,\n        content: <SecurityContent />\n      },\n      {\n        name: 'display',\n        label: t`Display Options`,\n        icon: <IconDeviceDesktop />,\n        content: (\n          <UserSettingList\n            keys={[\n              'ICONS_IN_NAVBAR',\n              'STICKY_HEADER',\n              'STICKY_TABLE_HEADER',\n              'SHOW_SPOTLIGHT',\n              'DATE_DISPLAY_FORMAT',\n              'FORMS_CLOSE_USING_ESCAPE',\n              'DISPLAY_STOCKTAKE_TAB',\n              'ENABLE_LAST_BREADCRUMB',\n              'SHOW_FULL_LOCATION_IN_TABLES',\n              'SHOW_FULL_CATEGORY_IN_TABLES'\n            ]}\n          />\n        )\n      },\n      {\n        name: 'search',\n        label: t`Search`,\n        icon: <IconSearch />,\n        content: (\n          <UserSettingList\n            keys={[\n              'SEARCH_WHOLE',\n              'SEARCH_REGEX',\n              'SEARCH_NOTES',\n              'SEARCH_PREVIEW_RESULTS',\n              'SEARCH_PREVIEW_SHOW_PARTS',\n              'SEARCH_HIDE_INACTIVE_PARTS',\n              'SEARCH_PREVIEW_SHOW_SUPPLIER_PARTS',\n              'SEARCH_PREVIEW_SHOW_MANUFACTURER_PARTS',\n              'SEARCH_PREVIEW_SHOW_CATEGORIES',\n              'SEARCH_PREVIEW_SHOW_STOCK',\n              'SEARCH_PREVIEW_HIDE_UNAVAILABLE_STOCK',\n              'SEARCH_PREVIEW_SHOW_LOCATIONS',\n              'SEARCH_PREVIEW_SHOW_COMPANIES',\n              'SEARCH_PREVIEW_SHOW_BUILD_ORDERS',\n              'SEARCH_PREVIEW_SHOW_PURCHASE_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_PURCHASE_ORDERS',\n              'SEARCH_PREVIEW_SHOW_SALES_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_SALES_ORDERS',\n              'SEARCH_PREVIEW_SHOW_SALES_ORDER_SHIPMENTS',\n              'SEARCH_PREVIEW_SHOW_RETURN_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_RETURN_ORDERS'\n            ]}\n          />\n        )\n      },\n      {\n        name: 'notifications',\n        label: t`Notifications`,\n        icon: <IconBellCog />,\n        content: (\n          <PluginSettingsGroup\n            mixin='notification'\n            global={false}\n            message={t`The settings below are specific to each available notification method`}\n          />\n        )\n      },\n      {\n        name: 'reporting',\n        label: t`Reporting`,\n        icon: <IconFileAnalytics />,\n        content: (\n          <UserSettingList\n            keys={['REPORT_INLINE', 'LABEL_INLINE', 'LABEL_DEFAULT_PRINTER']}\n          />\n        )\n      },\n      {\n        name: 'plugins',\n        label: t`Plugin Settings`,\n        icon: <IconPlugConnected />,\n        content: <PluginSettingsGroup global={false} />\n      }\n    ];\n  }, []);\n\n  if (!isLoggedIn()) {\n    return <Skeleton />;\n  }\n\n  return (\n    <>\n      <PageTitle title={t`User Settings`} />\n      <Stack gap='xs'>\n        <SettingsHeader\n          label='user'\n          title={t`Account Settings`}\n          subtitle={\n            user?.first_name && user?.last_name\n              ? `${user?.first_name} ${user?.last_name}`\n              : null\n          }\n          shorthand={user?.username || ''}\n        />\n        <PanelGroup\n          pageKey='user-settings'\n          panels={userSettingsPanels}\n          model='usersettings'\n          id={null}\n        />\n      </Stack>\n    </>\n  );\n}\n"],"file":"assets/UserSettings-cXxn4PbR.js"}
