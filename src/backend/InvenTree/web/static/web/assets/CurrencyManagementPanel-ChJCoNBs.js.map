{"version":3,"file":"CurrencyManagementPanel-ChJCoNBs.js","sources":["../../../../../../frontend/src/pages/Index/Settings/AdminCenter/CurrencyManagementPanel.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Divider, Stack } from '@mantine/core';\nimport { showNotification } from '@mantine/notifications';\nimport { IconReload } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { api } from '../../../../App';\nimport { FactCollection } from '../../../../components/settings/FactCollection';\nimport { GlobalSettingList } from '../../../../components/settings/SettingList';\nimport { showApiErrorMessage } from '../../../../functions/notifications';\nimport { useTable } from '../../../../hooks/UseTable';\nimport { InvenTreeTable } from '../../../../tables/InvenTreeTable';\n\n/*\n * Table for displaying available currencies\n */\nexport function CurrencyTable({\n  setInfo\n}: Readonly<{ setInfo: (info: any) => void }>) {\n  const table = useTable('currency', 'currency');\n  const columns = useMemo(() => {\n    return [\n      {\n        accessor: 'currency',\n        title: t`Currency`,\n        switchable: false\n      },\n      {\n        accessor: 'rate',\n        title: t`Rate`,\n        switchable: false\n      }\n    ];\n  }, []);\n\n  const refreshCurrencies = useCallback(() => {\n    api\n      .post(apiUrl(ApiEndpoints.currency_refresh), {})\n      .then(() => {\n        table.refreshTable();\n        showNotification({\n          title: t`Success`,\n          message: t`Exchange rates updated`,\n          color: 'green'\n        });\n      })\n      .catch((error) => {\n        showApiErrorMessage({\n          error: error,\n          title: t`Exchange rate update error`\n        });\n      });\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <ActionButton\n        key='refresh'\n        onClick={refreshCurrencies}\n        tooltip={t`Refresh currency exchange rates`}\n        icon={<IconReload />}\n      />\n    ];\n  }, []);\n\n  return (\n    <InvenTreeTable\n      url={apiUrl(ApiEndpoints.currency_list)}\n      tableState={table}\n      columns={columns}\n      props={{\n        tableActions: tableActions,\n        dataFormatter: (data: any) => {\n          setInfo(data);\n          const rates = data.exchange_rates ?? {};\n\n          return Object.entries(rates).map(([currency, rate]) => {\n            return {\n              currency: currency,\n              rate: rate\n            };\n          });\n        }\n      }}\n    />\n  );\n}\n\nexport default function CurrencyManagementPanel() {\n  const [info, setInfo] = useState<any>({});\n\n  return (\n    <Stack gap='xs'>\n      <FactCollection\n        items={[\n          { title: t`Last fetched`, value: info?.updated },\n          { title: t`Base currency`, value: info?.base_currency }\n        ]}\n      />\n      <Divider />\n      <CurrencyTable setInfo={setInfo} />\n      <Divider />\n      <GlobalSettingList\n        keys={[\n          'INVENTREE_DEFAULT_CURRENCY',\n          'CURRENCY_UPDATE_PLUGIN',\n          'CURRENCY_UPDATE_INTERVAL'\n        ]}\n      />\n    </Stack>\n  );\n}\n"],"names":["CurrencyTable","setInfo","table","useTable","columns","useMemo","accessor","title","_i18n","_","id","switchable","refreshCurrencies","useCallback","post","apiUrl","ApiEndpoints","currency_refresh","then","refreshTable","showNotification","message","color","catch","error","showApiErrorMessage","tableActions","jsx","ActionButton","IconReload","InvenTreeTable","currency_list","dataFormatter","data","rates","exchange_rates","Object","entries","map","currency","rate","CurrencyManagementPanel","info","useState","jsxs","Stack","FactCollection","value","updated","base_currency","Divider","GlobalSettingList"],"mappings":"qhBAmBO,SAASA,EAAc,CAC5BC,QAAAA,CAC0C,EAAG,CACvCC,MAAAA,EAAQC,EAAS,WAAY,UAAU,EACvCC,EAAUC,EAAAA,QAAQ,IACf,CACL,CACEC,SAAU,WACVC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBC,WAAY,EAAA,EAEd,CACEL,SAAU,OACVC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAO,EACdC,WAAY,EAAA,CACb,EAEF,EAAE,EAECC,EAAoBC,EAAAA,YAAY,IAAM,CAEvCC,EAAAA,KAAKC,EAAOC,EAAaC,gBAAgB,EAAG,CAAE,CAAA,EAC9CC,KAAK,IAAM,CACVhB,EAAMiB,aAAa,EACFC,EAAA,CACfb,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBW,QAAOb,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAyB,EAClCY,MAAO,OAAA,CACR,CAAA,CACF,EACAC,MAAiBC,GAAA,CACIC,EAAA,CAClBD,MAAAA,EACAjB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA4B,CAAC,CACrC,CAAA,CACF,CACL,EAAG,EAAE,EAECgB,EAAerB,EAAAA,QAAQ,IACpB,CACJsB,EAAA,IAAAC,EAAA,CAEC,QAAShB,EACT,QAAQJ,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiC,EAC1C,KAAMiB,EAAAA,IAACE,EAAU,CAAA,CAAA,CAAA,EAHb,SAGiB,CACrB,EAEH,EAAE,EAGH,OAAAF,MAACG,EACC,CAAA,IAAKf,EAAOC,EAAae,aAAa,EACtC,WAAY7B,EACZ,QAAAE,EACA,MAAO,CACLsB,aAAAA,EACAM,cAAgBC,GAAc,CAC5BhC,EAAQgC,CAAI,EACNC,MAAAA,EAAQD,EAAKE,gBAAkB,CAAC,EAE/BC,OAAAA,OAAOC,QAAQH,CAAK,EAAEI,IAAI,CAAC,CAACC,EAAUC,CAAI,KACxC,CACLD,SAAAA,EACAC,KAAAA,CACF,EACD,CAAA,CACH,EAEF,CAEN,CAEA,SAAwBC,GAA0B,CAChD,KAAM,CAACC,EAAMzC,CAAO,EAAI0C,EAAAA,SAAc,CAAA,CAAE,EAGtC,OAAAC,EAAA,KAACC,EAAM,CAAA,IAAI,KACT,SAAA,CAAClB,MAAAmB,EAAA,CACC,MAAO,CACL,CAAEvC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EAAEqC,MAAOL,GAAAA,YAAAA,EAAMM,OAAAA,EACvC,CAAEzC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EAAEqC,MAAOL,GAAAA,YAAAA,EAAMO,aAAe,CAAA,EACvD,QAEHC,EAAO,EAAA,EACRvB,MAAC3B,GAAc,QAAAC,EAAiB,QAC/BiD,EAAO,EAAA,QACPC,EACC,CAAA,KAAM,CACJ,6BACA,yBACA,0BAA0B,CAC1B,CAAA,CAAA,EAEN,CAEJ"}
