{"version":3,"file":"CommonForms-CCxz_oyT.js","sources":["../../../../../../frontend/src/forms/CommonForms.tsx"],"sourcesContent":["import { IconUsers } from '@tabler/icons-react';\nimport { useMemo, useState } from 'react';\n\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type {\n  StatusCodeInterface,\n  StatusCodeListInterface\n} from '../components/render/StatusRenderer';\nimport { useGlobalStatusState } from '../states/GlobalStatusState';\n\nexport function projectCodeFields(): ApiFormFieldSet {\n  return {\n    code: {},\n    description: {},\n    responsible: {\n      icon: <IconUsers />\n    }\n  };\n}\n\nexport function useCustomStateFields(): ApiFormFieldSet {\n  // Status codes\n  const statusCodes = useGlobalStatusState();\n\n  // Selected base status class\n  const [statusClass, setStatusClass] = useState<string>('');\n\n  // Construct a list of status options based on the selected status class\n  const statusOptions: any[] = useMemo(() => {\n    const options: any[] = [];\n\n    const valuesList = Object.values(statusCodes.status ?? {}).find(\n      (value: StatusCodeListInterface) => value.status_class === statusClass\n    );\n\n    Object.values(valuesList?.values ?? {}).forEach(\n      (value: StatusCodeInterface) => {\n        options.push({\n          value: value.key,\n          display_name: value.label\n        });\n      }\n    );\n\n    return options;\n  }, [statusCodes, statusClass]);\n\n  return useMemo(() => {\n    return {\n      reference_status: {\n        onValueChange(value) {\n          setStatusClass(value);\n        }\n      },\n      logical_key: {\n        field_type: 'choice',\n        choices: statusOptions\n      },\n      key: {},\n      name: {},\n      label: {},\n      color: {},\n      model: {}\n    };\n  }, [statusOptions]);\n}\n\nexport function customUnitsFields(): ApiFormFieldSet {\n  return {\n    name: {},\n    definition: {},\n    symbol: {}\n  };\n}\n\nexport function extraLineItemFields(): ApiFormFieldSet {\n  return {\n    order: {\n      hidden: true\n    },\n    reference: {},\n    description: {},\n    quantity: {},\n    price: {},\n    price_currency: {},\n    notes: {},\n    link: {}\n  };\n}\n"],"names":["projectCodeFields","code","description","responsible","icon","IconUsers","useCustomStateFields","statusCodes","useGlobalStatusState","statusClass","setStatusClass","useState","statusOptions","useMemo","options","valuesList","Object","values","status","find","value","status_class","forEach","push","key","display_name","label","reference_status","onValueChange","logical_key","field_type","choices","name","color","model","customUnitsFields","definition","symbol","extraLineItemFields","order","hidden","reference","quantity","price","price_currency","notes","link"],"mappings":"gGAUO,SAASA,GAAqC,CAC5C,MAAA,CACLC,KAAM,CAAC,EACPC,YAAa,CAAC,EACdC,YAAa,CACXC,WAAOC,EAAS,CAAA,CAAA,CAAA,CAEpB,CACF,CAEO,SAASC,GAAwC,CAEtD,MAAMC,EAAcC,EAAqB,EAGnC,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAiB,EAAE,EAGnDC,EAAuBC,EAAAA,QAAQ,IAAM,CACzC,MAAMC,EAAiB,CAAE,EAEnBC,EAAaC,OAAOC,OAAOV,EAAYW,QAAU,CAAA,CAAE,EAAEC,KACxDC,GAAmCA,EAAMC,eAAiBZ,CAC7D,EAEOQ,cAAAA,QAAOF,GAAAA,YAAAA,EAAYE,SAAU,CAAA,CAAE,EAAEK,QACrCF,GAA+B,CAC9BN,EAAQS,KAAK,CACXH,MAAOA,EAAMI,IACbC,aAAcL,EAAMM,KAAAA,CACrB,CAAA,CAEL,EAEOZ,CAAAA,EACN,CAACP,EAAaE,CAAW,CAAC,EAE7B,OAAOI,UAAQ,KACN,CACLc,iBAAkB,CAChBC,cAAcR,EAAO,CACnBV,EAAeU,CAAK,CAAA,CAExB,EACAS,YAAa,CACXC,WAAY,SACZC,QAASnB,CACX,EACAY,IAAK,CAAC,EACNQ,KAAM,CAAC,EACPN,MAAO,CAAC,EACRO,MAAO,CAAC,EACRC,MAAO,CAAA,CACT,GACC,CAACtB,CAAa,CAAC,CACpB,CAEO,SAASuB,GAAqC,CAC5C,MAAA,CACLH,KAAM,CAAC,EACPI,WAAY,CAAC,EACbC,OAAQ,CAAA,CACV,CACF,CAEO,SAASC,GAAuC,CAC9C,MAAA,CACLC,MAAO,CACLC,OAAQ,EACV,EACAC,UAAW,CAAC,EACZvC,YAAa,CAAC,EACdwC,SAAU,CAAC,EACXC,MAAO,CAAC,EACRC,eAAgB,CAAC,EACjBC,MAAO,CAAC,EACRC,KAAM,CAAA,CACR,CACF"}
