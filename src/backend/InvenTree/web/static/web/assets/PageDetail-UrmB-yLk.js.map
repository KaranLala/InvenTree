{"version":3,"file":"PageDetail-UrmB-yLk.js","sources":["../../../../../../frontend/src/components/nav/BreadcrumbList.tsx","../../../../../../frontend/src/components/nav/PageDetail.tsx"],"sourcesContent":["import {\n  ActionIcon,\n  Anchor,\n  Breadcrumbs,\n  Group,\n  Paper,\n  Text\n} from '@mantine/core';\nimport { IconMenu2 } from '@tabler/icons-react';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { identifierString } from '@lib/functions/Conversion';\nimport { navigateToLink } from '@lib/functions/Navigation';\n\nexport type Breadcrumb = {\n  icon?: React.ReactNode;\n  name: string;\n  url: string;\n};\n\n/**\n * Construct a breadcrumb list, with integrated navigation.\n */\nexport function BreadcrumbList({\n  breadcrumbs,\n  navCallback\n}: Readonly<{\n  breadcrumbs: Breadcrumb[];\n  navCallback?: () => void;\n}>) {\n  const navigate = useNavigate();\n\n  const elements = useMemo(() => {\n    // Limit to 7 active elements\n    if (breadcrumbs.length > 7) {\n      return [\n        ...breadcrumbs.slice(0, 3),\n        { name: '...', url: '#' },\n        ...breadcrumbs.slice(-3)\n      ];\n    } else {\n      return breadcrumbs;\n    }\n  }, [breadcrumbs]);\n\n  return (\n    <Paper p='7' radius='xs' shadow='xs'>\n      <Group gap='xs'>\n        {navCallback && (\n          <ActionIcon\n            key='nav-breadcrumb-action'\n            aria-label='nav-breadcrumb-action'\n            onClick={navCallback}\n            variant='transparent'\n          >\n            <IconMenu2 />\n          </ActionIcon>\n        )}\n        <Breadcrumbs key='breadcrumbs' separator='>'>\n          {elements.map((breadcrumb, index) => {\n            return (\n              <Anchor\n                key={`${index}-${breadcrumb.name}`}\n                aria-label={`breadcrumb-${index}-${identifierString(\n                  breadcrumb.name\n                )}`}\n                onClick={(event: any) =>\n                  breadcrumb.url &&\n                  navigateToLink(breadcrumb.url, navigate, event)\n                }\n              >\n                <Group gap={4}>\n                  {breadcrumb.icon}\n                  <Text size='sm'>{breadcrumb.name}</Text>\n                </Group>\n              </Anchor>\n            );\n          })}\n        </Breadcrumbs>\n      </Group>\n    </Paper>\n  );\n}\n","import { Group, Paper, Space, Stack, Text } from '@mantine/core';\nimport { useHotkeys } from '@mantine/hooks';\n\nimport { Fragment, type ReactNode, useMemo } from 'react';\nimport { shortenString } from '../../functions/tables';\nimport { useUserSettingsState } from '../../states/SettingsStates';\nimport { ApiImage } from '../images/ApiImage';\nimport { StylishText } from '../items/StylishText';\nimport { type Breadcrumb, BreadcrumbList } from './BreadcrumbList';\nimport PageTitle from './PageTitle';\n\ninterface PageDetailInterface {\n  title?: string;\n  icon?: ReactNode;\n  subtitle?: string;\n  imageUrl?: string;\n  badges?: ReactNode[];\n  breadcrumbs?: Breadcrumb[];\n  lastCrumb?: Breadcrumb[];\n  breadcrumbAction?: () => void;\n  actions?: ReactNode[];\n  editAction?: () => void;\n  editEnabled?: boolean;\n}\n\n/**\n * Construct a \"standard\" page detail for common display between pages.\n *\n * @param breadcrumbs - The breadcrumbs to display (optional)\n * @param\n */\nexport function PageDetail({\n  title,\n  icon,\n  subtitle,\n  badges,\n  imageUrl,\n  breadcrumbs,\n  lastCrumb: last_crumb,\n  breadcrumbAction,\n  actions,\n  editAction,\n  editEnabled\n}: Readonly<PageDetailInterface>) {\n  const userSettings = useUserSettingsState();\n  useHotkeys([\n    [\n      'mod+E',\n      () => {\n        if (editEnabled ?? true) {\n          editAction?.();\n        }\n      }\n    ]\n  ]);\n\n  const pageTitleString = useMemo(\n    () =>\n      shortenString({\n        str: title,\n        len: 50\n      }),\n    [title]\n  );\n\n  const description = useMemo(\n    () =>\n      shortenString({\n        str: subtitle,\n        len: 75\n      }),\n    [subtitle]\n  );\n\n  // breadcrumb caching\n  const computedBreadcrumbs = useMemo(() => {\n    if (userSettings.isSet('ENABLE_LAST_BREADCRUMB', false)) {\n      return [...(breadcrumbs ?? []), ...(last_crumb ?? [])];\n    } else {\n      return breadcrumbs;\n    }\n  }, [breadcrumbs, last_crumb, userSettings]);\n\n  return (\n    <>\n      <PageTitle title={pageTitleString} />\n      <Stack gap='xs'>\n        {computedBreadcrumbs && computedBreadcrumbs.length > 0 && (\n          <BreadcrumbList\n            navCallback={breadcrumbAction}\n            breadcrumbs={computedBreadcrumbs}\n          />\n        )}\n        <Paper p='xs' radius='xs' shadow='xs'>\n          <Group\n            justify='space-between'\n            gap='xs'\n            wrap='nowrap'\n            align='flex-start'\n          >\n            <Group\n              justify='space-between'\n              wrap='nowrap'\n              align='flex-start'\n              style={{ flexGrow: 1 }}\n            >\n              <Group justify='start' wrap='nowrap' align='flex-start'>\n                {imageUrl && (\n                  <ApiImage\n                    src={imageUrl}\n                    radius='sm'\n                    miw={42}\n                    mah={42}\n                    maw={42}\n                    visibleFrom='sm'\n                  />\n                )}\n                <Stack gap='xs'>\n                  {title && <StylishText size='lg'>{title}</StylishText>}\n                  {subtitle && (\n                    <Group gap='xs'>\n                      {icon}\n                      <Text size='sm'>{description}</Text>\n                    </Group>\n                  )}\n                </Stack>\n              </Group>\n              {badges && (\n                <Group justify='flex-end' gap='xs' align='center'>\n                  {badges?.map((badge, idx) => (\n                    <Fragment key={idx}>{badge}</Fragment>\n                  ))}\n                  <Space w='md' />\n                </Group>\n              )}\n            </Group>\n            {actions && (\n              <Group gap={5} justify='right' wrap='nowrap' align='flex-start'>\n                {actions.map((action, idx) => (\n                  <Fragment key={idx}>{action}</Fragment>\n                ))}\n              </Group>\n            )}\n          </Group>\n        </Paper>\n      </Stack>\n    </>\n  );\n}\n"],"names":["BreadcrumbList","breadcrumbs","navCallback","navigate","useNavigate","elements","useMemo","length","slice","name","url","jsx","Paper","jsxs","Group","ActionIcon","IconMenu2","Breadcrumbs","map","breadcrumb","index","Anchor","identifierString","event","navigateToLink","icon","Text","PageDetail","title","subtitle","badges","imageUrl","lastCrumb","last_crumb","breadcrumbAction","actions","editAction","editEnabled","userSettings","useUserSettingsState","useHotkeys","pageTitleString","shortenString","str","len","description","computedBreadcrumbs","isSet","Fragment","PageTitle","Stack","flexGrow","ApiImage","StylishText","badge","idx","Space","action"],"mappings":"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"}
