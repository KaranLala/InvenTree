{"version":3,"file":"StockItemTable-BNURu3dq.js","sources":["../../../../../../frontend/src/tables/stock/StockItemTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, Text } from '@mantine/core';\nimport { type ReactNode, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport {\n  formatCurrency,\n  formatDecimal,\n  formatPriceRange\n} from '../../defaults/formatters';\nimport {\n  type StockOperationProps,\n  useStockFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport {\n  DateColumn,\n  DescriptionColumn,\n  LocationColumn,\n  PartColumn,\n  StatusColumn\n} from '../ColumnRenderers';\nimport {\n  BatchFilter,\n  HasBatchCodeFilter,\n  IncludeVariantsFilter,\n  IsSerializedFilter,\n  ManufacturerFilter,\n  SerialFilter,\n  SerialGTEFilter,\n  SerialLTEFilter,\n  StatusFilterOptions,\n  SupplierFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * Construct a list of columns for the stock item table\n */\nfunction stockItemTableColumns({\n  showLocation,\n  showPricing\n}: {\n  showLocation: boolean;\n  showPricing: boolean;\n}): TableColumn[] {\n  return [\n    {\n      accessor: 'part',\n      sortable: true,\n      render: (record: any) => PartColumn({ part: record?.part_detail })\n    },\n    {\n      accessor: 'part_detail.IPN',\n      title: t`IPN`,\n      sortable: true\n    },\n    {\n      accessor: 'part_detail.revision',\n      title: t`Revision`,\n      sortable: true,\n      defaultVisible: false\n    },\n    DescriptionColumn({\n      accessor: 'part_detail.description'\n    }),\n    {\n      accessor: 'quantity',\n      ordering: 'stock',\n      sortable: true,\n      title: t`Stock`,\n      render: (record: any) => {\n        // TODO: Push this out into a custom renderer\n        const quantity = record?.quantity ?? 0;\n        const allocated = record?.allocated ?? 0;\n        const available = quantity - allocated;\n        let text = formatDecimal(quantity);\n        const part = record?.part_detail ?? {};\n        const extra: ReactNode[] = [];\n        let color = undefined;\n\n        if (record.serial && quantity == 1) {\n          text = `# ${record.serial}`;\n        }\n\n        if (record.is_building) {\n          color = 'blue';\n          extra.push(\n            <Text\n              key='production'\n              size='sm'\n            >{t`This stock item is in production`}</Text>\n          );\n        } else if (record.sales_order) {\n          extra.push(\n            <Text\n              key='sales-order'\n              size='sm'\n            >{t`This stock item has been assigned to a sales order`}</Text>\n          );\n        } else if (record.customer) {\n          extra.push(\n            <Text\n              key='customer'\n              size='sm'\n            >{t`This stock item has been assigned to a customer`}</Text>\n          );\n        } else if (record.belongs_to) {\n          extra.push(\n            <Text\n              key='belongs-to'\n              size='sm'\n            >{t`This stock item is installed in another stock item`}</Text>\n          );\n        } else if (record.consumed_by) {\n          extra.push(\n            <Text\n              key='consumed-by'\n              size='sm'\n            >{t`This stock item has been consumed by a build order`}</Text>\n          );\n        } else if (!record.in_stock) {\n          extra.push(\n            <Text\n              key='unavailable'\n              size='sm'\n            >{t`This stock item is unavailable`}</Text>\n          );\n        }\n\n        if (record.expired) {\n          extra.push(\n            <Text\n              key='expired'\n              size='sm'\n            >{t`This stock item has expired`}</Text>\n          );\n        } else if (record.stale) {\n          extra.push(\n            <Text key='stale' size='sm'>{t`This stock item is stale`}</Text>\n          );\n        }\n\n        if (record.in_stock) {\n          if (allocated > 0) {\n            if (allocated >= quantity) {\n              color = 'orange';\n              extra.push(\n                <Text\n                  key='fully-allocated'\n                  size='sm'\n                >{t`This stock item is fully allocated`}</Text>\n              );\n            } else {\n              extra.push(\n                <Text\n                  key='partially-allocated'\n                  size='sm'\n                >{t`This stock item is partially allocated`}</Text>\n              );\n            }\n          }\n\n          if (available != quantity) {\n            if (available > 0) {\n              extra.push(\n                <Text key='available' size='sm' c='orange'>\n                  {`${t`Available`}: ${formatDecimal(available)}`}\n                </Text>\n              );\n            } else {\n              extra.push(\n                <Text\n                  key='no-stock'\n                  size='sm'\n                  c='red'\n                >{t`No stock available`}</Text>\n              );\n            }\n          }\n\n          if (quantity <= 0) {\n            extra.push(\n              <Text\n                key='depleted'\n                size='sm'\n              >{t`This stock item has been depleted`}</Text>\n            );\n          }\n        }\n\n        if (!record.in_stock) {\n          color = 'red';\n        }\n\n        return (\n          <TableHoverCard\n            value={\n              <Group gap='xs' justify='left' wrap='nowrap'>\n                <Text c={color}>{text}</Text>\n                {part.units && (\n                  <Text size='xs' c={color}>\n                    [{part.units}]\n                  </Text>\n                )}\n              </Group>\n            }\n            title={t`Stock Information`}\n            extra={extra}\n          />\n        );\n      }\n    },\n    StatusColumn({ model: ModelType.stockitem }),\n    {\n      accessor: 'batch',\n      sortable: true\n    },\n    LocationColumn({\n      hidden: !showLocation,\n      accessor: 'location_detail'\n    }),\n    {\n      accessor: 'purchase_order',\n      title: t`Purchase Order`,\n      defaultVisible: false,\n      render: (record: any) => {\n        return record.purchase_order_reference;\n      }\n    },\n    {\n      accessor: 'SKU',\n      title: t`Supplier Part`,\n      sortable: true,\n      defaultVisible: false\n    },\n    {\n      accessor: 'MPN',\n      title: t`Manufacturer Part`,\n      sortable: true,\n      defaultVisible: false\n    },\n    {\n      accessor: 'purchase_price',\n      title: t`Unit Price`,\n      sortable: true,\n      switchable: true,\n      hidden: !showPricing,\n      defaultVisible: false,\n      render: (record: any) =>\n        formatCurrency(record.purchase_price, {\n          currency: record.purchase_price_currency\n        })\n    },\n    {\n      accessor: 'stock_value',\n      title: t`Stock Value`,\n      sortable: false,\n      hidden: !showPricing,\n      render: (record: any) => {\n        const min_price =\n          record.purchase_price || record.part_detail?.pricing_min;\n        const max_price =\n          record.purchase_price || record.part_detail?.pricing_max;\n        const currency = record.purchase_price_currency || undefined;\n\n        return formatPriceRange(min_price, max_price, {\n          currency: currency,\n          multiplier: record.quantity\n        });\n      }\n    },\n    {\n      accessor: 'packaging',\n      sortable: true,\n      defaultVisible: false\n    },\n\n    DateColumn({\n      title: t`Expiry Date`,\n      accessor: 'expiry_date',\n      hidden: !useGlobalSettingsState.getState().isSet('STOCK_ENABLE_EXPIRY'),\n      defaultVisible: false\n    }),\n    DateColumn({\n      title: t`Last Updated`,\n      accessor: 'updated'\n    }),\n    DateColumn({\n      accessor: 'stocktake_date',\n      title: t`Stocktake Date`,\n      sortable: true\n    })\n  ];\n}\n\n/**\n * Construct a list of available filters for the stock item table\n */\nfunction stockItemTableFilters({\n  enableExpiry\n}: {\n  enableExpiry: boolean;\n}): TableFilter[] {\n  return [\n    {\n      name: 'active',\n      label: t`Active`,\n      description: t`Show stock for active parts`\n    },\n    {\n      name: 'status',\n      label: t`Status`,\n      description: t`Filter by stock status`,\n      choiceFunction: StatusFilterOptions(ModelType.stockitem)\n    },\n    {\n      name: 'assembly',\n      label: t`Assembly`,\n      description: t`Show stock for assembled parts`\n    },\n    {\n      name: 'allocated',\n      label: t`Allocated`,\n      description: t`Show items which have been allocated`\n    },\n    {\n      name: 'available',\n      label: t`Available`,\n      description: t`Show items which are available`\n    },\n    {\n      name: 'cascade',\n      label: t`Include Sublocations`,\n      description: t`Include stock in sublocations`\n    },\n    {\n      name: 'depleted',\n      label: t`Depleted`,\n      description: t`Show depleted stock items`\n    },\n    {\n      name: 'in_stock',\n      label: t`In Stock`,\n      description: t`Show items which are in stock`\n    },\n    {\n      name: 'is_building',\n      label: t`In Production`,\n      description: t`Show items which are in production`\n    },\n    IncludeVariantsFilter(),\n    SupplierFilter(),\n    ManufacturerFilter(),\n    {\n      name: 'consumed',\n      label: t`Consumed`,\n      description: t`Show items which have been consumed by a build order`\n    },\n    {\n      name: 'installed',\n      label: t`Installed`,\n      description: t`Show stock items which are installed in other items`\n    },\n    {\n      name: 'sent_to_customer',\n      label: t`Sent to Customer`,\n      description: t`Show items which have been sent to a customer`\n    },\n    HasBatchCodeFilter(),\n    BatchFilter(),\n    IsSerializedFilter(),\n    SerialFilter(),\n    SerialLTEFilter(),\n    SerialGTEFilter(),\n    {\n      name: 'tracked',\n      label: t`Tracked`,\n      description: t`Show tracked items`\n    },\n    {\n      name: 'has_purchase_price',\n      label: t`Has Purchase Price`,\n      description: t`Show items which have a purchase price`\n    },\n    {\n      name: 'expired',\n      label: t`Expired`,\n      description: t`Show items which have expired`,\n      active: enableExpiry\n    },\n    {\n      name: 'stale',\n      label: t`Stale`,\n      description: t`Show items which are stale`,\n      active: enableExpiry\n    },\n    {\n      name: 'expiry_before',\n      label: t`Expired Before`,\n      description: t`Show items which expired before this date`,\n      type: 'date',\n      active: enableExpiry\n    },\n    {\n      name: 'expiry_after',\n      label: t`Expired After`,\n      description: t`Show items which expired after this date`,\n      type: 'date',\n      active: enableExpiry\n    },\n    {\n      name: 'updated_before',\n      label: t`Updated Before`,\n      description: t`Show items updated before this date`,\n      type: 'date'\n    },\n    {\n      name: 'updated_after',\n      label: t`Updated After`,\n      description: t`Show items updated after this date`,\n      type: 'date'\n    },\n    {\n      name: 'stocktake_before',\n      label: t`Stocktake Before`,\n      description: t`Show items counted before this date`,\n      type: 'date'\n    },\n    {\n      name: 'stocktake_after',\n      label: t`Stocktake After`,\n      description: t`Show items counted after this date`,\n      type: 'date'\n    },\n    {\n      name: 'external',\n      label: t`External Location`,\n      description: t`Show items in an external location`\n    }\n  ];\n}\n\n/*\n * Load a table of stock items\n */\nexport function StockItemTable({\n  params = {},\n  allowAdd = false,\n  showLocation = true,\n  showPricing = true,\n  allowReturn = false,\n  tableName = 'stockitems'\n}: Readonly<{\n  params?: any;\n  allowAdd?: boolean;\n  showLocation?: boolean;\n  showPricing?: boolean;\n  allowReturn?: boolean;\n  tableName: string;\n}>) {\n  const table = useTable(tableName);\n  const user = useUserState();\n\n  const settings = useGlobalSettingsState();\n\n  const stockExpiryEnabled = useMemo(\n    () => settings.isSet('STOCK_ENABLE_EXPIRY'),\n    [settings]\n  );\n\n  const navigate = useNavigate();\n\n  const tableColumns = useMemo(\n    () =>\n      stockItemTableColumns({\n        showLocation: showLocation ?? true,\n        showPricing: showPricing ?? true\n      }),\n    [showLocation, showPricing]\n  );\n\n  const tableFilters: TableFilter[] = useMemo(\n    () =>\n      stockItemTableFilters({\n        enableExpiry: stockExpiryEnabled\n      }),\n    [stockExpiryEnabled]\n  );\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      items: table.selectedRecords,\n      model: ModelType.stockitem,\n      refresh: table.refreshTable,\n      filters: {\n        in_stock: true\n      }\n    };\n  }, [table.selectedRecords, table.refreshTable]);\n\n  const newStockItemFields = useStockFields({\n    create: true,\n    partId: params.part,\n    modalId: 'add-stock-item'\n  });\n\n  const newStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    title: t`Add Stock Item`,\n    modalId: 'add-stock-item',\n    fields: newStockItemFields,\n    initialData: {\n      part: params.part,\n      location: params.location\n    },\n    follow: true,\n    table: table,\n    onFormSuccess: (response: any) => {\n      // Returns a list that may contain multiple serialized stock items\n      // Navigate to the first result\n      navigate(getDetailUrl(ModelType.stockitem, response[0].pk));\n    },\n    successMessage: t`Stock item serialized`\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    return: allowReturn\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      stockAdjustActions.dropdown,\n      <ActionButton\n        key='stock-order'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        tooltip={t`Order items`}\n        icon={<InvenTreeIcon icon='buy' />}\n        disabled={!table.hasSelectedRecords}\n        onClick={() => {\n          setPartsToOrder(\n            table.selectedRecords.map((record) => record.part_detail)\n          );\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <AddItemButton\n        key='add-stock-item'\n        hidden={!allowAdd || !user.hasAddRole(UserRoles.stock)}\n        tooltip={t`Add Stock Item`}\n        onClick={() => newStockItem.open()}\n      />\n    ];\n  }, [\n    user,\n    allowAdd,\n    table.hasSelectedRecords,\n    table.selectedRecords,\n    stockAdjustActions.dropdown\n  ]);\n\n  return (\n    <>\n      {newStockItem.modal}\n      {orderPartsWizard.wizard}\n      {stockAdjustActions.modals.map((modal) => modal.modal)}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_item_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableDownload: true,\n          enableSelection: true,\n          enableLabels: true,\n          enableReports: true,\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.stockitem,\n          params: {\n            ...params,\n            part_detail: true,\n            location_detail: true,\n            supplier_part_detail: true\n          }\n        }}\n      />\n    </>\n  );\n}\n"],"names":["stockItemTableColumns","showLocation","showPricing","accessor","sortable","render","record","PartColumn","part","part_detail","title","_i18n","_","id","defaultVisible","DescriptionColumn","ordering","quantity","allocated","available","text","formatDecimal","extra","color","serial","is_building","push","jsx","Text","sales_order","customer","belongs_to","consumed_by","in_stock","expired","stale","TableHoverCard","jsxs","Group","units","StatusColumn","model","ModelType","stockitem","LocationColumn","hidden","purchase_order_reference","switchable","formatCurrency","purchase_price","currency","purchase_price_currency","min_price","pricing_min","max_price","pricing_max","undefined","formatPriceRange","multiplier","DateColumn","useGlobalSettingsState","getState","isSet","stockItemTableFilters","enableExpiry","name","label","description","choiceFunction","StatusFilterOptions","IncludeVariantsFilter","SupplierFilter","ManufacturerFilter","HasBatchCodeFilter","BatchFilter","IsSerializedFilter","SerialFilter","SerialLTEFilter","SerialGTEFilter","active","type","StockItemTable","params","allowAdd","allowReturn","tableName","table","useTable","user","useUserState","settings","stockExpiryEnabled","useMemo","navigate","useNavigate","tableColumns","tableFilters","stockOperationProps","items","selectedRecords","refresh","refreshTable","filters","newStockItemFields","useStockFields","create","partId","modalId","newStockItem","useCreateApiFormModal","url","ApiEndpoints","stock_item_list","fields","initialData","location","follow","onFormSuccess","response","getDetailUrl","pk","successMessage","partsToOrder","setPartsToOrder","useState","orderPartsWizard","OrderPartsWizard","parts","stockAdjustActions","useStockAdjustActions","formProps","return","tableActions","dropdown","ActionButton","hasAddRole","UserRoles","purchase_order","InvenTreeIcon","hasSelectedRecords","map","openWizard","AddItemButton","stock","open","modal","wizard","modals","InvenTreeTable","apiUrl","enableDownload","enableSelection","enableLabels","enableReports","modelType","location_detail","supplier_part_detail"],"mappings":"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"}
