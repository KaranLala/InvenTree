{"version":3,"file":"InstanceDetail-BhafbIJP.js","sources":["../../../../../../frontend/src/components/details/Details.tsx","../../../../../../frontend/src/components/details/ItemDetails.tsx","../../../../../../frontend/src/components/errors/NotAuthenticated.tsx","../../../../../../frontend/src/components/errors/ClientError.tsx","../../../../../../frontend/src/components/errors/ServerError.tsx","../../../../../../frontend/src/components/nav/InstanceDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport {\n  Anchor,\n  Avatar,\n  Badge,\n  Group,\n  HoverCard,\n  type MantineColor,\n  Paper,\n  Skeleton,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { useQuery } from '@tanstack/react-query';\nimport { getValueAtPath } from 'mantine-datatable';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport type { InvenTreeIconType } from '@lib/types/Icons';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate, formatDecimal } from '../../defaults/formatters';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { CopyButton } from '../buttons/CopyButton';\nimport { StylishText } from '../items/StylishText';\nimport { getModelInfo } from '../render/ModelType';\nimport { StatusRenderer } from '../render/StatusRenderer';\n\nexport type DetailsField = {\n  hidden?: boolean;\n  icon?: keyof InvenTreeIconType;\n  name: string;\n  label?: string;\n  badge?: BadgeType;\n  copy?: boolean;\n  value_formatter?: () => ValueFormatterReturn;\n} & (\n  | NumberDetailField\n  | StringDetailField\n  | BooleanField\n  | LinkDetailField\n  | ProgressBarField\n  | StatusField\n);\n\ntype BadgeType = 'owner' | 'user' | 'group';\ntype ValueFormatterReturn = string | number | null | React.ReactNode;\n\ntype StringDetailField = {\n  type: 'string' | 'text' | 'date';\n  unit?: boolean;\n};\n\ntype NumberDetailField = {\n  type: 'number';\n  unit?: boolean;\n};\n\ntype BooleanField = {\n  type: 'boolean';\n};\n\ntype LinkDetailField = {\n  type: 'link';\n  link?: boolean;\n} & (InternalLinkField | ExternalLinkField);\n\ntype InternalLinkField = {\n  model: ModelType;\n  model_field?: string;\n  model_formatter?: (value: any) => string;\n  model_filters?: any;\n  backup_value?: string;\n};\n\ntype ExternalLinkField = {\n  external: true;\n};\n\ntype ProgressBarField = {\n  type: 'progressbar';\n  progress: number;\n  total: number;\n};\n\ntype StatusField = {\n  type: 'status';\n  model: ModelType;\n};\n\ntype FieldProps = {\n  field_data: any;\n  field_value: string | number;\n  unit?: string | null;\n};\n\nfunction HoverNameBadge(data: any, type: BadgeType) {\n  function lines(data: any) {\n    switch (type) {\n      case 'owner':\n        return [\n          `${data.label}: ${data.name}`,\n          data.name,\n          getDetailUrl(data.owner_model, data.pk, true),\n          undefined,\n          undefined\n        ];\n      case 'user':\n        return [\n          `${data.first_name} ${data.last_name}`,\n          data.username,\n          getDetailUrl(ModelType.user, data.pk, true),\n          data?.image,\n          <>\n            {data.is_superuser && <Badge color='red'>{t`Superuser`}</Badge>}\n            {data.is_staff && <Badge color='blue'>{t`Staff`}</Badge>}\n            {data.email && t`Email: ` + data.email}\n          </>\n        ];\n      case 'group':\n        return [\n          data.name,\n          data.name,\n          getDetailUrl(ModelType.group, data.pk, true),\n          data?.image,\n          undefined\n        ];\n      default:\n        return 'dd';\n    }\n  }\n  const line_data = lines(data);\n  return (\n    <HoverCard.Dropdown>\n      <Group>\n        <Avatar src={line_data[3]} radius='xl' />\n        <Stack gap={5}>\n          <Text size='sm' fw={700} style={{ lineHeight: 1 }}>\n            {line_data[0]}\n          </Text>\n          <Anchor\n            href={line_data[2]}\n            c='dimmed'\n            size='xs'\n            style={{ lineHeight: 1 }}\n          >\n            {line_data[1]}\n          </Anchor>\n        </Stack>\n      </Group>\n\n      <Text size='sm' mt='md'>\n        {line_data[4]}\n      </Text>\n    </HoverCard.Dropdown>\n  );\n}\n\n/**\n * Fetches user or group info from backend and formats into a badge.\n * Badge shows username, full name, or group name depending on server settings.\n * Badge appends icon to describe type of Owner\n */\nfunction NameBadge({\n  pk,\n  type\n}: Readonly<{ pk: string | number; type: BadgeType }>) {\n  const api = useApi();\n\n  const { data } = useQuery({\n    queryKey: ['badge', type, pk],\n    queryFn: async () => {\n      let path = '';\n\n      switch (type) {\n        case 'owner':\n          path = ApiEndpoints.owner_list;\n          break;\n        case 'user':\n          path = ApiEndpoints.user_list;\n          break;\n        case 'group':\n          path = ApiEndpoints.group_list;\n          break;\n        default:\n          return {};\n      }\n\n      const url = apiUrl(path, pk);\n\n      return api.get(url).then((response) => {\n        switch (response.status) {\n          case 200:\n            return response.data;\n          default:\n            return {};\n        }\n      });\n    }\n  });\n\n  const settings = useGlobalSettingsState();\n  const nameComp = useMemo(() => {\n    if (!data) return <Skeleton height={12} radius='md' />;\n    return HoverNameBadge(data, type);\n  }, [data]);\n\n  if (!data || data.isLoading || data.isFetching) {\n    return <Skeleton height={12} radius='md' />;\n  }\n\n  // Rendering a user's name for the badge\n  function _render_name() {\n    if (!data || !data.pk) {\n      return '';\n    } else if (type === 'user' && settings.isSet('DISPLAY_FULL_NAMES')) {\n      if (data.first_name || data.last_name) {\n        return `${data.first_name} ${data.last_name}`;\n      } else {\n        return data.username;\n      }\n    } else if (type === 'user') {\n      return data.username;\n    } else {\n      return data.name;\n    }\n  }\n\n  return (\n    <Group wrap='nowrap' gap='sm' justify='right'>\n      <Badge\n        color='dark'\n        variant='filled'\n        style={{ display: 'flex', alignItems: 'center' }}\n      >\n        <HoverCard\n          width={320}\n          shadow='md'\n          withArrow\n          openDelay={200}\n          closeDelay={400}\n        >\n          <HoverCard.Target>\n            <p>{data?.name ?? _render_name()}</p>\n          </HoverCard.Target>\n          {nameComp}\n        </HoverCard>\n      </Badge>\n      <InvenTreeIcon icon={type === 'user' ? type : data.label} />\n    </Group>\n  );\n}\n\nfunction DateValue(props: Readonly<FieldProps>) {\n  return <Text size='sm'>{formatDate(props.field_value?.toString())}</Text>;\n}\n\n// Return a formatted \"number\" value, with optional unit\nfunction NumberValue(props: Readonly<FieldProps>) {\n  const value = props?.field_value;\n\n  // Convert to double\n  const numberValue = Number.parseFloat(value.toString());\n\n  if (value === null || value === undefined) {\n    return <Text size='sm'>'---'</Text>;\n  }\n\n  return (\n    <Group wrap='nowrap' gap='xs' justify='left'>\n      <Text size='sm'>{formatDecimal(numberValue)}</Text>\n      {!!props.field_data?.unit && (\n        <Text size='xs'>[{props.field_data?.unit}]</Text>\n      )}\n    </Group>\n  );\n}\n\n/**\n * Renders the value of a 'string' or 'text' field.\n * If owner is defined, only renders a badge\n * If user is defined, a badge is rendered in addition to main value\n */\nfunction TableStringValue(props: Readonly<FieldProps>) {\n  const value = props?.field_value;\n\n  let renderedValue = null;\n\n  if (props.field_data?.badge) {\n    return <NameBadge pk={value} type={props.field_data.badge} />;\n  } else if (props?.field_data?.value_formatter) {\n    renderedValue = props.field_data.value_formatter();\n  } else if (value === null || value === undefined) {\n    renderedValue = <Text size='sm'>'---'</Text>;\n  } else {\n    renderedValue = <Text size='sm'>{value.toString()}</Text>;\n  }\n\n  return (\n    <Group wrap='nowrap' gap='xs' justify='space-apart'>\n      <Group wrap='nowrap' gap='xs' justify='left'>\n        {renderedValue}\n        {props.field_data.unit && <Text size='xs'>{props.unit}</Text>}\n      </Group>\n      {props.field_data.user && (\n        <NameBadge pk={props.field_data?.user} type='user' />\n      )}\n    </Group>\n  );\n}\n\nfunction BooleanValue(props: Readonly<FieldProps>) {\n  return <YesNoButton value={props.field_value} />;\n}\n\nfunction TableAnchorValue(props: Readonly<FieldProps>) {\n  const api = useApi();\n  const navigate = useNavigate();\n\n  const { data } = useQuery({\n    queryKey: ['detail', props.field_data.model, props.field_value],\n    queryFn: async () => {\n      if (!props.field_data?.model) {\n        return {};\n      }\n\n      const modelDef = getModelInfo(props.field_data.model);\n\n      if (!modelDef?.api_endpoint) {\n        return {};\n      }\n\n      const url = apiUrl(modelDef.api_endpoint, props.field_value);\n\n      return api\n        .get(url, {\n          params: props.field_data.model_filters ?? undefined\n        })\n        .then((response) => {\n          switch (response.status) {\n            case 200:\n              return response.data;\n            default:\n              return {};\n          }\n        });\n    }\n  });\n\n  const detailUrl = useMemo(() => {\n    return (\n      props?.field_data?.model &&\n      getDetailUrl(props.field_data.model, props.field_value)\n    );\n  }, [props.field_data.model, props.field_value]);\n\n  const handleLinkClick = useCallback(\n    (event: any) => {\n      navigateToLink(detailUrl, navigate, event);\n    },\n    [detailUrl]\n  );\n\n  if (!data || data.isLoading || data.isFetching) {\n    return <Skeleton height={12} radius='md' />;\n  }\n\n  if (props.field_data.external) {\n    return (\n      <Anchor\n        href={`${props.field_value}`}\n        target={'_blank'}\n        rel={'noreferrer noopener'}\n      >\n        <span style={{ display: 'flex', alignItems: 'center', gap: '3px' }}>\n          <Text>{props.field_value}</Text>\n          <InvenTreeIcon icon='external' iconProps={{ size: 15 }} />\n        </span>\n      </Anchor>\n    );\n  }\n\n  let make_link = props.field_data?.link ?? true;\n\n  // Construct the \"return value\" for the fetched data\n  let value = undefined;\n\n  if (props.field_data.model_formatter) {\n    value = props.field_data.model_formatter(data) ?? value;\n  } else if (props.field_data.model_field) {\n    value = data?.[props.field_data.model_field] ?? value;\n  } else {\n    value = data?.name;\n  }\n\n  let color: MantineColor | undefined = undefined;\n\n  if (value === undefined) {\n    value = data?.name ?? props.field_data?.backup_value ?? t`No name defined`;\n    make_link = false;\n    color = 'red';\n  }\n\n  return (\n    <>\n      {make_link ? (\n        <Anchor href='#' onClick={handleLinkClick}>\n          <Text>{value}</Text>\n        </Anchor>\n      ) : (\n        <Text c={color}>{value}</Text>\n      )}\n    </>\n  );\n}\n\nfunction ProgressBarValue(props: Readonly<FieldProps>) {\n  if (props.field_data.total <= 0) {\n    return <Text size='sm'>{props.field_data.progress}</Text>;\n  }\n\n  return (\n    <ProgressBar\n      size='lg'\n      value={props.field_data.progress}\n      maximum={props.field_data.total}\n      progressLabel\n    />\n  );\n}\n\nfunction StatusValue(props: Readonly<FieldProps>) {\n  return (\n    <StatusRenderer type={props.field_data.model} status={props.field_value} />\n  );\n}\n\nfunction CopyField({ value }: Readonly<{ value: string }>) {\n  return <CopyButton value={value} />;\n}\n\nexport function DetailsTableField({\n  item,\n  field\n}: Readonly<{\n  item: any;\n  field: DetailsField;\n}>) {\n  function getFieldType(type: string) {\n    switch (type) {\n      case 'boolean':\n        return BooleanValue;\n      case 'link':\n        return TableAnchorValue;\n      case 'progressbar':\n        return ProgressBarValue;\n      case 'status':\n        return StatusValue;\n      case 'date':\n        return DateValue;\n      case 'number':\n        return NumberValue;\n      case 'text':\n      case 'string':\n      default:\n        return TableStringValue;\n    }\n  }\n\n  const FieldType: any = getFieldType(field.type);\n\n  const fieldValue = useMemo(\n    () => getValueAtPath(item, field.name) as string,\n    [item, field.name]\n  );\n\n  return (\n    <Table.Tr style={{ verticalAlign: 'top' }}>\n      <Table.Td style={{ minWidth: 75, lineBreak: 'auto', flex: 2 }}>\n        <Group gap='xs' wrap='nowrap'>\n          <InvenTreeIcon\n            icon={field.icon ?? (field.name as keyof InvenTreeIconType)}\n          />\n          <Text style={{ paddingLeft: 10 }}>{field.label}</Text>\n        </Group>\n      </Table.Td>\n      <Table.Td\n        style={{\n          lineBreak: 'anywhere',\n          minWidth: 100,\n          flex: 10,\n          display: 'inline-block'\n        }}\n      >\n        <FieldType field_data={field} field_value={fieldValue} />\n      </Table.Td>\n      <Table.Td style={{ width: '50' }}>\n        {field.copy && <CopyField value={fieldValue} />}\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\nexport function DetailsTable({\n  item,\n  fields,\n  title\n}: Readonly<{\n  item: any;\n  fields: DetailsField[];\n  title?: string;\n}>) {\n  return (\n    <Paper\n      p='xs'\n      withBorder\n      style={{ overflowX: 'hidden', width: '100%', minWidth: 200 }}\n    >\n      <Stack gap='xs'>\n        {title && <StylishText size='lg'>{title}</StylishText>}\n        <Table striped verticalSpacing={5} horizontalSpacing='sm'>\n          <Table.Tbody>\n            {fields\n              .filter((field: DetailsField) => !field.hidden)\n              .map((field: DetailsField, index: number) => (\n                <DetailsTableField field={field} item={item} key={index} />\n              ))}\n          </Table.Tbody>\n        </Table>\n      </Stack>\n    </Paper>\n  );\n}\n","import { Paper, SimpleGrid } from '@mantine/core';\nimport type React from 'react';\n\nexport function ItemDetailsGrid(props: React.PropsWithChildren<{}>) {\n  return (\n    <Paper p='xs'>\n      <SimpleGrid\n        cols={{ base: 1, '900px': 2 }}\n        type='container'\n        spacing='xs'\n        verticalSpacing='xs'\n      >\n        {props.children}\n      </SimpleGrid>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\n\nexport default function NotAuthenticated() {\n  return (\n    <GenericErrorPage\n      title={t`Not Authenticated`}\n      message={t`You are not logged in.`}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\nimport NotAuthenticated from './NotAuthenticated';\nimport NotFound from './NotFound';\nimport PermissionDenied from './PermissionDenied';\n\nexport default function ClientError({ status }: Readonly<{ status?: number }>) {\n  switch (status) {\n    case 401:\n      return <NotAuthenticated />;\n    case 403:\n      return <PermissionDenied />;\n    case 404:\n      return <NotFound />;\n    default:\n      break;\n  }\n\n  // Generic client error\n  return (\n    <GenericErrorPage\n      title={t`Client Error`}\n      message={t`Client error occurred`}\n      status={status}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\n\nexport default function ServerError({ status }: Readonly<{ status?: number }>) {\n  return (\n    <GenericErrorPage\n      title={t`Server Error`}\n      message={t`A server error occurred`}\n      status={status}\n    />\n  );\n}\n","import { Center, Container, Loader } from '@mantine/core';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport type { UserRoles } from '@lib/enums/Roles';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport { useUserState } from '../../states/UserState';\nimport ClientError from '../errors/ClientError';\nimport PermissionDenied from '../errors/PermissionDenied';\nimport ServerError from '../errors/ServerError';\n\nexport default function InstanceDetail({\n  query,\n  children,\n  requiredRole,\n  requiredPermission\n}: Readonly<{\n  query: UseQueryResult;\n  children: React.ReactNode;\n  requiredRole?: UserRoles;\n  requiredPermission?: ModelType;\n}>) {\n  const user = useUserState();\n\n  const [loaded, setLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (query.isSuccess) {\n      setLoaded(true);\n    }\n  }, [query.isSuccess]);\n\n  if (query.isError) {\n    const reason = query.failureReason as any;\n    const statusCode = reason?.response?.status ?? reason?.status ?? 0;\n\n    if (statusCode >= 500) {\n      return <ServerError status={statusCode} />;\n    }\n\n    return <ClientError status={statusCode} />;\n  }\n\n  if (requiredRole && !user.hasViewRole(requiredRole)) {\n    return <PermissionDenied />;\n  }\n\n  if (requiredPermission && !user.hasViewPermission(requiredPermission)) {\n    return <PermissionDenied />;\n  }\n\n  if (!loaded || !user.isLoggedIn()) {\n    // Return a loader for the first page load\n    return (\n      <Center>\n        <Container>\n          <Loader />\n        </Container>\n      </Center>\n    );\n  }\n\n  return <>{children}</>;\n}\n"],"names":["HoverNameBadge","data","type","lines","label","name","getDetailUrl","owner_model","pk","undefined","first_name","last_name","username","ModelType","user","image","is_superuser","jsx","Badge","_i18n","_","id","is_staff","email","group","line_data","jsxs","HoverCard","Group","Avatar","Stack","Text","lineHeight","Anchor","NameBadge","api","useApi","useQuery","queryKey","queryFn","path","ApiEndpoints","owner_list","user_list","group_list","url","apiUrl","get","then","response","status","settings","useGlobalSettingsState","nameComp","useMemo","Skeleton","isLoading","isFetching","_render_name","isSet","display","alignItems","InvenTreeIcon","DateValue","props","formatDate","field_value","toString","NumberValue","value","numberValue","Number","parseFloat","formatDecimal","field_data","unit","TableStringValue","renderedValue","badge","value_formatter","BooleanValue","YesNoButton","TableAnchorValue","navigate","useNavigate","model","modelDef","getModelInfo","api_endpoint","params","model_filters","detailUrl","handleLinkClick","useCallback","event","external","gap","size","make_link","link","model_formatter","model_field","color","backup_value","ProgressBarValue","total","progress","ProgressBar","StatusValue","StatusRenderer","CopyField","CopyButton","DetailsTableField","item","field","getFieldType","FieldType","fieldValue","getValueAtPath","Table","verticalAlign","minWidth","lineBreak","flex","icon","paddingLeft","width","copy","DetailsTable","fields","title","Paper","overflowX","StylishText","filter","hidden","map","index","ItemDetailsGrid","SimpleGrid","base","children","NotAuthenticated","GenericErrorPage","ClientError","PermissionDenied","NotFound","ServerError","InstanceDetail","query","requiredRole","requiredPermission","useUserState","loaded","setLoaded","useState","useEffect","isSuccess","isError","reason","failureReason","statusCode","hasViewRole","hasViewPermission","isLoggedIn","Center","Container","Loader"],"mappings":"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"}
