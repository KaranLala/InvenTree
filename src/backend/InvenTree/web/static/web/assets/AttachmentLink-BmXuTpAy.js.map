{"version":3,"file":"AttachmentLink-BmXuTpAy.js","sources":["../../../../../../frontend/src/components/items/AttachmentLink.tsx"],"sourcesContent":["import { Anchor, Group } from '@mantine/core';\nimport {\n  IconFile,\n  IconFileTypeCsv,\n  IconFileTypeDoc,\n  IconFileTypePdf,\n  IconFileTypeXls,\n  IconFileTypeZip,\n  IconFileUnknown,\n  IconLink,\n  IconPhoto\n} from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\nimport { generateUrl } from '../../functions/urls';\n\n/**\n * Return an icon based on the provided filename\n */\nexport function attachmentIcon(attachment: string): ReactNode {\n  const sz = 18;\n\n  if (!attachment) {\n    return <IconFileUnknown size={sz} />;\n  }\n\n  const suffix = attachment.split('.').pop()?.toLowerCase() ?? '';\n  switch (suffix) {\n    case 'pdf':\n      return <IconFileTypePdf size={sz} />;\n    case 'csv':\n      return <IconFileTypeCsv size={sz} />;\n    case 'xls':\n    case 'xlsx':\n      return <IconFileTypeXls size={sz} />;\n    case 'doc':\n    case 'docx':\n      return <IconFileTypeDoc size={sz} />;\n    case 'zip':\n    case 'tar':\n    case 'gz':\n    case '7z':\n      return <IconFileTypeZip size={sz} />;\n    case 'png':\n    case 'jpg':\n    case 'jpeg':\n    case 'gif':\n    case 'bmp':\n    case 'tif':\n    case 'webp':\n      return <IconPhoto size={sz} />;\n    default:\n      return <IconFile size={sz} />;\n  }\n}\n\n/**\n * Render a link to a file attachment, with icon and text\n * @param attachment : string - The attachment filename\n */\nexport function AttachmentLink({\n  attachment,\n  external\n}: Readonly<{\n  attachment: string;\n  external?: boolean;\n}>): ReactNode {\n  const url = useMemo(() => {\n    if (external) {\n      return attachment;\n    }\n\n    return generateUrl(attachment);\n  }, [attachment, external]);\n\n  const text: string = useMemo(() => {\n    if (!attachment) {\n      return '-';\n    }\n\n    return external ? attachment : (attachment.split('/').pop() ?? '-');\n  }, [attachment, external]);\n\n  return (\n    <Group justify='left' gap='sm' wrap='nowrap'>\n      {external ? <IconLink /> : attachmentIcon(attachment)}\n      {!!attachment ? (\n        <Anchor href={url} target='_blank' rel='noopener noreferrer'>\n          {text}\n        </Anchor>\n      ) : (\n        text\n      )}\n    </Group>\n  );\n}\n"],"names":["attachmentIcon","attachment","jsx","IconFileUnknown","sz","split","pop","toLowerCase","IconFileTypePdf","IconFileTypeCsv","IconFileTypeXls","IconFileTypeDoc","IconFileTypeZip","IconPhoto","IconFile","AttachmentLink","external","url","useMemo","generateUrl","text","Group","IconLink","Anchor"],"mappings":"8KAkBO,SAASA,EAAeC,EAA+B,OAG5D,GAAI,CAACA,EACI,OAAAC,EAAA,IAACC,EAAgB,CAAA,KAAMC,EAAM,CAAA,EAItC,SADeH,EAAAA,EAAWI,MAAM,GAAG,EAAEC,IAAI,IAA1BL,YAAAA,EAA6BM,gBAAiB,GAC/C,CACZ,IAAK,MACI,OAAAL,EAAA,IAACM,EAAgB,CAAA,KAAMJ,EAAM,CAAA,EACtC,IAAK,MACI,OAAAF,EAAA,IAACO,EAAgB,CAAA,KAAML,EAAM,CAAA,EACtC,IAAK,MACL,IAAK,OACI,OAAAF,EAAA,IAACQ,EAAgB,CAAA,KAAMN,EAAM,CAAA,EACtC,IAAK,MACL,IAAK,OACI,OAAAF,EAAA,IAACS,EAAgB,CAAA,KAAMP,EAAM,CAAA,EACtC,IAAK,MACL,IAAK,MACL,IAAK,KACL,IAAK,KACI,OAAAF,EAAA,IAACU,EAAgB,CAAA,KAAMR,EAAM,CAAA,EACtC,IAAK,MACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,OACI,OAAAF,EAAA,IAACW,EAAU,CAAA,KAAMT,EAAM,CAAA,EAChC,QACS,OAAAF,EAAA,IAACY,EAAS,CAAA,KAAMV,EAAM,CAAA,CAAA,CAEnC,CAMO,SAASW,EAAe,CAC7Bd,WAAAA,EACAe,SAAAA,CAID,EAAc,CACPC,MAAAA,EAAMC,EAAAA,QAAQ,IACdF,EACKf,EAGFkB,EAAYlB,CAAU,EAC5B,CAACA,EAAYe,CAAQ,CAAC,EAEnBI,EAAeF,EAAAA,QAAQ,IACtBjB,EAIEe,EAAWf,EAAcA,EAAWI,MAAM,GAAG,EAAEC,OAAS,IAHtD,IAIR,CAACL,EAAYe,CAAQ,CAAC,EAEzB,cACGK,EAAM,CAAA,QAAQ,OAAO,IAAI,KAAK,KAAK,SACjCL,SAAAA,CAAAA,EAAYd,EAAA,IAAAoB,EAAA,IAActB,EAAeC,CAAU,EACjDA,EACDC,EAAAA,IAACqB,EAAO,CAAA,KAAMN,EAAK,OAAO,SAAS,IAAI,sBACpCG,SAAAA,CACH,CAAA,EAEAA,CAAAA,EAEJ,CAEJ"}
