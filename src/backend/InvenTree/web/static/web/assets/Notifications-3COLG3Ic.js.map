{"version":3,"file":"Notifications-3COLG3Ic.js","sources":["../../../../../../frontend/src/tables/notifications/NotificationTable.tsx","../../../../../../frontend/src/pages/Notifications.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useMemo } from 'react';\n\nimport type { RowAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableState } from '@lib/types/Tables';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function NotificationTable({\n  params,\n  tableState,\n  tableActions,\n  actions\n}: Readonly<{\n  params: any;\n  tableState: TableState;\n  tableActions: any[];\n  actions: (record: any) => RowAction[];\n}>) {\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'age_human',\n        title: t`Age`,\n        sortable: true,\n        ordering: 'creation'\n      },\n      {\n        accessor: 'category',\n        title: t`Category`,\n        sortable: true\n      },\n      {\n        accessor: 'name',\n        title: t`Notification`\n      },\n      {\n        accessor: 'message',\n        title: t`Message`\n      }\n    ];\n  }, []);\n\n  return (\n    <InvenTreeTable\n      url={apiUrl(ApiEndpoints.notifications_list)}\n      tableState={tableState}\n      columns={columns}\n      props={{\n        rowActions: actions,\n        tableActions: tableActions,\n        enableSelection: true,\n        enableBulkDelete: true,\n        params: params\n      }}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Stack } from '@mantine/core';\nimport {\n  IconBellCheck,\n  IconBellExclamation,\n  IconCircleCheck,\n  IconMail,\n  IconMailOpened,\n  IconTrash\n} from '@tabler/icons-react';\nimport { useCallback, useMemo } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { PageDetail } from '../components/nav/PageDetail';\nimport { PanelGroup } from '../components/panels/PanelGroup';\nimport { useApi } from '../contexts/ApiContext';\nimport { useTable } from '../hooks/UseTable';\nimport { NotificationTable } from '../tables/notifications/NotificationTable';\n\nexport default function NotificationsPage() {\n  const api = useApi();\n  const unreadTable = useTable('unreadnotifications');\n  const readTable = useTable('readnotifications');\n\n  const markAllAsRead = useCallback(() => {\n    api\n      .get(apiUrl(ApiEndpoints.notifications_readall), {\n        params: {\n          read: false\n        }\n      })\n      .then((_response) => {\n        unreadTable.refreshTable();\n        readTable.refreshTable();\n      })\n      .catch((_error) => {});\n  }, []);\n\n  const notificationPanels = useMemo(() => {\n    return [\n      {\n        name: 'unread',\n        label: t`Notifications`,\n        icon: <IconBellExclamation size='18' />,\n        content: (\n          <NotificationTable\n            params={{ read: false }}\n            tableState={unreadTable}\n            actions={(record) => [\n              {\n                title: t`Mark as read`,\n                color: 'green',\n                icon: <IconCircleCheck />,\n                onClick: () => {\n                  const url = apiUrl(\n                    ApiEndpoints.notifications_list,\n                    record.pk\n                  );\n                  api\n                    .patch(url, {\n                      read: true\n                    })\n                    .then((response) => {\n                      unreadTable.refreshTable();\n                    });\n                }\n              }\n            ]}\n            tableActions={[\n              <ActionButton\n                icon={<IconMailOpened />}\n                tooltip={t`Mark all as read`}\n                onClick={markAllAsRead}\n              />\n            ]}\n          />\n        )\n      },\n      {\n        name: 'history',\n        label: t`History`,\n        icon: <IconBellCheck size='18' />,\n        content: (\n          <NotificationTable\n            params={{ read: true }}\n            tableState={readTable}\n            actions={(record) => [\n              {\n                title: t`Mark as unread`,\n                icon: <IconMail />,\n                onClick: () => {\n                  const url = apiUrl(\n                    ApiEndpoints.notifications_list,\n                    record.pk\n                  );\n\n                  api\n                    .patch(url, {\n                      read: false\n                    })\n                    .then((response) => {\n                      readTable.refreshTable();\n                    });\n                }\n              },\n              {\n                title: t`Delete`,\n                color: 'red',\n                icon: <IconTrash />,\n                onClick: () => {\n                  api\n                    .delete(apiUrl(ApiEndpoints.notifications_list, record.pk))\n                    .then((response) => {\n                      readTable.refreshTable();\n                    });\n                }\n              }\n            ]}\n            tableActions={[]}\n          />\n        )\n      }\n    ];\n  }, [unreadTable, readTable]);\n\n  return (\n    <Stack>\n      <PageDetail title={t`Notifications`} />\n      <PanelGroup pageKey='notifications' panels={notificationPanels} />\n    </Stack>\n  );\n}\n"],"names":["NotificationTable","params","tableState","tableActions","actions","columns","useMemo","accessor","title","_i18n","_","id","sortable","ordering","jsx","InvenTreeTable","apiUrl","ApiEndpoints","notifications_list","rowActions","enableSelection","enableBulkDelete","NotificationsPage","api","useApi","unreadTable","useTable","readTable","markAllAsRead","useCallback","get","notifications_readall","read","then","_response","refreshTable","catch","_error","notificationPanels","name","label","icon","IconBellExclamation","content","color","IconCircleCheck","onClick","url","record","pk","patch","response","ActionButton","IconMailOpened","IconBellCheck","IconMail","IconTrash","delete","Stack","PageDetail","PanelGroup"],"mappings":"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"}
