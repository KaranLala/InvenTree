{"version":3,"file":"UserTable-CLP76h_I.js","sources":["../../../../../../frontend/src/tables/settings/GroupTable.tsx","../../../../../../frontend/src/components/items/TransferList.tsx","../../../../../../frontend/src/tables/settings/UserTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Accordion, LoadingOverlay, Stack, Text } from '@mantine/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/index';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { IconUsersGroup } from '@tabler/icons-react';\nimport { useNavigate } from 'react-router-dom';\nimport { EditApiForm } from '../../components/forms/ApiForm';\nimport { RoleTable, type RuleSet } from '../../components/items/RoleTable';\nimport { StylishText } from '../../components/items/StylishText';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport interface GroupDetailI {\n  pk: number;\n  name: string;\n}\n\nexport function GroupDrawer({\n  id,\n  refreshTable\n}: Readonly<{\n  id: string;\n  refreshTable: () => void;\n}>) {\n  const {\n    instance,\n    refreshInstance,\n    instanceQuery: { isFetching, error }\n  } = useInstance({\n    endpoint: ApiEndpoints.group_list,\n    pk: id,\n    params: {\n      permission_detail: true,\n      role_detail: true,\n      user_detail: true\n    }\n  });\n\n  const groupRoles: RuleSet[] = useMemo(() => {\n    return instance?.roles ?? [];\n  }, [instance]);\n\n  if (isFetching) {\n    return <LoadingOverlay visible={true} />;\n  }\n\n  if (error) {\n    return (\n      <Text>\n        {(error as any)?.response?.status === 404 ? (\n          <Trans>Group with id {id} not found</Trans>\n        ) : (\n          <Trans>An error occurred while fetching group details</Trans>\n        )}\n      </Text>\n    );\n  }\n\n  return (\n    <Stack>\n      <Accordion defaultValue={'details'}>\n        <Accordion.Item key='details' value='details'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>Group Details</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EditApiForm\n              props={{\n                url: ApiEndpoints.group_list,\n                pk: id,\n                fields: {\n                  name: {\n                    label: t`Name`,\n                    description: t`Name of the user group`\n                  }\n                },\n                onFormSuccess: () => {\n                  refreshTable();\n                  refreshInstance();\n                }\n              }}\n              id={`group-detail-drawer-${id}`}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item key='roles' value='roles'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>Group Roles</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <RoleTable roles={groupRoles} editable />\n          </Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Stack>\n  );\n}\n\n/**\n * Table for displaying list of groups\n */\nexport function GroupTable({\n  directLink = false\n}: Readonly<{ directLink?: boolean }>) {\n  const table = useTable('groups');\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const openDetailDrawer = useCallback(\n    (pk: number) => {\n      if (user.hasChangePermission(ModelType.group)) {\n        navigate(`group-${pk}/`);\n      }\n    },\n    [user]\n  );\n\n  const columns: TableColumn<GroupDetailI>[] = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        sortable: true,\n        title: t`Name`,\n        switchable: false\n      }\n    ];\n  }, []);\n\n  const rowActions = useCallback(\n    (record: GroupDetailI): RowAction[] => {\n      return [\n        RowEditAction({\n          onClick: () => openDetailDrawer(record.pk),\n          hidden: !user.hasChangePermission(ModelType.group)\n        }),\n        RowDeleteAction({\n          hidden: !user.hasDeletePermission(ModelType.group),\n          onClick: () => {\n            setSelectedGroup(record.pk);\n            deleteGroup.open();\n          }\n        }),\n        {\n          icon: <IconUsersGroup />,\n          title: t`Open Profile`,\n          onClick: () => {\n            navigate(getDetailUrl(ModelType.group, record.pk));\n          }\n        }\n      ];\n    },\n    [user]\n  );\n\n  const [selectedGroup, setSelectedGroup] = useState<number>(-1);\n\n  const deleteGroup = useDeleteApiFormModal({\n    url: ApiEndpoints.group_list,\n    pk: selectedGroup,\n    title: t`Delete group`,\n    successMessage: t`Group deleted`,\n    table: table,\n    preFormWarning: t`Are you sure you want to delete this group?`\n  });\n\n  const newGroup = useCreateApiFormModal({\n    url: ApiEndpoints.group_list,\n    title: t`Add Group`,\n    fields: {\n      name: {\n        label: t`Name`,\n        description: t`Name of the user group`\n      }\n    },\n    table: table\n  });\n\n  const tableActions = useMemo(() => {\n    const actions = [];\n\n    actions.push(\n      <AddItemButton\n        key={'add-group'}\n        onClick={() => newGroup.open()}\n        tooltip={t`Add group`}\n        hidden={!user.hasAddPermission(ModelType.group)}\n      />\n    );\n\n    return actions;\n  }, [user]);\n\n  // Determine whether the GroupTable is editable\n  const editable: boolean = useMemo(\n    () => !directLink && user.isStaff() && user.hasChangeRole(UserRoles.admin),\n    [user, directLink]\n  );\n\n  return (\n    <>\n      {editable && newGroup.modal}\n      {editable && deleteGroup.modal}\n      {editable && (\n        <DetailDrawer\n          size='xl'\n          title={t`Edit Group`}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('group-')) return false;\n            return (\n              <GroupDrawer\n                id={id.replace('group-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.group_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          rowActions: editable ? rowActions : undefined,\n          tableActions: editable ? tableActions : undefined,\n          modelType: directLink ? ModelType.group : undefined,\n          onRowClick: editable\n            ? (record) => openDetailDrawer(record.pk)\n            : undefined\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  ActionIcon,\n  Button,\n  Divider,\n  Group,\n  Paper,\n  Stack,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport {\n  IconChevronLeft,\n  IconChevronRight,\n  IconCircleCheck,\n  IconCircleChevronLeft,\n  IconCircleChevronRight\n} from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface TransferListItem {\n  value: string | number;\n  label: string;\n  selected?: boolean;\n}\n\nfunction TransferListGroup({\n  items,\n  itemSelected,\n  itemSwitched\n}: {\n  items: TransferListItem[];\n  itemSelected: (item: TransferListItem) => void;\n  itemSwitched: (item: TransferListItem) => void;\n}) {\n  return (\n    <Paper\n      p='sm'\n      withBorder\n      style={{ width: '100%', height: '100%', verticalAlign: 'top' }}\n    >\n      <Stack\n        gap='xs'\n        justify='flex-start'\n        align='stretch'\n        style={{ width: '100%' }}\n      >\n        {items.map((item) => (\n          <Text\n            p={2}\n            key={item.value}\n            onClick={() => itemSelected(item)}\n            onDoubleClick={() => itemSwitched(item)}\n            style={{\n              width: '100%',\n              cursor: 'pointer',\n              backgroundColor: item.selected\n                ? 'var(--mantine-primary-color-light)'\n                : undefined\n            }}\n          >\n            {item.label || item.value}\n          </Text>\n        ))}\n        {items.length == 0 && <Text size='sm' fs='italic'>{t`No items`}</Text>}\n      </Stack>\n    </Paper>\n  );\n}\n\nexport function TransferList({\n  available,\n  selected,\n  onSave\n}: {\n  available: TransferListItem[];\n  selected: TransferListItem[];\n  onSave?: (selected: TransferListItem[]) => void;\n}) {\n  const [leftItems, setLeftItems] = useState<TransferListItem[]>([]);\n  const [rightItems, setRightItems] = useState<TransferListItem[]>([]);\n\n  useEffect(() => {\n    setRightItems(selected);\n    setLeftItems(\n      available.filter((item) => !selected.some((i) => i.value === item.value))\n    );\n  }, [available, selected]);\n\n  const leftToggled = useCallback(\n    (item: TransferListItem) => {\n      setLeftItems((items) =>\n        items.map((i) => {\n          if (i.value === item.value) {\n            return { ...i, selected: !i.selected };\n          }\n          return i;\n        })\n      );\n    },\n    [setLeftItems]\n  );\n\n  const rightToggled = useCallback(\n    (item: TransferListItem) => {\n      setRightItems((items) =>\n        items.map((i) => {\n          if (i.value === item.value) {\n            return { ...i, selected: !i.selected };\n          }\n          return i;\n        })\n      );\n    },\n    [setRightItems]\n  );\n\n  const leftSelected: boolean = useMemo(\n    () => leftItems.some((i) => i.selected),\n    [leftItems]\n  );\n  const rightSelected: boolean = useMemo(\n    () => rightItems.some((i) => i.selected),\n    [rightItems]\n  );\n\n  const transferLeftToRight = useCallback(\n    (transferAll: boolean) => {\n      if (transferAll) {\n        setRightItems((items) => items.concat(leftItems));\n        setLeftItems([]);\n      } else {\n        setRightItems((items) =>\n          items.concat(leftItems.filter((i) => i.selected))\n        );\n        setLeftItems((items) => items.filter((i) => !i.selected));\n      }\n    },\n    [leftItems, setLeftItems, setRightItems]\n  );\n\n  const transferRightToLeft = useCallback(\n    (transferAll: boolean) => {\n      if (transferAll) {\n        setLeftItems((items) => items.concat(rightItems));\n        setRightItems([]);\n      } else {\n        setLeftItems((items) =>\n          items.concat(rightItems.filter((i) => i.selected))\n        );\n        setRightItems((items) => items.filter((i) => !i.selected));\n      }\n    },\n    [rightItems, setLeftItems, setRightItems]\n  );\n\n  return (\n    <Paper p='sm' withBorder style={{ width: '100%' }}>\n      <Stack gap='xs'>\n        <Group justify='space-between'>\n          <Text>{t`Available`}</Text>\n          <Text>{t`Selected`}</Text>\n        </Group>\n\n        <Group justify='space-aprt' wrap='nowrap' align='flex-start'>\n          <TransferListGroup\n            items={leftItems}\n            itemSwitched={() => {}}\n            itemSelected={leftToggled}\n          />\n\n          <Stack gap='xs' flex={1}>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={leftItems.length == 0}\n              onClick={() => transferLeftToRight(true)}\n            >\n              <IconCircleChevronRight />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={!leftSelected}\n              onClick={() => transferLeftToRight(false)}\n            >\n              <IconChevronRight />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={!rightSelected}\n              onClick={() => transferRightToLeft(false)}\n            >\n              <IconChevronLeft />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={rightItems.length == 0}\n              onClick={() => transferRightToLeft(true)}\n            >\n              <IconCircleChevronLeft />\n            </ActionIcon>\n          </Stack>\n\n          <TransferListGroup\n            items={rightItems}\n            itemSelected={rightToggled}\n            itemSwitched={() => {}}\n          />\n        </Group>\n        <Divider />\n        <Group justify='right' gap='xs'>\n          <Tooltip label={t`Save`}>\n            <Button\n              color='green'\n              onClick={() => {\n                onSave?.(rightItems);\n              }}\n              leftSection={<IconCircleCheck />}\n            >\n              {t`Save`}\n            </Button>\n          </Tooltip>\n        </Group>\n      </Stack>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Accordion, Alert, LoadingOverlay, Stack, Text } from '@mantine/core';\nimport {\n  IconInfoCircle,\n  IconKey,\n  IconLock,\n  IconLockOpen,\n  IconUserCircle\n} from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/index';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { showNotification } from '@mantine/notifications';\nimport { useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api } from '../../App';\nimport { EditApiForm } from '../../components/forms/ApiForm';\nimport { StylishText } from '../../components/items/StylishText';\nimport {\n  TransferList,\n  type TransferListItem\n} from '../../components/items/TransferList';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport { showApiErrorMessage } from '../../functions/notifications';\nimport {\n  useApiFormModal,\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { BooleanColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport type { GroupDetailI } from './GroupTable';\n\nexport interface UserDetailI {\n  pk: number;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  groups: GroupDetailI[];\n  is_active: boolean;\n  is_staff: boolean;\n  is_superuser: boolean;\n}\n\nexport function UserDrawer({\n  id,\n  refreshTable\n}: Readonly<{\n  id: string;\n  refreshTable: () => void;\n}>) {\n  const {\n    instance: userDetail,\n    refreshInstance,\n    instanceQuery: { isFetching, error }\n  } = useInstance<UserDetailI>({\n    endpoint: ApiEndpoints.user_list,\n    pk: id\n  });\n\n  const currentUserPk = useUserState(useShallow((s) => s.user?.pk));\n  const isCurrentUser = useMemo(\n    () => currentUserPk === Number.parseInt(id, 10),\n    [currentUserPk, id]\n  );\n\n  const userGroups = useInstance({\n    endpoint: ApiEndpoints.group_list,\n    hasPrimaryKey: false,\n    defaultValue: []\n  });\n\n  const availableGroups: TransferListItem[] = useMemo(() => {\n    return (\n      userGroups.instance?.map((group: any) => {\n        return {\n          value: group.pk,\n          label: group.name\n        };\n      }) ?? []\n    );\n  }, [userGroups.instance]);\n\n  const selectedGroups: TransferListItem[] = useMemo(() => {\n    return (\n      userDetail?.groups?.map((group: any) => {\n        return {\n          value: group.pk,\n          label: group.name\n        };\n      }) ?? []\n    );\n  }, [userDetail]);\n\n  const onSaveGroups = useCallback(\n    (selected: TransferListItem[]) => {\n      if (!userDetail.pk) {\n        return;\n      }\n      api\n        .patch(apiUrl(ApiEndpoints.user_list, userDetail.pk), {\n          group_ids: selected.map((group) => group.value)\n        })\n        .then(() => {\n          showNotification({\n            title: t`Groups updated`,\n            message: t`User groups updated successfully`,\n            color: 'green'\n          });\n        })\n        .catch((error) => {\n          showApiErrorMessage({\n            error: error,\n            title: t`Error updating user groups`\n          });\n        })\n        .finally(() => {\n          refreshInstance();\n          refreshTable();\n        });\n    },\n    [userDetail]\n  );\n\n  if (isFetching) {\n    return <LoadingOverlay visible={true} />;\n  }\n\n  if (error) {\n    return (\n      <Text>\n        {(error as any)?.response?.status === 404 ? (\n          <Trans>User with id {id} not found</Trans>\n        ) : (\n          <Trans>An error occurred while fetching user details</Trans>\n        )}\n      </Text>\n    );\n  }\n\n  return (\n    <Stack gap='xs'>\n      <Accordion defaultValue={'details'}>\n        <Accordion.Item key='details' value='details'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>User Details</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EditApiForm\n              props={{\n                url: ApiEndpoints.user_list,\n                pk: id,\n                fields: {\n                  username: {},\n                  first_name: {},\n                  last_name: {},\n                  email: {},\n                  is_active: {\n                    label: t`Is Active`,\n                    description: t`Designates whether this user should be treated as active. Unselect this instead of deleting accounts.`,\n                    disabled: isCurrentUser\n                  },\n                  is_staff: {\n                    label: t`Is Staff`,\n                    description: t`Designates whether the user can log into the django admin site.`,\n                    disabled: isCurrentUser\n                  },\n                  is_superuser: {\n                    label: t`Is Superuser`,\n                    description: t`Designates that this user has all permissions without explicitly assigning them.`,\n                    disabled: isCurrentUser\n                  }\n                },\n                postFormContent: isCurrentUser ? (\n                  <Alert\n                    title={<Trans>Info</Trans>}\n                    color='blue'\n                    icon={<IconInfoCircle />}\n                  >\n                    <Trans>\n                      You cannot edit the rights for the currently logged-in\n                      user.\n                    </Trans>\n                  </Alert>\n                ) : undefined,\n                onFormSuccess: () => {\n                  refreshTable();\n                  refreshInstance();\n                }\n              }}\n              id={`user-detail-drawer-${id}`}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item key='groups' value='groups'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>User Groups</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <TransferList\n              available={availableGroups}\n              selected={selectedGroups}\n              onSave={onSaveGroups}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Stack>\n  );\n}\n\n/**\n * Table for displaying list of users\n */\nexport function UserTable({\n  directLink\n}: Readonly<{\n  directLink?: boolean;\n}>) {\n  const table = useTable('users');\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const openDetailDrawer = useCallback(\n    (pk: number) => {\n      if (user.hasChangePermission(ModelType.user)) {\n        navigate(`user-${pk}/`);\n      }\n    },\n    [user]\n  );\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'username',\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'first_name',\n        sortable: true\n      },\n      {\n        accessor: 'last_name',\n        sortable: true\n      },\n      {\n        accessor: 'email',\n        sortable: true\n      },\n      {\n        accessor: 'groups',\n        title: t`Groups`,\n        sortable: true,\n        switchable: true,\n        render: (record: any) => {\n          return record.groups.length;\n        }\n      },\n      BooleanColumn({\n        accessor: 'is_staff'\n      }),\n      BooleanColumn({\n        accessor: 'is_superuser'\n      }),\n      BooleanColumn({\n        accessor: 'is_active'\n      })\n    ];\n  }, []);\n\n  // Row Actions\n  const [selectedUser, setSelectedUser] = useState<number>(-1);\n\n  const rowActions = useCallback(\n    (record: UserDetailI): RowAction[] => {\n      const staff: boolean = user.isStaff() || user.isSuperuser();\n      return [\n        RowEditAction({\n          onClick: () => openDetailDrawer(record.pk),\n          hidden: !staff || !user.hasChangePermission(ModelType.user)\n        }),\n        RowDeleteAction({\n          hidden: !staff || !user.hasDeletePermission(ModelType.user),\n          onClick: () => {\n            setSelectedUser(record.pk);\n            deleteUser.open();\n          }\n        }),\n        {\n          icon: <IconUserCircle />,\n          title: t`Open Profile`,\n          onClick: () => {\n            navigate(getDetailUrl(ModelType.user, record.pk));\n          }\n        },\n        {\n          icon: <IconKey />,\n          title: t`Change Password`,\n          color: 'blue',\n          onClick: () => {\n            setSelectedUser(record.pk);\n            setPassword.open();\n          },\n          hidden: !user.isSuperuser()\n        },\n        {\n          icon: <IconLock />,\n          title: t`Lock user`,\n          color: 'blue',\n          onClick: () => {\n            setUserActiveState(record.pk, false);\n            table.refreshTable();\n          },\n          hidden: !record.is_active\n        },\n        {\n          icon: <IconLockOpen />,\n          title: t`Unlock user`,\n          color: 'blue',\n          onClick: () => {\n            setUserActiveState(record.pk, true);\n            table.refreshTable();\n          },\n          hidden: record.is_active\n        }\n      ];\n    },\n    [user]\n  );\n\n  const deleteUser = useDeleteApiFormModal({\n    url: ApiEndpoints.user_list,\n    pk: selectedUser,\n    title: t`Delete user`,\n    successMessage: t`User deleted`,\n    table: table,\n    preFormWarning: t`Are you sure you want to delete this user?`\n  });\n\n  // Table Actions - Add New User\n  const newUser = useCreateApiFormModal({\n    url: ApiEndpoints.user_list,\n    title: t`Add User`,\n    fields: {\n      username: {},\n      email: {},\n      first_name: {},\n      last_name: {}\n    },\n    table: table,\n    successMessage: t`Added user`\n  });\n\n  const setPassword = useApiFormModal({\n    url: ApiEndpoints.user_set_password,\n    method: 'PUT',\n    pk: selectedUser,\n    title: t`Set Password`,\n    fields: {\n      password: { field_type: 'password' },\n      override_warning: {}\n    },\n    successMessage: t`Password updated`\n  });\n\n  const tableActions = useMemo(() => {\n    const actions = [];\n    const staff: boolean = user.isStaff() || user.isSuperuser();\n\n    actions.push(\n      <AddItemButton\n        key='add-user'\n        onClick={newUser.open}\n        tooltip={t`Add user`}\n        hidden={!staff || !user.hasAddPermission(ModelType.user)}\n      />\n    );\n\n    return actions;\n  }, [user]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'is_active',\n        label: t`Active`,\n        description: t`Show active users`\n      },\n      {\n        name: 'is_staff',\n        label: t`Staff`,\n        description: t`Show staff users`\n      },\n      {\n        name: 'is_superuser',\n        label: t`Superuser`,\n        description: t`Show superusers`\n      }\n    ];\n  }, []);\n\n  // Determine whether the UserTable is editable\n  const editable: boolean = useMemo(\n    () => !directLink && user.isStaff() && user.hasChangeRole(UserRoles.admin),\n    [user, directLink]\n  );\n\n  return (\n    <>\n      {editable && setPassword.modal}\n      {editable && newUser.modal}\n      {editable && deleteUser.modal}\n      {editable && (\n        <DetailDrawer\n          size='xl'\n          title={t`Edit User`}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('user-')) return false;\n            return (\n              <UserDrawer\n                id={id.replace('user-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.user_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          rowActions: editable ? rowActions : undefined,\n          tableActions: editable ? tableActions : undefined,\n          tableFilters: tableFilters,\n          onRowClick: editable\n            ? (record) => openDetailDrawer(record.pk)\n            : undefined,\n          modelType: directLink ? ModelType.user : undefined\n        }}\n      />\n    </>\n  );\n}\n\nasync function setUserActiveState(userId: number, active: boolean) {\n  try {\n    await api.patch(apiUrl(ApiEndpoints.user_list, userId), {\n      is_active: active\n    });\n    showNotification({\n      title: t`User updated`,\n      message: t`User updated successfully`,\n      color: 'green'\n    });\n  } catch (error) {\n    showApiErrorMessage({\n      error: error,\n      title: t`Error updating user`\n    });\n  }\n}\n"],"names":["GroupDrawer","id","refreshTable","instance","refreshInstance","instanceQuery","isFetching","error","useInstance","endpoint","ApiEndpoints","group_list","pk","params","permission_detail","role_detail","user_detail","groupRoles","useMemo","roles","jsx","LoadingOverlay","Text","response","status","_Trans","values","Stack","jsxs","Accordion","StylishText","EditApiForm","url","fields","name","label","_i18n","_","description","onFormSuccess","RoleTable","GroupTable","directLink","table","useTable","navigate","useNavigate","user","useUserState","openDetailDrawer","useCallback","hasChangePermission","ModelType","group","columns","accessor","sortable","title","switchable","rowActions","record","RowEditAction","onClick","hidden","RowDeleteAction","hasDeletePermission","setSelectedGroup","deleteGroup","open","icon","IconUsersGroup","getDetailUrl","selectedGroup","useState","useDeleteApiFormModal","successMessage","preFormWarning","newGroup","useCreateApiFormModal","tableActions","actions","push","AddItemButton","hasAddPermission","editable","isStaff","hasChangeRole","UserRoles","admin","modal","DetailDrawer","startsWith","replace","InvenTreeTable","apiUrl","undefined","modelType","onRowClick","TransferListGroup","items","itemSelected","itemSwitched","Paper","width","height","verticalAlign","map","item","cursor","backgroundColor","selected","value","length","TransferList","available","onSave","leftItems","setLeftItems","rightItems","setRightItems","useEffect","filter","some","i","leftToggled","rightToggled","leftSelected","rightSelected","transferLeftToRight","transferAll","concat","transferRightToLeft","Group","ActionIcon","IconCircleChevronRight","IconChevronRight","IconChevronLeft","IconCircleChevronLeft","Divider","Tooltip","Button","IconCircleCheck","UserDrawer","userDetail","user_list","currentUserPk","useShallow","s","isCurrentUser","Number","parseInt","userGroups","hasPrimaryKey","defaultValue","availableGroups","selectedGroups","groups","onSaveGroups","api","patch","group_ids","then","showNotification","message","color","catch","showApiErrorMessage","finally","username","first_name","last_name","email","is_active","disabled","is_staff","is_superuser","postFormContent","Alert","IconInfoCircle","UserTable","render","BooleanColumn","selectedUser","setSelectedUser","staff","isSuperuser","deleteUser","IconUserCircle","IconKey","setPassword","IconLock","IconLockOpen","newUser","useApiFormModal","user_set_password","method","password","field_type","override_warning","tableFilters","setUserActiveState","userId","active"],"mappings":"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"}
