{"version":3,"file":"AuthenticationForm-Car469Ei.js","sources":["../../../../../../frontend/src/components/buttons/SSOButton.tsx","../../../../../../frontend/src/components/forms/AuthenticationForm.tsx"],"sourcesContent":["import { Button, Tooltip } from '@mantine/core';\nimport {\n  IconBrandAzure,\n  IconBrandBitbucket,\n  IconBrandDiscord,\n  IconBrandFacebook,\n  IconBrandFlickr,\n  IconBrandGithub,\n  IconBrandGitlab,\n  IconBrandGoogle,\n  IconBrandReddit,\n  IconBrandTwitch,\n  IconBrandTwitter,\n  IconLogin\n} from '@tabler/icons-react';\n\nimport type { AuthProvider } from '@lib/types/Auth';\nimport { t } from '@lingui/core/macro';\nimport { ProviderLogin } from '../../functions/auth';\n\nimport type { JSX } from 'react';\n\nconst brandIcons: { [key: string]: JSX.Element } = {\n  google: <IconBrandGoogle />,\n  github: <IconBrandGithub />,\n  facebook: <IconBrandFacebook />,\n  discord: <IconBrandDiscord />,\n  twitter: <IconBrandTwitter />,\n  bitbucket: <IconBrandBitbucket />,\n  flickr: <IconBrandFlickr />,\n  gitlab: <IconBrandGitlab />,\n  reddit: <IconBrandReddit />,\n  twitch: <IconBrandTwitch />,\n  microsoft: <IconBrandAzure />\n};\n\nexport function SsoButton({ provider }: Readonly<{ provider: AuthProvider }>) {\n  return (\n    <Tooltip\n      label={t`You will be redirected to the provider for further actions.`}\n    >\n      <Button\n        leftSection={getBrandIcon(provider)}\n        radius='xl'\n        component='a'\n        onClick={() => ProviderLogin(provider)}\n      >\n        {provider.name}\n      </Button>\n    </Tooltip>\n  );\n}\nfunction getBrandIcon(provider: AuthProvider) {\n  return brandIcons[provider.id] || <IconLogin />;\n}\n","import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Alert,\n  Anchor,\n  Button,\n  Divider,\n  Group,\n  Loader,\n  PasswordInput,\n  Stack,\n  Text,\n  TextInput,\n  VisuallyHidden\n} from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { useDisclosure } from '@mantine/hooks';\nimport { showNotification } from '@mantine/notifications';\nimport { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api } from '../../App';\nimport {\n  doBasicLogin,\n  doSimpleLogin,\n  ensureCsrf,\n  followRedirect\n} from '../../functions/auth';\nimport { showLoginNotification } from '../../functions/notifications';\nimport { useServerApiState } from '../../states/ServerApiState';\nimport { useUserState } from '../../states/UserState';\nimport { SsoButton } from '../buttons/SSOButton';\nimport { errorCodeLink } from '../nav/Alerts';\n\nexport function AuthenticationForm() {\n  const classicForm = useForm({\n    initialValues: { username: '', password: '', code: '' }\n  });\n  const simpleForm = useForm({ initialValues: { email: '' } });\n  const [classicLoginMode, setMode] = useDisclosure(true);\n  const [auth_config, sso_enabled, password_forgotten_enabled] =\n    useServerApiState(\n      useShallow((state) => [\n        state.auth_config,\n        state.sso_enabled,\n        state.password_forgotten_enabled\n      ])\n    );\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { isLoggedIn } = useUserState();\n\n  const [isLoggingIn, setIsLoggingIn] = useState<boolean>(false);\n\n  function handleLogin() {\n    setIsLoggingIn(true);\n\n    if (classicLoginMode === true) {\n      doBasicLogin(\n        classicForm.values.username,\n        classicForm.values.password,\n\n        navigate,\n        classicForm.values.code\n      )\n        .then((success) => {\n          setIsLoggingIn(false);\n\n          if (isLoggedIn()) {\n            showLoginNotification({\n              title: t`Login successful`,\n              message: t`Logged in successfully`\n            });\n            followRedirect(navigate, location?.state);\n          } else if (success) {\n            // MFA login\n          } else {\n            showLoginNotification({\n              title: t`Login failed`,\n              message: t`Check your input and try again.`,\n              success: false\n            });\n          }\n        })\n        .catch(() => {\n          showNotification({\n            title: t`Login failed`,\n            message: t`Check your input and try again.`,\n            color: 'red'\n          });\n        });\n    } else {\n      doSimpleLogin(simpleForm.values.email).then((ret) => {\n        setIsLoggingIn(false);\n\n        if (ret?.status === 'ok') {\n          showLoginNotification({\n            title: t`Mail delivery successful`,\n            message: t`Check your inbox for the login link. If you have an account, you will receive a login link. Check in spam too.`\n          });\n        } else {\n          showLoginNotification({\n            title: t`Mail delivery failed`,\n            message: t`Check your input and try again.`,\n            success: false\n          });\n        }\n      });\n    }\n  }\n\n  return (\n    <>\n      {sso_enabled() ? (\n        <>\n          <Group grow mb='md' mt='md'>\n            {auth_config?.socialaccount.providers.map((provider) => (\n              <SsoButton provider={provider} key={provider.id} />\n            ))}\n          </Group>\n\n          <Divider\n            label={t`Or continue with other methods`}\n            labelPosition='center'\n            my='lg'\n          />\n        </>\n      ) : null}\n      <form onSubmit={classicForm.onSubmit(() => {})}>\n        {classicLoginMode ? (\n          <Stack gap={0}>\n            <TextInput\n              required\n              label={t`Username`}\n              aria-label='login-username'\n              placeholder={t`Your username`}\n              {...classicForm.getInputProps('username')}\n            />\n            <PasswordInput\n              required\n              label={t`Password`}\n              aria-label='login-password'\n              placeholder={t`Your password`}\n              {...classicForm.getInputProps('password')}\n            />\n            <VisuallyHidden>\n              <TextInput\n                name='TOTP'\n                {...classicForm.getInputProps('code')}\n                hidden={true}\n              />\n            </VisuallyHidden>\n            {password_forgotten_enabled() === true && (\n              <Group justify='space-between' mt='0'>\n                <Anchor\n                  component='button'\n                  type='button'\n                  c='dimmed'\n                  size='xs'\n                  onClick={() => navigate('/reset-password')}\n                >\n                  <Trans>Reset password</Trans>\n                </Anchor>\n              </Group>\n            )}\n          </Stack>\n        ) : (\n          <Stack>\n            <TextInput\n              required\n              label={t`Email`}\n              description={t`We will send you a link to login - if you are registered`}\n              placeholder='email@example.org'\n              {...simpleForm.getInputProps('email')}\n            />\n          </Stack>\n        )}\n\n        <Group justify='space-between' mt='xl'>\n          <Anchor\n            component='button'\n            type='button'\n            c='dimmed'\n            size='xs'\n            onClick={() => setMode.toggle()}\n          >\n            {classicLoginMode ? (\n              <Trans>Send me an email</Trans>\n            ) : (\n              <Trans>Use username and password</Trans>\n            )}\n          </Anchor>\n          <Button type='submit' disabled={isLoggingIn} onClick={handleLogin}>\n            {isLoggingIn ? (\n              <Loader size='sm' />\n            ) : (\n              <>\n                {classicLoginMode ? (\n                  <Trans>Log In</Trans>\n                ) : (\n                  <Trans>Send Email</Trans>\n                )}\n              </>\n            )}\n          </Button>\n        </Group>\n      </form>\n    </>\n  );\n}\n\nexport function RegistrationForm() {\n  const registrationForm = useForm({\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n      password2: '' as string | undefined\n    }\n  });\n  const navigate = useNavigate();\n  const [auth_config, registration_enabled, sso_registration] =\n    useServerApiState(\n      useShallow((state) => [\n        state.auth_config,\n        state.registration_enabled,\n        state.sso_registration_enabled\n      ])\n    );\n  const [isRegistering, setIsRegistering] = useState<boolean>(false);\n\n  async function handleRegistration() {\n    // check if passwords match\n    if (\n      registrationForm.values.password !== registrationForm.values.password2\n    ) {\n      registrationForm.setFieldError('password2', t`Passwords do not match`);\n      return;\n    }\n    setIsRegistering(true);\n\n    // remove password2 from the request\n    const { password2, ...vals } = registrationForm.values;\n    await ensureCsrf();\n\n    api\n      .post(apiUrl(ApiEndpoints.auth_signup), vals, {\n        headers: { Authorization: '' }\n      })\n      .then((ret) => {\n        if (ret?.status === 200) {\n          setIsRegistering(false);\n          showLoginNotification({\n            title: t`Registration successful`,\n            message: t`Please confirm your email address to complete the registration`\n          });\n          navigate('/home');\n        }\n      })\n      .catch((err) => {\n        if (err.response?.status === 400) {\n          setIsRegistering(false);\n\n          // collect all errors per field\n          const errors: { [key: string]: string[] } = {};\n          for (const val of err.response.data.errors) {\n            if (!errors[val.param]) {\n              errors[val.param] = [];\n            }\n            errors[val.param].push(val.message);\n          }\n\n          for (const key in errors) {\n            registrationForm.setFieldError(key, errors[key]);\n          }\n\n          showLoginNotification({\n            title: t`Input error`,\n            message: t`Check your input and try again. `,\n            success: false\n          });\n        }\n      });\n  }\n\n  const both_reg_enabled = registration_enabled() && sso_registration();\n  return (\n    <>\n      {registration_enabled() && (\n        <form onSubmit={registrationForm.onSubmit(() => {})}>\n          <Stack gap={0}>\n            <TextInput\n              required\n              label={t`Username`}\n              aria-label='register-username'\n              placeholder={t`Your username`}\n              {...registrationForm.getInputProps('username')}\n            />\n            <TextInput\n              required\n              label={t`Email`}\n              aria-label='register-email'\n              description={t`This will be used for a confirmation`}\n              placeholder='email@example.org'\n              {...registrationForm.getInputProps('email')}\n            />\n            <PasswordInput\n              required\n              label={t`Password`}\n              aria-label='register-password'\n              placeholder={t`Your password`}\n              {...registrationForm.getInputProps('password')}\n            />\n            <PasswordInput\n              required\n              label={t`Password repeat`}\n              aria-label='register-password-repeat'\n              placeholder={t`Repeat password`}\n              {...registrationForm.getInputProps('password2')}\n            />\n          </Stack>\n\n          <Group justify='space-between' mt='xl'>\n            <Button\n              type='submit'\n              disabled={isRegistering}\n              onClick={handleRegistration}\n              fullWidth\n            >\n              <Trans>Register</Trans>\n            </Button>\n          </Group>\n        </form>\n      )}\n      {both_reg_enabled && (\n        <Divider label={t`Or use SSO`} labelPosition='center' my='lg' />\n      )}\n      {sso_registration() && (\n        <Group grow mb='md' mt='md'>\n          {auth_config?.socialaccount.providers.map((provider) => (\n            <SsoButton provider={provider} key={provider.id} />\n          ))}\n        </Group>\n      )}\n      {!registration_enabled() && !sso_registration() && (\n        <Alert title={t`Registration not active`} color='orange'>\n          <Text>{t`This might be related to missing mail settings or could be a deliberate decision.`}</Text>\n          {errorCodeLink('INVE-W11')}\n        </Alert>\n      )}\n    </>\n  );\n}\n"],"names":["brandIcons","google","IconBrandGoogle","github","IconBrandGithub","facebook","IconBrandFacebook","discord","IconBrandDiscord","twitter","IconBrandTwitter","bitbucket","IconBrandBitbucket","flickr","IconBrandFlickr","gitlab","IconBrandGitlab","reddit","IconBrandReddit","twitch","IconBrandTwitch","microsoft","IconBrandAzure","SsoButton","provider","jsx","Tooltip","_i18n","_","id","Button","getBrandIcon","ProviderLogin","name","IconLogin","AuthenticationForm","classicForm","useForm","initialValues","username","password","code","simpleForm","email","classicLoginMode","setMode","useDisclosure","auth_config","sso_enabled","password_forgotten_enabled","useServerApiState","useShallow","state","navigate","useNavigate","location","useLocation","isLoggedIn","useUserState","isLoggingIn","setIsLoggingIn","useState","handleLogin","doBasicLogin","values","then","success","showLoginNotification","title","message","catch","showNotification","color","doSimpleLogin","ret","status","jsxs","Fragment","Group","socialaccount","providers","map","Divider","onSubmit","Stack","TextInput","getInputProps","PasswordInput","VisuallyHidden","Anchor","_Trans","toggle","Loader","RegistrationForm","registrationForm","password2","registration_enabled","sso_registration","sso_registration_enabled","isRegistering","setIsRegistering","handleRegistration","setFieldError","vals","ensureCsrf","api","post","apiUrl","ApiEndpoints","auth_signup","headers","Authorization","err","response","errors","val","data","param","push","key","both_reg_enabled","Alert","Text","errorCodeLink"],"mappings":"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"}
