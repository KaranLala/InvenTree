{"version":3,"file":"Login-BNHMTe0x.js","sources":["../../../../../../frontend/src/components/items/LanguageToggle.tsx","../../../../../../frontend/src/components/forms/AuthFormOptions.tsx","../../../../../../frontend/src/components/forms/HostOptionsForm.tsx","../../../../../../frontend/src/components/forms/InstanceOptions.tsx","../../../../../../frontend/src/pages/Auth/Login.tsx"],"sourcesContent":["import { ActionIcon, Group, Tooltip } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconLanguage } from '@tabler/icons-react';\n\nimport { t } from '@lingui/core/macro';\nimport { LanguageSelect } from './LanguageSelect';\n\nexport function LanguageToggle() {\n  const [open, toggle] = useDisclosure();\n\n  return (\n    <Group\n      justify='center'\n      style={{\n        border: open === true ? '1px dashed' : '',\n        margin: open === true ? 2 : 12,\n        padding: open === true ? 8 : 0\n      }}\n      aria-label='Open language options'\n    >\n      <Tooltip label={t`Select language`}>\n        <ActionIcon\n          onClick={() => toggle.toggle()}\n          size='lg'\n          variant='transparent'\n          aria-label='Language toggle'\n        >\n          <IconLanguage />\n        </ActionIcon>\n      </Tooltip>\n      {open && (\n        <Group>\n          <LanguageSelect />\n        </Group>\n      )}\n    </Group>\n  );\n}\n","import { ActionIcon, Center, Group, Text, Tooltip } from '@mantine/core';\nimport { IconServer } from '@tabler/icons-react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport { useServerApiState } from '../../states/ServerApiState';\nimport { ColorToggle } from '../items/ColorToggle';\nimport { LanguageToggle } from '../items/LanguageToggle';\n\nexport function AuthFormOptions({\n  hostname,\n  toggleHostEdit\n}: Readonly<{\n  hostname: string;\n  toggleHostEdit: () => void;\n}>) {\n  const [server] = useServerApiState(useShallow((state) => [state.server]));\n\n  return (\n    <Center mx={'md'}>\n      <Group>\n        <ColorToggle />\n        <LanguageToggle />\n        {window.INVENTREE_SETTINGS.show_server_selector && (\n          <Tooltip label={hostname}>\n            <ActionIcon\n              size='lg'\n              variant='transparent'\n              onClick={toggleHostEdit}\n            >\n              <IconServer />\n            </ActionIcon>\n          </Tooltip>\n        )}\n        <Text c={'dimmed'}>\n          {server.version} | {server.apiVersion}\n        </Text>\n      </Group>\n    </Center>\n  );\n}\n","import type { HostList } from '@lib/types/Server';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  ActionIcon,\n  Box,\n  Button,\n  Group,\n  Space,\n  Text,\n  TextInput\n} from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { randomId } from '@mantine/hooks';\nimport { IconSquarePlus, IconTrash } from '@tabler/icons-react';\n\nexport function HostOptionsForm({\n  data,\n  saveOptions\n}: Readonly<{\n  data: HostList;\n  saveOptions: (newData: HostList) => void;\n}>) {\n  const form = useForm({ initialValues: data });\n  function deleteItem(key: string) {\n    const newData = form.values;\n    delete newData[key];\n    form.setValues(newData);\n  }\n\n  const fields = Object.entries(form.values).map(([key]) => (\n    <Group key={key} mt='xs'>\n      {form.values[key] !== undefined && (\n        <>\n          <TextInput\n            placeholder={t`Host`}\n            withAsterisk\n            style={{ flex: 1 }}\n            {...form.getInputProps(`${key}.host`)}\n          />\n          <TextInput\n            placeholder={t`Name`}\n            withAsterisk\n            style={{ flex: 1 }}\n            {...form.getInputProps(`${key}.name`)}\n          />\n          <ActionIcon\n            color='red'\n            onClick={() => {\n              deleteItem(key);\n            }}\n            variant='default'\n          >\n            <IconTrash />\n          </ActionIcon>\n        </>\n      )}\n    </Group>\n  ));\n\n  return (\n    <form onSubmit={form.onSubmit(saveOptions)}>\n      <Box style={{ maxWidth: 500 }} mx='auto'>\n        {fields.length > 0 ? (\n          <Group mb='xs'>\n            <Text fw={500} size='sm' style={{ flex: 1 }}>\n              <Trans>Host</Trans>\n            </Text>\n            <Text fw={500} size='sm' style={{ flex: 1 }}>\n              <Trans>Name</Trans>\n            </Text>\n          </Group>\n        ) : (\n          <Text c='dimmed' ta='center'>\n            <Trans>No one here...</Trans>\n          </Text>\n        )}\n        {fields}\n        <Group mt='md'>\n          <Button\n            onClick={() =>\n              form.setFieldValue(`${randomId()}`, { name: '', host: '' })\n            }\n          >\n            <IconSquarePlus />\n            <Trans>Add Host</Trans>\n          </Button>\n          <Space style={{ flex: 1 }} />\n          <Button type='submit'>\n            <Trans>Save</Trans>\n          </Button>\n        </Group>\n      </Box>\n    </form>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  ActionIcon,\n  Divider,\n  Group,\n  Select,\n  Table,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport { useToggle } from '@mantine/hooks';\nimport {\n  IconApi,\n  IconCircleCheck,\n  IconEdit,\n  IconInfoCircle,\n  IconPlugConnected,\n  IconServer,\n  IconServerSpark\n} from '@tabler/icons-react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport type { HostList } from '@lib/types/Server';\nimport { useShallow } from 'zustand/react/shallow';\nimport { Wrapper } from '../../pages/Auth/Layout';\nimport { useLocalState } from '../../states/LocalState';\nimport { useServerApiState } from '../../states/ServerApiState';\nimport { HostOptionsForm } from './HostOptionsForm';\n\nexport function InstanceOptions({\n  hostKey,\n  ChangeHost,\n  setHostEdit\n}: Readonly<{\n  hostKey: string;\n  ChangeHost: (newHost: string | null) => void;\n  setHostEdit: () => void;\n}>) {\n  const [hostListEdit, setHostListEdit] = useToggle([false, true] as const);\n  const [setHost, setHostList, hostList] = useLocalState(\n    useShallow((state) => [state.setHost, state.setHostList, state.hostList])\n  );\n  const hostListData = Object.keys(hostList).map((key) => ({\n    value: key,\n    label: hostList[key]?.name\n  }));\n\n  function SaveOptions(newHostList: HostList): void {\n    setHostList(newHostList);\n    if (newHostList[hostKey] === undefined) {\n      setHost('', '');\n    }\n    setHostListEdit();\n  }\n\n  return (\n    <Wrapper titleText={t`Select Server`} smallPadding>\n      <Group gap='xs' justify='space-between' wrap='nowrap'>\n        <Select\n          style={{ width: '100%' }}\n          value={hostKey}\n          onChange={ChangeHost}\n          data={hostListData}\n          disabled={hostListEdit}\n        />\n        <Group gap='xs' wrap='nowrap'>\n          <Tooltip label={t`Edit host options`} position='top'>\n            <ActionButton\n              variant='transparent'\n              disabled={hostListEdit}\n              onClick={setHostListEdit}\n              icon={<IconEdit />}\n            />\n          </Tooltip>\n          <Tooltip label={t`Save host selection`} position='top'>\n            <ActionButton\n              variant='transparent'\n              onClick={setHostEdit}\n              disabled={hostListEdit}\n              icon={<IconCircleCheck />}\n              color='green'\n            />\n          </Tooltip>\n        </Group>\n      </Group>\n\n      {hostListEdit ? (\n        <>\n          <Divider my={'sm'} />\n          <Text>\n            <Trans>Edit host options</Trans>\n          </Text>\n          <HostOptionsForm data={hostList} saveOptions={SaveOptions} />\n        </>\n      ) : (\n        <>\n          <Divider my={'sm'} />\n          <ServerInfo hostList={hostList} hostKey={hostKey} />\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\nfunction ServerInfo({\n  hostList,\n  hostKey\n}: Readonly<{\n  hostList: HostList;\n  hostKey: string;\n}>) {\n  const [server] = useServerApiState(useShallow((state) => [state.server]));\n\n  const items: any[] = [\n    {\n      key: 'server',\n      label: t`Server`,\n      value: hostList[hostKey]?.host,\n      icon: <IconServer />\n    },\n    {\n      key: 'name',\n      label: t`Name`,\n      value: server.instance,\n      icon: <IconInfoCircle />\n    },\n    {\n      key: 'version',\n      label: t`Version`,\n      value: server.version,\n      icon: <IconInfoCircle />\n    },\n    {\n      key: 'api',\n      label: t`API Version`,\n      value: server.apiVersion,\n      icon: <IconApi />\n    },\n    {\n      key: 'plugins',\n      label: t`Plugins`,\n      value: server.plugins_enabled ? t`Enabled` : t`Disabled`,\n      icon: <IconPlugConnected />,\n      color: server.plugins_enabled ? 'green' : 'red'\n    },\n    {\n      key: 'worker',\n      label: t`Worker`,\n      value: server.worker_running ? t`Running` : t`Stopped`,\n      icon: <IconServerSpark />,\n      color: server.worker_running ? 'green' : 'red'\n    }\n  ];\n\n  return (\n    <Table striped p='xs'>\n      <Table.Tbody>\n        {items.map((item) => (\n          <Table.Tr key={item.key} p={2}>\n            <Table.Td>\n              <ActionIcon size='xs' variant='transparent' color={item.color}>\n                {item.icon}\n              </ActionIcon>\n            </Table.Td>\n            <Table.Td>\n              <Text size='sm'>{item.label}</Text>\n            </Table.Td>\n            <Table.Td>\n              <Text size='sm'>{item.value}</Text>\n            </Table.Td>\n          </Table.Tr>\n        ))}\n      </Table.Tbody>\n    </Table>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Anchor, Divider, Group, Loader, Text } from '@mantine/core';\nimport { useToggle } from '@mantine/hooks';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'react-router-dom';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport { setApiDefaults } from '../../App';\nimport { AuthFormOptions } from '../../components/forms/AuthFormOptions';\nimport { AuthenticationForm } from '../../components/forms/AuthenticationForm';\nimport { InstanceOptions } from '../../components/forms/InstanceOptions';\nimport { defaultHostKey } from '../../defaults/defaultHostList';\nimport {\n  checkLoginState,\n  doBasicLogin,\n  followRedirect\n} from '../../functions/auth';\nimport { useLocalState } from '../../states/LocalState';\nimport { useServerApiState } from '../../states/ServerApiState';\nimport { Wrapper } from './Layout';\n\nexport default function Login() {\n  const [hostKey, setHost, hostList] = useLocalState(\n    useShallow((state) => [state.hostKey, state.setHost, state.hostList])\n  );\n  const [server, fetchServerApiState] = useServerApiState(\n    useShallow((state) => [state.server, state.fetchServerApiState])\n  );\n  const [isLoggingIn, setIsLoggingIn] = useState<boolean>(false);\n  const hostname =\n    hostList[hostKey] === undefined ? t`No selection` : hostList[hostKey]?.name;\n  const [hostEdit, setHostEdit] = useToggle([false, true] as const);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const [sso_registration, registration_enabled] = useServerApiState(\n    useShallow((state) => [\n      state.sso_registration_enabled,\n      state.registration_enabled\n    ])\n  );\n  const any_reg_enabled = registration_enabled() || sso_registration() || false;\n\n  const LoginMessage = useMemo(() => {\n    const val = server.customize?.login_message;\n    if (val == undefined) return null;\n    return (\n      <>\n        <Divider my='md' />\n        <Text>\n          <span\n            // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n            dangerouslySetInnerHTML={{ __html: val }}\n          />\n        </Text>\n      </>\n    );\n  }, [server.customize]);\n\n  // Data manipulation functions\n  function ChangeHost(newHost: string | null): void {\n    if (newHost === null) return;\n    setHost(hostList[newHost]?.host, newHost);\n    setApiDefaults();\n    fetchServerApiState();\n  }\n\n  // Set default host to localhost if no host is selected\n  useEffect(() => {\n    if (hostKey === '') {\n      ChangeHost(defaultHostKey);\n    }\n\n    checkLoginState(navigate, location?.state, true);\n\n    // check if we got login params (login and password)\n    if (searchParams.has('login') && searchParams.has('password')) {\n      setIsLoggingIn(true);\n      doBasicLogin(\n        searchParams.get('login') ?? '',\n        searchParams.get('password') ?? '',\n        navigate\n      ).then(() => {\n        followRedirect(navigate, location?.state);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      {hostEdit ? (\n        <InstanceOptions\n          hostKey={hostKey}\n          ChangeHost={ChangeHost}\n          setHostEdit={setHostEdit}\n        />\n      ) : (\n        <>\n          <Wrapper titleText={t`Login`} smallPadding>\n            {isLoggingIn ? (\n              <>\n                <Group justify='center'>\n                  <Loader />\n                </Group>\n                <Trans>Logging you in</Trans>\n              </>\n            ) : (\n              <>\n                <AuthenticationForm />\n                {any_reg_enabled && (\n                  <Text ta='center' size={'xs'} mt={'md'}>\n                    <Trans>Don&apos;t have an account?</Trans>{' '}\n                    <Anchor\n                      component='button'\n                      type='button'\n                      c='dimmed'\n                      size='xs'\n                      onClick={() => navigate('/register')}\n                    >\n                      <Trans>Register</Trans>\n                    </Anchor>\n                  </Text>\n                )}\n                {LoginMessage}{' '}\n              </>\n            )}\n          </Wrapper>\n          <AuthFormOptions hostname={hostname} toggleHostEdit={setHostEdit} />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["LanguageToggle","open","toggle","useDisclosure","jsxs","Group","border","margin","padding","jsx","Tooltip","_i18n","_","id","ActionIcon","IconLanguage","LanguageSelect","AuthFormOptions","hostname","toggleHostEdit","server","useServerApiState","useShallow","state","Center","ColorToggle","window","INVENTREE_SETTINGS","show_server_selector","IconServer","Text","version","apiVersion","HostOptionsForm","data","saveOptions","form","useForm","initialValues","deleteItem","key","newData","values","setValues","fields","Object","entries","map","undefined","Fragment","TextInput","flex","getInputProps","IconTrash","onSubmit","Box","maxWidth","length","_Trans","Button","setFieldValue","randomId","name","host","IconSquarePlus","Space","InstanceOptions","hostKey","ChangeHost","setHostEdit","hostListEdit","setHostListEdit","useToggle","setHost","setHostList","hostList","useLocalState","hostListData","keys","value","label","SaveOptions","newHostList","Wrapper","Select","width","ActionButton","IconEdit","IconCircleCheck","Divider","ServerInfo","items","icon","instance","IconInfoCircle","IconApi","plugins_enabled","IconPlugConnected","color","worker_running","IconServerSpark","Table","item","Login","fetchServerApiState","isLoggingIn","setIsLoggingIn","useState","hostEdit","navigate","useNavigate","location","useLocation","searchParams","useSearchParams","sso_registration","registration_enabled","sso_registration_enabled","any_reg_enabled","LoginMessage","useMemo","val","customize","login_message","__html","newHost","setApiDefaults","useEffect","defaultHostKey","has","doBasicLogin","get","then","Loader","AuthenticationForm","Anchor"],"mappings":"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"}
