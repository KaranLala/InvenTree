{"version":3,"file":"PanelGroup-Dx-tKZpU.js","sources":["../../../../../../frontend/src/components/plugins/PluginPanel.tsx","../../../../../../frontend/src/hooks/UsePluginPanels.tsx","../../../../../../frontend/src/components/panels/PanelGroup.tsx"],"sourcesContent":["import { Stack } from '@mantine/core';\nimport type { ReactNode } from 'react';\n\nimport type { InvenTreePluginContext } from '@lib/types/Plugins';\nimport type { PluginUIFeature } from './PluginUIFeature';\nimport RemoteComponent from './RemoteComponent';\n\n/**\n * A custom panel which can be used to display plugin content.\n *\n * - Content is loaded dynamically (via the API) when a page is first loaded\n * - Content can be provided from an external javascript module, or with raw HTML\n *\n * If content is provided from an external source, it is expected to define a function `render_panel` which will render the content.\n * const render_panel = (element: HTMLElement, params: any) => {...}\n *\n * Where:\n *  - `element` is the HTML element to render the content into\n *  - `params` is the set of run-time parameters to pass to the content rendering function\n */\nexport default function PluginPanelContent({\n  pluginFeature,\n  pluginContext\n}: Readonly<{\n  pluginFeature: PluginUIFeature;\n  pluginContext: InvenTreePluginContext;\n}>): ReactNode {\n  return (\n    <Stack gap='xs'>\n      <RemoteComponent\n        source={pluginFeature.source}\n        defaultFunctionName='renderPanel'\n        context={pluginContext}\n      />\n    </Stack>\n  );\n}\n","import { type UseQueryResult, useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { InvenTreePluginContext } from '@lib/types/Plugins';\nimport { api } from '../App';\nimport { ApiIcon } from '../components/items/ApiIcon';\nimport type { PanelType } from '../components/panels/Panel';\nimport { useInvenTreeContext } from '../components/plugins/PluginContext';\nimport PluginPanelContent from '../components/plugins/PluginPanel';\nimport {\n  type PluginUIFeature,\n  PluginUIFeatureType\n} from '../components/plugins/PluginUIFeature';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\n\n/**\n * Type definition for a plugin panel which extends the standard PanelType\n * @param pluginName - The name of the plugin which provides this panel\n */\nexport type PluginPanelType = PanelType & {\n  pluginName: string;\n  isLoading: boolean;\n};\n\nexport type PluginPanelSet = {\n  panels: PluginPanelType[];\n  query: UseQueryResult;\n  isLoading: boolean;\n};\n\nexport function usePluginPanels({\n  instance,\n  reloadFunc,\n  model,\n  id\n}: {\n  instance?: any;\n  reloadFunc?: () => void;\n  model?: ModelType | string;\n  id?: string | number | null;\n}): PluginPanelSet {\n  const globalSettings = useGlobalSettingsState();\n\n  const pluginPanelsEnabled: boolean = useMemo(\n    () => globalSettings.isSet('ENABLE_PLUGINS_INTERFACE'),\n    [globalSettings]\n  );\n\n  // API query to fetch initial information on available plugin panels\n  const pluginQuery = useQuery({\n    enabled: pluginPanelsEnabled && !!model && id !== undefined,\n    queryKey: ['custom-plugin-panels', model, id],\n    throwOnError: (error: any) => {\n      console.error('ERR: Failed to fetch plugin panels');\n      return false;\n    },\n    queryFn: async () => {\n      if (!pluginPanelsEnabled || !model) {\n        return Promise.resolve([]);\n      }\n\n      const url = apiUrl(ApiEndpoints.plugin_ui_features_list, undefined, {\n        feature_type: PluginUIFeatureType.panel\n      });\n\n      return api\n        .get(url, {\n          params: {\n            target_model: model,\n            target_id: id\n          }\n        })\n        .then((response: any) => response.data);\n    }\n  });\n\n  // Cache the context data which is delivered to the plugins\n  const inventreeContext = useInvenTreeContext();\n\n  const contextData: InvenTreePluginContext =\n    useMemo<InvenTreePluginContext>(() => {\n      return {\n        ...inventreeContext,\n        id: id,\n        model: model,\n        instance: instance,\n        reloadInstance: reloadFunc\n      };\n    }, [model, id, instance, inventreeContext]);\n\n  const pluginPanels: PluginPanelType[] = useMemo(() => {\n    return (\n      pluginQuery?.data?.map((props: PluginUIFeature) => {\n        const iconName: string = props?.icon || 'ti:plug:outline';\n\n        const ctx: InvenTreePluginContext = {\n          ...contextData,\n          context: props.context\n        };\n\n        return {\n          name: props.key,\n          pluginName: props.plugin_name,\n          label: props.title,\n          icon: <ApiIcon name={iconName} />,\n          content: (\n            <PluginPanelContent pluginFeature={props} pluginContext={ctx} />\n          )\n        };\n      }) ?? []\n    );\n  }, [pluginQuery.data, contextData]);\n\n  const panelSet: PluginPanelSet = useMemo(() => {\n    return {\n      panels: pluginPanels,\n      isLoading: pluginQuery.isLoading || pluginQuery.isFetching,\n      query: pluginQuery\n    };\n  }, [pluginPanels, pluginQuery]);\n\n  return panelSet;\n}\n","import {\n  ActionIcon,\n  Box,\n  Divider,\n  Group,\n  Loader,\n  Paper,\n  Stack,\n  Tabs,\n  Text,\n  Tooltip,\n  UnstyledButton\n} from '@mantine/core';\nimport {\n  IconLayoutSidebarLeftCollapse,\n  IconLayoutSidebarRightCollapse\n} from '@tabler/icons-react';\nimport {\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport {\n  Navigate,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate,\n  useParams\n} from 'react-router-dom';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { identifierString } from '@lib/functions/Conversion';\nimport { cancelEvent } from '@lib/functions/Events';\nimport { eventModified, getBaseUrl } from '@lib/functions/Navigation';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport { t } from '@lingui/core/macro';\nimport { useShallow } from 'zustand/react/shallow';\nimport { generateUrl } from '../../functions/urls';\nimport { usePluginPanels } from '../../hooks/UsePluginPanels';\nimport { useLocalState } from '../../states/LocalState';\nimport { vars } from '../../theme';\nimport { Boundary } from '../Boundary';\nimport { StylishText } from '../items/StylishText';\nimport type { PanelGroupType, PanelType } from '../panels/Panel';\nimport * as classes from './PanelGroup.css';\n\n/**\n * Set of properties which define a panel group:\n *\n * @param pageKey - Unique key for this panel group\n * @param panels - List of panels to display\n * @param model - The target model for this panel group (e.g. 'part' / 'salesorder')\n * @param id - The target ID for this panel group (set to *null* for groups which do not target a specific model instance)\n * @param instance - The target model instance for this panel group\n * @param reloadInstance - Function to reload the model instance\n * @param selectedPanel - The currently selected panel\n * @param onPanelChange - Callback when the active panel changes\n * @param collapsible - If true, the panel group can be collapsed (defaults to true)\n */\nexport type PanelProps = {\n  pageKey: string;\n  panels: PanelType[];\n  groups?: PanelGroupType[];\n  instance?: any;\n  reloadInstance?: () => void;\n  model?: ModelType | string;\n  id?: number | null;\n  selectedPanel?: string;\n  onPanelChange?: (panel: string) => void;\n  collapsible?: boolean;\n};\n\nfunction BasePanelGroup({\n  pageKey,\n  panels,\n  groups,\n  onPanelChange,\n  selectedPanel,\n  reloadInstance,\n  instance,\n  model,\n  id,\n  collapsible = true\n}: Readonly<PanelProps>): ReactNode {\n  const localState = useLocalState();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const { panel } = useParams();\n\n  const [expanded, setExpanded] = useState<boolean>(true);\n\n  // Hook to load plugins for this panel\n  const pluginPanelSet = usePluginPanels({\n    id: id,\n    model: model,\n    instance: instance,\n    reloadFunc: reloadInstance\n  });\n\n  // Rebuild the list of panels\n  const [allPanels, groupedPanels] = useMemo(() => {\n    const _grouped_panels: PanelGroupType[] = [];\n    const _panels = [...panels];\n    const _allpanels: PanelType[] = [...panels];\n\n    groups?.forEach((group) => {\n      const newVal: any = { ...group, panels: [] };\n      // Add panel to group and remove from main list\n      group.panelIDs?.forEach((panelID) => {\n        const index = _panels.findIndex((p) => p.name === panelID);\n        if (index !== -1) {\n          newVal.panels.push(_panels[index]);\n          _panels.splice(index, 1);\n        }\n      });\n      _grouped_panels.push(newVal);\n    });\n\n    // Add remaining panels to group\n    if (_panels.length > 0) {\n      _grouped_panels.push({\n        id: 'ungrouped',\n        label: '',\n        panels: _panels\n      });\n    }\n\n    // Add plugin panels\n    const pluginPanels: any = [];\n    pluginPanelSet.panels?.forEach((panel) => {\n      let panelKey = panel.name;\n\n      // Check if panel with this name already exists\n      const existingPanel = panels.find((p) => p.name === panelKey);\n\n      if (existingPanel) {\n        // Create a unique key for the panel which includes the plugin slug\n        panelKey = identifierString(`${panel.pluginName}-${panel.name}`);\n      }\n\n      pluginPanels.push({\n        ...panel,\n        name: panelKey\n      });\n      _allpanels.push({\n        ...panel,\n        name: panelKey\n      });\n    });\n\n    if (pluginPanels.length > 0) {\n      _grouped_panels.push({\n        id: 'plugins',\n        label: t`Plugin Provided`,\n        panels: pluginPanels\n      });\n    }\n\n    return [_allpanels, _grouped_panels];\n  }, [groups, panels, pluginPanelSet]);\n\n  const activePanels = useMemo(\n    () => allPanels.filter((panel) => !panel.hidden && !panel.disabled),\n    [allPanels]\n  );\n\n  // Callback when the active panel changes\n  const handlePanelChange = useCallback(\n    (targetPanel: string, event?: any) => {\n      cancelEvent(event);\n      if (event && eventModified(event)) {\n        const url = `${location.pathname}/../${targetPanel}`;\n        navigateToLink(url, navigate, event);\n      } else {\n        navigate(`../${targetPanel}`);\n      }\n\n      localState.setLastUsedPanel(pageKey)(targetPanel);\n\n      // Optionally call external callback hook\n      if (targetPanel && onPanelChange) {\n        onPanelChange(targetPanel);\n      }\n    },\n    [activePanels, navigate, location, onPanelChange]\n  );\n\n  // if the selected panel state changes update the current panel\n  useEffect(() => {\n    if (selectedPanel && selectedPanel !== panel) {\n      handlePanelChange(selectedPanel);\n    }\n  }, [selectedPanel, panel]);\n\n  // Determine the current panels selection (must be a valid panel)\n  const currentPanel: string = useMemo(() => {\n    if (activePanels.findIndex((p) => p.name === panel) === -1) {\n      return activePanels[0]?.name ?? '';\n    } else {\n      return panel ?? '';\n    }\n  }, [activePanels, panel]);\n\n  return (\n    <Boundary label={`PanelGroup-${pageKey}`}>\n      <Paper p='sm' radius='xs' shadow='xs' aria-label={`${pageKey}`}>\n        <Tabs\n          value={currentPanel}\n          orientation='vertical'\n          keepMounted={false}\n          aria-label={`panel-group-${pageKey}`}\n          classNames={{ tab: classes.selectedPanelTab }}\n        >\n          <Tabs.List justify='left' aria-label={`panel-tabs-${pageKey}`}>\n            {groupedPanels.map((group) => (\n              <Box key={`group-${group.id}`} w={'100%'}>\n                <Text\n                  hidden={!group.label || !expanded}\n                  c={vars.colors.primaryColors[7]}\n                  key={`group-label-${group.id}`}\n                  style={{\n                    paddingLeft: '10px'\n                  }}\n                >\n                  {group.label}\n                </Text>\n                {group.label && <Divider c={vars.colors.primaryColors[7]} />}\n                {group.panels?.map(\n                  (panel) =>\n                    !panel.hidden && (\n                      <Tooltip\n                        label={panel.label ?? panel.name}\n                        key={panel.name}\n                        disabled={expanded}\n                        position='right'\n                      >\n                        <Tabs.Tab\n                          p='xs'\n                          key={`panel-label-${panel.name}`}\n                          w={'100%'}\n                          value={panel.name}\n                          leftSection={panel.icon}\n                          hidden={panel.hidden}\n                          disabled={panel.disabled}\n                          style={{\n                            cursor: panel.disabled ? 'unset' : 'pointer'\n                          }}\n                          onClick={(event: any) =>\n                            handlePanelChange(panel.name, event)\n                          }\n                        >\n                          <UnstyledButton\n                            component={'a'}\n                            href={generateUrl(\n                              `/${getBaseUrl()}${location.pathname}/${panel.name}`\n                            )}\n                          >\n                            {expanded && panel.label}\n                          </UnstyledButton>\n                        </Tabs.Tab>\n                      </Tooltip>\n                    )\n                )}\n              </Box>\n            ))}\n            {collapsible && <Divider />}\n            {collapsible && (\n              <Group wrap='nowrap' gap='xs'>\n                <Tooltip\n                  position='right'\n                  label={expanded ? t`Collapse panels` : t`Expand panels`}\n                >\n                  <ActionIcon\n                    style={{\n                      paddingLeft: '10px'\n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                    variant='transparent'\n                    size='lg'\n                  >\n                    {expanded ? (\n                      <IconLayoutSidebarLeftCollapse opacity={0.75} />\n                    ) : (\n                      <IconLayoutSidebarRightCollapse opacity={0.75} />\n                    )}\n                  </ActionIcon>\n                </Tooltip>\n                {pluginPanelSet.isLoading && <Loader size='xs' />}\n              </Group>\n            )}\n          </Tabs.List>\n          {allPanels.map(\n            (panel) =>\n              !panel.hidden && (\n                <Tabs.Panel\n                  key={`panel-${panel.name}`}\n                  value={panel.name}\n                  aria-label={`nav-panel-${identifierString(\n                    `${pageKey}-${panel.name}`\n                  )}`}\n                  p='sm'\n                  style={{\n                    overflowX: 'scroll',\n                    width: '100%'\n                  }}\n                >\n                  <Stack gap='md'>\n                    {panel.showHeadline !== false && (\n                      <>\n                        <Group justify='space-between'>\n                          <StylishText size='xl'>{panel.label}</StylishText>\n                          {panel.controls && (\n                            <Group justify='right' wrap='nowrap'>\n                              {panel.controls}\n                            </Group>\n                          )}\n                        </Group>\n                        <Divider />\n                      </>\n                    )}\n                    <Boundary label={`PanelContent-${panel.name}`}>\n                      {panel.content}\n                    </Boundary>\n                  </Stack>\n                </Tabs.Panel>\n              )\n          )}\n        </Tabs>\n      </Paper>\n    </Boundary>\n  );\n}\n\nfunction IndexPanelComponent({\n  pageKey,\n  selectedPanel,\n  panels\n}: Readonly<PanelProps>) {\n  const lastUsedPanel = useLocalState(\n    useShallow((state) => {\n      const panelName =\n        selectedPanel || state.lastUsedPanels[pageKey] || panels[0]?.name;\n\n      const panel = panels.findIndex(\n        (p) => p.name === panelName && !p.disabled && !p.hidden\n      );\n      if (panel === -1) {\n        return panels.find((p) => !p.disabled && !p.hidden)?.name || '';\n      }\n\n      return panelName;\n    })\n  );\n\n  return <Navigate to={lastUsedPanel} replace />;\n}\n\n/**\n * Render a panel group. The current panel will be appended to the current url.\n * The last opened panel will be stored in local storage and opened if no panel is provided via url param\n * @param panels - The list of panels to display\n * @param onPanelChange - Callback when the active panel changes\n * @param collapsible - If true, the panel group can be collapsed (defaults to true)\n */\nexport function PanelGroup(props: Readonly<PanelProps>) {\n  return (\n    <Routes>\n      <Route index element={<IndexPanelComponent {...props} />} />\n      <Route path='/:panel/*' element={<BasePanelGroup {...props} />} />\n    </Routes>\n  );\n}\n"],"names":["PluginPanelContent","pluginFeature","pluginContext","jsx","Stack","RemoteComponent","source","usePluginPanels","instance","reloadFunc","model","id","globalSettings","useGlobalSettingsState","pluginPanelsEnabled","useMemo","isSet","pluginQuery","useQuery","enabled","undefined","queryKey","throwOnError","error","console","queryFn","Promise","resolve","url","apiUrl","ApiEndpoints","plugin_ui_features_list","feature_type","PluginUIFeatureType","panel","api","get","params","target_model","target_id","then","response","data","inventreeContext","useInvenTreeContext","contextData","reloadInstance","pluginPanels","map","props","iconName","icon","ctx","context","name","key","pluginName","plugin_name","label","title","ApiIcon","content","panelSet","panels","isLoading","isFetching","query","BasePanelGroup","pageKey","groups","onPanelChange","selectedPanel","collapsible","localState","useLocalState","location","useLocation","navigate","useNavigate","useParams","expanded","setExpanded","useState","pluginPanelSet","allPanels","groupedPanels","_grouped_panels","_panels","_allpanels","forEach","group","newVal","panelIDs","panelID","index","findIndex","p","push","splice","length","panelKey","find","identifierString","_i18n","_","activePanels","filter","hidden","disabled","handlePanelChange","useCallback","targetPanel","event","cancelEvent","eventModified","pathname","setLastUsedPanel","useEffect","currentPanel","Boundary","Paper","jsxs","Tabs","tab","classes","Box","Text","vars","colors","primaryColors","paddingLeft","Divider","Tooltip","cursor","UnstyledButton","generateUrl","getBaseUrl","Group","ActionIcon","IconLayoutSidebarLeftCollapse","IconLayoutSidebarRightCollapse","Loader","overflowX","width","showHeadline","Fragment","StylishText","controls","IndexPanelComponent","lastUsedPanel","useShallow","state","panelName","lastUsedPanels","Navigate","PanelGroup","Routes","Route"],"mappings":"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"}
