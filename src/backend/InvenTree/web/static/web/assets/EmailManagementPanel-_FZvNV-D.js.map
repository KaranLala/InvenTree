{"version":3,"file":"EmailManagementPanel-_FZvNV-D.js","sources":["../../../../../../frontend/src/components/settings/ConfigValueList.tsx","../../../../../../frontend/src/tables/settings/EmailTable.tsx","../../../../../../frontend/src/pages/Index/Settings/AdminCenter/EmailManagementPanel.tsx"],"sourcesContent":["import { Table } from '@mantine/core';\n\nimport { ApiEndpoints, apiUrl } from '@lib/index';\nimport { Trans } from '@lingui/react/macro';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { api } from '../../App';\nimport { formatDate } from '../../defaults/formatters';\n\nexport function ConfigValueList({ keys }: Readonly<{ keys: string[] }>) {\n  const { data, isLoading } = useQuery({\n    queryKey: ['config'],\n    queryFn: async () => {\n      return api.get(apiUrl(ApiEndpoints.config_list)).then((res) => {\n        return res.data;\n      });\n    }\n  });\n\n  const totalData = useMemo(() => {\n    if (!data) return [];\n    return keys.map((key) => {\n      return {\n        key: key,\n        value: data.find((item: any) => item.key === key)\n      };\n    });\n  }, [isLoading, data, keys]);\n\n  return (\n    <span>\n      <Table withColumnBorders withTableBorder striped>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>\n              <Trans>Setting</Trans>\n            </Table.Th>\n            <Table.Th>\n              <Trans>Source</Trans>\n            </Table.Th>\n            <Table.Th>\n              <Trans>Updated</Trans>\n            </Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>\n          {totalData.map((vals) => (\n            <Table.Tr key={vals.key}>\n              <Table.Td>{vals.key}</Table.Td>\n              <Table.Td>{vals.value?.source}</Table.Td>\n              <Table.Td>\n                {formatDate(vals.value?.accessed, { showTime: true })}\n              </Table.Td>\n            </Table.Tr>\n          ))}\n        </Table.Tbody>\n      </Table>\n    </span>\n  );\n}\n","import { ActionButton } from '@lib/components/ActionButton';\nimport { RowDeleteAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { t } from '@lingui/core/macro';\nimport { Badge } from '@mantine/core';\nimport { IconTestPipe } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function EmailTable() {\n  const sendTestMail = useCreateApiFormModal({\n    url: ApiEndpoints.email_test,\n    title: t`Send Test Email`,\n    fields: { email: {} },\n    successMessage: t`Email sent successfully`,\n    onFormSuccess: (data: any) => {\n      table.refreshTable();\n    }\n  });\n\n  const user = useUserState();\n\n  const tableActions = useMemo(() => {\n    return [\n      <ActionButton\n        icon={<IconTestPipe />}\n        key={'test'}\n        tooltip={t`Send Test Email`}\n        onClick={() => sendTestMail.open()}\n      />\n    ];\n  }, []);\n\n  const table = useTable('emails', 'pk');\n\n  const [selectedEmailId, setSelectedEmailId] = useState<string>('');\n\n  const deleteEmail = useDeleteApiFormModal({\n    url: ApiEndpoints.email_list,\n    pk: selectedEmailId,\n    title: t`Delete Email`,\n    successMessage: t`Email deleted successfully`,\n    table: table\n  });\n\n  const tableColumns = useMemo(() => {\n    return [\n      {\n        accessor: 'subject',\n        title: t`Subject`,\n        sortable: true\n      },\n      {\n        accessor: 'to',\n        title: t`To`,\n        sortable: true\n      },\n      {\n        accessor: 'sender',\n        title: t`Sender`,\n        sortable: true\n      },\n      {\n        accessor: 'status',\n        title: t`Status`,\n        sortable: true,\n        render: (record: any) => {\n          switch (record.status) {\n            case 'A':\n              return <Badge color='blue'>{t`Announced`}</Badge>;\n            case 'S':\n              return <Badge color='blue'>{t`Sent`}</Badge>;\n            case 'F':\n              return <Badge color='red'>{t`Failed`}</Badge>;\n            case 'D':\n              return <Badge color='green'>{t`Delivered`}</Badge>;\n            case 'R':\n              return <Badge color='green'>{t`Read`}</Badge>;\n            case 'C':\n              return <Badge color='green'>{t`Confirmed`}</Badge>;\n          }\n          return '-';\n        },\n        switchable: true\n      },\n      {\n        accessor: 'direction',\n        title: t`Direction`,\n        sortable: true,\n        render: (record: any) => {\n          return record.direction === 'incoming' ? t`Incoming` : t`Outgoing`;\n        },\n        switchable: true\n      },\n      DateColumn({\n        accessor: 'timestamp',\n        title: t`Timestamp`,\n        sortable: true,\n        switchable: true,\n        extra: { showTime: true }\n      })\n    ];\n  }, []);\n\n  const rowactions = useCallback(\n    (record: any) => {\n      return [\n        RowDeleteAction({\n          onClick: () => {\n            setSelectedEmailId(record.pk);\n            deleteEmail.open();\n          },\n          hidden: !user.isStaff()\n        })\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {sendTestMail.modal}\n      {deleteEmail.modal}\n      <InvenTreeTable\n        tableState={table}\n        url={apiUrl(ApiEndpoints.email_list)}\n        columns={tableColumns}\n        props={{\n          rowActions: rowactions,\n          enableSearch: true,\n          enableColumnSwitching: true,\n          enableSelection: true,\n          enableBulkDelete: true,\n          tableActions: tableActions\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Accordion } from '@mantine/core';\n\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { ConfigValueList } from '../../../../components/settings/ConfigValueList';\nimport { EmailTable } from '../../../../tables/settings/EmailTable';\n\nexport default function UserManagementPanel() {\n  return (\n    <Accordion multiple defaultValue={['emails']}>\n      <Accordion.Item value='emails' key='emails'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Email Messages`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <EmailTable />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='settings' key='settings'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Settings`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <ConfigValueList\n            key='email_settings'\n            keys={[\n              'INVENTREE_EMAIL_BACKEND',\n              'INVENTREE_EMAIL_HOST',\n              'INVENTREE_EMAIL_PORT',\n              'INVENTREE_EMAIL_USERNAME',\n              'INVENTREE_EMAIL_PASSWORD',\n              'INVENTREE_EMAIL_PREFIX',\n              'INVENTREE_EMAIL_TLS',\n              'INVENTREE_EMAIL_SSL',\n              'INVENTREE_EMAIL_SENDER'\n            ]}\n          />\n        </Accordion.Panel>\n      </Accordion.Item>\n    </Accordion>\n  );\n}\n"],"names":["ConfigValueList","keys","data","isLoading","useQuery","queryKey","queryFn","api","get","apiUrl","ApiEndpoints","config_list","then","res","totalData","useMemo","map","key","value","find","item","jsx","jsxs","Table","_Trans","id","vals","source","formatDate","accessed","showTime","EmailTable","sendTestMail","useCreateApiFormModal","url","email_test","title","_i18n","_","fields","email","successMessage","onFormSuccess","table","refreshTable","user","useUserState","tableActions","ActionButton","IconTestPipe","open","useTable","selectedEmailId","setSelectedEmailId","useState","deleteEmail","useDeleteApiFormModal","email_list","pk","tableColumns","accessor","sortable","render","record","status","Badge","switchable","direction","DateColumn","extra","rowactions","useCallback","RowDeleteAction","onClick","hidden","isStaff","modal","InvenTreeTable","rowActions","enableSearch","enableColumnSwitching","enableSelection","enableBulkDelete","UserManagementPanel","Accordion","StylishText"],"mappings":"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"}
