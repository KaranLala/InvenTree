{"version":3,"file":"BarcodeScanHistoryTable-DcAihSA9.js","sources":["../../../../../../frontend/src/tables/settings/BarcodeScanHistoryTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport {\n  Alert,\n  Badge,\n  Divider,\n  Drawer,\n  Group,\n  type MantineStyleProp,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { RowDeleteAction } from '@lib/components/RowActions';\nimport { PassFailButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { CopyButton } from '../../components/buttons/CopyButton';\nimport { StylishText } from '../../components/items/StylishText';\nimport { RenderUser } from '../../components/render/User';\nimport { shortenString } from '../../functions/tables';\nimport { useDeleteApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport { UserFilter } from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/*\n * Render detail information for a particular barcode scan result.\n */\nfunction BarcodeScanDetail({ scan }: Readonly<{ scan: any }>) {\n  const dataStyle: MantineStyleProp = {\n    textWrap: 'wrap',\n    lineBreak: 'auto',\n    wordBreak: 'break-word'\n  };\n\n  const hasResponseData = useMemo(() => {\n    return scan.response && Object.keys(scan.response).length > 0;\n  }, [scan.response]);\n\n  const hasContextData = useMemo(() => {\n    return scan.context && Object.keys(scan.context).length > 0;\n  }, [scan.context]);\n\n  return (\n    <Stack gap='xs'>\n      <Divider />\n      <Table>\n        <Table.Tbody>\n          <Table.Tr>\n            <Table.Td colSpan={2}>\n              <StylishText size='sm'>{t`Barcode Information`}</StylishText>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Th>{t`Barcode`}</Table.Th>\n            <Table.Td>\n              <Text size='sm' style={dataStyle}>\n                {scan.data}\n              </Text>\n            </Table.Td>\n            <Table.Td>\n              <CopyButton value={scan.data} size='xs' />\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Th>{t`Timestamp`}</Table.Th>\n            <Table.Td>{scan.timestamp}</Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Th>{t`User`}</Table.Th>\n            <Table.Td>\n              <RenderUser instance={scan.user_detail} />\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Th>{t`Endpoint`}</Table.Th>\n            <Table.Td>{scan.endpoint}</Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Th>{t`Result`}</Table.Th>\n            <Table.Td>\n              <PassFailButton value={scan.result} />\n            </Table.Td>\n          </Table.Tr>\n          {hasContextData && (\n            <Table.Tr>\n              <Table.Td colSpan={2}>\n                <StylishText size='sm'>{t`Context`}</StylishText>\n              </Table.Td>\n            </Table.Tr>\n          )}\n          {hasContextData &&\n            Object.keys(scan.context).map((key) => (\n              <Table.Tr key={key}>\n                <Table.Th>{key}</Table.Th>\n                <Table.Td>\n                  <Text size='sm' style={dataStyle}>\n                    {scan.context[key]}\n                  </Text>\n                </Table.Td>\n                <Table.Td>\n                  <CopyButton value={scan.context[key]} size='xs' />\n                </Table.Td>\n              </Table.Tr>\n            ))}\n          {hasResponseData && (\n            <Table.Tr>\n              <Table.Td colSpan={2}>\n                <StylishText size='sm'>{t`Response`}</StylishText>\n              </Table.Td>\n            </Table.Tr>\n          )}\n          {hasResponseData &&\n            Object.keys(scan.response).map((key) => (\n              <Table.Tr key={key}>\n                <Table.Th>{key}</Table.Th>\n                <Table.Td>\n                  <Text size='sm' style={dataStyle}>\n                    {scan.response[key]}\n                  </Text>\n                </Table.Td>\n                <Table.Td>\n                  <CopyButton value={scan.response[key]} size='xs' />\n                </Table.Td>\n              </Table.Tr>\n            ))}\n        </Table.Tbody>\n      </Table>\n    </Stack>\n  );\n}\n\n/*\n * Display the barcode scan history table\n */\nexport default function BarcodeScanHistoryTable() {\n  const user = useUserState();\n  const table = useTable('barcode-history');\n\n  const globalSettings = useGlobalSettingsState();\n\n  const [opened, { open, close }] = useDisclosure(false);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'timestamp',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          return (\n            <Group justify='space-between' wrap='nowrap'>\n              <Text>{record.timestamp}</Text>\n              {record.user_detail && (\n                <Badge size='xs'>{record.user_detail.username}</Badge>\n              )}\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'data',\n        sortable: false,\n        switchable: true,\n        render: (record: any) => {\n          return (\n            <Text\n              size='xs'\n              style={{\n                textWrap: 'wrap',\n                lineBreak: 'auto',\n                wordBreak: 'break-word'\n              }}\n            >\n              {shortenString({ str: record.data, len: 100 })}\n            </Text>\n          );\n        }\n      },\n      {\n        accessor: 'endpoint',\n        sortable: true\n      },\n      {\n        accessor: 'result',\n        sortable: true,\n        render: (record: any) => {\n          return <PassFailButton value={record.result} />;\n        }\n      }\n    ];\n  }, []);\n\n  const filters: TableFilter[] = useMemo(() => {\n    return [\n      UserFilter({}),\n      {\n        name: 'result',\n        label: t`Result`,\n        description: t`Filter by result`\n      }\n    ];\n  }, []);\n\n  const canDelete: boolean = useMemo(() => {\n    return user.isStaff() && user.hasDeleteRole(UserRoles.admin);\n  }, [user]);\n\n  const [selectedResult, setSelectedResult] = useState<any>({});\n\n  const deleteResult = useDeleteApiFormModal({\n    url: ApiEndpoints.barcode_history,\n    pk: selectedResult.pk,\n    title: t`Delete Barcode Scan Record`,\n    table: table\n  });\n\n  const rowActions = useCallback(\n    (record: any) => {\n      return [\n        RowDeleteAction({\n          hidden: !canDelete,\n          onClick: () => {\n            setSelectedResult(record);\n            deleteResult.open();\n          }\n        })\n      ];\n    },\n    [canDelete, user]\n  );\n\n  return (\n    <>\n      {deleteResult.modal}\n      <Drawer\n        opened={opened}\n        size='xl'\n        position='right'\n        title={<StylishText>{t`Barcode Scan Details`}</StylishText>}\n        onClose={close}\n      >\n        <BarcodeScanDetail scan={selectedResult} />\n      </Drawer>\n      <Stack gap='xs'>\n        {!globalSettings.isSet('BARCODE_STORE_RESULTS') && (\n          <Alert\n            color='red'\n            icon={<IconExclamationCircle />}\n            title={t`Logging Disabled`}\n          >\n            <Text>{t`Barcode logging is not enabled`}</Text>\n          </Alert>\n        )}\n        <InvenTreeTable\n          url={apiUrl(ApiEndpoints.barcode_history)}\n          tableState={table}\n          columns={tableColumns}\n          props={{\n            tableFilters: filters,\n            enableBulkDelete: canDelete,\n            rowActions: rowActions,\n            onRowClick: (row) => {\n              setSelectedResult(row);\n              open();\n            }\n          }}\n        />\n      </Stack>\n    </>\n  );\n}\n"],"names":["BarcodeScanDetail","scan","dataStyle","textWrap","lineBreak","wordBreak","hasResponseData","useMemo","response","Object","keys","length","hasContextData","context","jsxs","Stack","jsx","Divider","Table","StylishText","_i18n","_","id","Text","data","CopyButton","timestamp","RenderUser","user_detail","endpoint","PassFailButton","result","map","key","BarcodeScanHistoryTable","user","useUserState","table","useTable","globalSettings","useGlobalSettingsState","opened","open","close","useDisclosure","tableColumns","accessor","sortable","switchable","render","record","Group","Badge","username","shortenString","str","len","filters","UserFilter","name","label","description","canDelete","isStaff","hasDeleteRole","UserRoles","admin","selectedResult","setSelectedResult","useState","deleteResult","useDeleteApiFormModal","url","ApiEndpoints","barcode_history","pk","title","rowActions","useCallback","RowDeleteAction","hidden","onClick","modal","Drawer","isSet","Alert","IconExclamationCircle","InvenTreeTable","apiUrl","tableFilters","enableBulkDelete","onRowClick","row"],"mappings":"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"}
