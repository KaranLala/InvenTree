{"version":3,"file":"MachineManagementPanel-3CNacGQa.js","sources":["../../../../../../frontend/src/components/items/UnavailableIndicator.tsx","../../../../../../frontend/src/tables/machine/MachineListTable.tsx","../../../../../../frontend/src/tables/machine/MachineTypeTable.tsx","../../../../../../frontend/src/pages/Index/Settings/AdminCenter/MachineManagementPanel.tsx"],"sourcesContent":["import { IconAlertCircle } from '@tabler/icons-react';\n\nexport function UnavailableIndicator() {\n  return <IconAlertCircle size={18} color='red' />;\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  Badge,\n  Box,\n  Card,\n  Code,\n  Flex,\n  Group,\n  Indicator,\n  List,\n  LoadingOverlay,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport { IconCheck, IconRefresh } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type { InvenTreeTableProps } from '@lib/types/Tables';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  DeleteItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { InfoItem } from '../../components/items/InfoItem';\nimport { StylishText } from '../../components/items/StylishText';\nimport { UnavailableIndicator } from '../../components/items/UnavailableIndicator';\nimport {\n  DetailDrawer,\n  DetailDrawerLink\n} from '../../components/nav/DetailDrawer';\nimport {\n  StatusRenderer,\n  TableStatusRenderer\n} from '../../components/render/StatusRenderer';\nimport { MachineSettingList } from '../../components/settings/SettingList';\nimport { useApi } from '../../contexts/ApiContext';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { BooleanColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport type { MachineDriverI, MachineTypeI } from './MachineTypeTable';\n\ninterface MachineI {\n  pk: string;\n  name: string;\n  machine_type: string;\n  driver: string;\n  initialized: boolean;\n  active: boolean;\n  status: number;\n  status_model: string;\n  status_text: string;\n  machine_errors: string[];\n  is_driver_available: boolean;\n  restart_required: boolean;\n}\n\nfunction MachineStatusIndicator({ machine }: Readonly<{ machine: MachineI }>) {\n  const style = { marginLeft: '4px' };\n\n  // machine is not active, show a gray dot\n  if (!machine.active) {\n    return (\n      <Indicator style={style} color='gray'>\n        <Box />\n      </Indicator>\n    );\n  }\n\n  // determine the status color\n  let color = 'green';\n  const hasErrors =\n    machine.machine_errors.length > 0 || !machine.is_driver_available;\n\n  if (hasErrors || machine.status >= 300) color = 'red';\n  else if (machine.status >= 200) color = 'orange';\n\n  // determine if the machine is running\n  const processing =\n    machine.initialized && machine.status > 0 && machine.status < 300;\n\n  return (\n    <Indicator processing={processing} style={style} color={color}>\n      <Box />\n    </Indicator>\n  );\n}\n\nexport function useMachineTypeDriver({\n  includeTypes = true,\n  includeDrivers = true\n}: { includeTypes?: boolean; includeDrivers?: boolean } = {}) {\n  const api = useApi();\n\n  const {\n    data: machineTypes,\n    isFetching: isMachineTypesFetching,\n    refetch: refreshMachineTypes\n  } = useQuery<MachineTypeI[]>({\n    enabled: includeTypes,\n    queryKey: ['machine-types'],\n    queryFn: () =>\n      api.get(apiUrl(ApiEndpoints.machine_types_list)).then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n  const {\n    data: machineDrivers,\n    isFetching: isMachineDriversFetching,\n    refetch: refreshDrivers\n  } = useQuery<MachineDriverI[]>({\n    enabled: includeDrivers,\n    queryKey: ['machine-drivers'],\n    queryFn: () =>\n      api.get(apiUrl(ApiEndpoints.machine_driver_list)).then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n\n  const refresh = useCallback(() => {\n    refreshMachineTypes();\n    refreshDrivers();\n  }, [refreshDrivers, refreshMachineTypes]);\n\n  return {\n    machineTypes,\n    machineDrivers,\n    isFetching: isMachineTypesFetching || isMachineDriversFetching,\n    refresh\n  };\n}\n\nfunction MachineDrawer({\n  machinePk,\n  refreshTable\n}: Readonly<{\n  machinePk: string;\n  refreshTable: () => void;\n}>) {\n  const api = useApi();\n  const navigate = useNavigate();\n  const {\n    data: machine,\n    refetch,\n    isFetching: isMachineFetching\n  } = useQuery<MachineI>({\n    enabled: true,\n    queryKey: ['machine-detail', machinePk],\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.machine_list, machinePk))\n        .then((res) => res.data)\n  });\n  const {\n    machineTypes,\n    machineDrivers,\n    isFetching: isMachineTypeDriverFetching\n  } = useMachineTypeDriver();\n\n  const isFetching = isMachineFetching || isMachineTypeDriverFetching;\n\n  const machineType = useMemo(\n    () =>\n      machineTypes && machine\n        ? machineTypes.find((t) => t.slug === machine.machine_type)\n        : undefined,\n    [machine?.machine_type, machineTypes]\n  );\n\n  const machineDriver = useMemo(\n    () =>\n      machineDrivers && machine\n        ? machineDrivers.find((d) => d.slug === machine.driver)\n        : undefined,\n    [machine?.driver, machineDrivers]\n  );\n\n  const refreshAll = useCallback(() => {\n    refetch();\n    refreshTable();\n  }, [refetch, refreshTable]);\n\n  const restartMachine = useCallback(\n    (machinePk: string) => {\n      api\n        .post(\n          apiUrl(ApiEndpoints.machine_restart, undefined, {\n            machine: machinePk\n          })\n        )\n        .then(() => {\n          refreshAll();\n          notifications.show({\n            message: t`Machine restarted`,\n            color: 'green',\n            icon: <IconCheck size='1rem' />\n          });\n        });\n    },\n    [refreshAll]\n  );\n\n  const machineEditModal = useEditApiFormModal({\n    title: t`Edit machine`,\n    url: ApiEndpoints.machine_list,\n    pk: machinePk,\n    fields: useMemo(\n      () => ({\n        name: {},\n        active: {}\n      }),\n      []\n    ),\n    onClose: () => refreshAll()\n  });\n\n  const machineDeleteModal = useDeleteApiFormModal({\n    title: t`Delete machine`,\n    successMessage: t`Machine successfully deleted.`,\n    url: ApiEndpoints.machine_list,\n    pk: machinePk,\n    preFormContent: (\n      <Text>{t`Are you sure you want to remove the machine \"${machine?.name ?? 'unknown'}\"?`}</Text>\n    ),\n    onFormSuccess: () => {\n      refreshTable();\n      navigate(-1);\n    }\n  });\n\n  return (\n    <>\n      <Stack gap='xs'>\n        {machineEditModal.modal}\n        {machineDeleteModal.modal}\n\n        <Group justify='space-between'>\n          <Group>\n            {machine && <MachineStatusIndicator machine={machine} />}\n            <StylishText size='md'>{machine?.name ?? t`Machine`}</StylishText>\n          </Group>\n          <Group>\n            {machine?.restart_required && (\n              <Badge color='red'>\n                <Trans>Restart required</Trans>\n              </Badge>\n            )}\n            <OptionsActionDropdown\n              tooltip={t`Machine Actions`}\n              actions={[\n                EditItemAction({\n                  tooltip: t`Edit machine`,\n                  onClick: machineEditModal.open\n                }),\n                DeleteItemAction({\n                  tooltip: t`Delete machine`,\n                  onClick: machineDeleteModal.open\n                }),\n                {\n                  icon: <IconRefresh />,\n                  name: t`Restart`,\n                  tooltip:\n                    t`Restart machine` +\n                    (machine?.restart_required\n                      ? ` (${t`manual restart required`})`\n                      : ''),\n                  indicator: machine?.restart_required\n                    ? { color: 'red' }\n                    : undefined,\n                  onClick: () => machine && restartMachine(machine?.pk)\n                }\n              ]}\n            />\n          </Group>\n        </Group>\n\n        <Accordion\n          multiple\n          defaultValue={['machine-info', 'machine-settings', 'driver-settings']}\n        >\n          <Accordion.Item value='machine-info'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Machine Information`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Card withBorder>\n                <Stack gap='md'>\n                  <Stack pos='relative' gap='xs'>\n                    <LoadingOverlay\n                      visible={isFetching}\n                      overlayProps={{ opacity: 0 }}\n                    />\n                    <InfoItem name={t`Machine Type`}>\n                      <Group gap='xs'>\n                        {machineType ? (\n                          <DetailDrawerLink\n                            to={`../type-${machine?.machine_type}`}\n                            text={machineType.name}\n                          />\n                        ) : (\n                          <Text>{machine?.machine_type}</Text>\n                        )}\n                        {machine && !machineType && <UnavailableIndicator />}\n                      </Group>\n                    </InfoItem>\n                    <InfoItem name={t`Machine Driver`}>\n                      <Group gap='xs'>\n                        {machineDriver ? (\n                          <DetailDrawerLink\n                            to={`../driver-${machine?.driver}`}\n                            text={machineDriver.name}\n                          />\n                        ) : (\n                          <Text>{machine?.driver}</Text>\n                        )}\n                        {!machine?.is_driver_available && (\n                          <UnavailableIndicator />\n                        )}\n                      </Group>\n                    </InfoItem>\n                    <InfoItem name={t`Initialized`}>\n                      <YesNoButton value={machine?.initialized || false} />\n                    </InfoItem>\n                    <InfoItem name={t`Active`}>\n                      <YesNoButton value={machine?.active || false} />\n                    </InfoItem>\n                    <InfoItem name={t`Status`}>\n                      <Flex direction='column'>\n                        {machine?.status === -1 ? (\n                          <Text fz='xs'>No status</Text>\n                        ) : (\n                          StatusRenderer({\n                            status: `${machine?.status || -1}`,\n                            type: `MachineStatus__${machine?.status_model}` as any\n                          })\n                        )}\n                        <Text fz='sm'>{machine?.status_text}</Text>\n                      </Flex>\n                    </InfoItem>\n                    <Group justify='space-between' gap='xs'>\n                      <Text fz='sm' fw={700}>\n                        <Trans>Errors</Trans>:\n                      </Text>\n                      {machine && machine?.machine_errors.length > 0 ? (\n                        <Badge color='red' style={{ marginLeft: '10px' }}>\n                          {machine?.machine_errors.length}\n                        </Badge>\n                      ) : (\n                        <Text fz='xs'>\n                          <Trans>No errors reported</Trans>\n                        </Text>\n                      )}\n                      <List w='100%'>\n                        {machine?.machine_errors.map((error, i) => (\n                          <List.Item key={i}>\n                            <Code>{error}</Code>\n                          </List.Item>\n                        ))}\n                      </List>\n                    </Group>\n                  </Stack>\n                </Stack>\n              </Card>\n            </Accordion.Panel>\n          </Accordion.Item>\n          {machine?.is_driver_available && (\n            <Accordion.Item value='machine-settings'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Machine Settings`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <Card withBorder>\n                  <MachineSettingList\n                    machinePk={machinePk}\n                    configType='M'\n                    onChange={refreshAll}\n                  />\n                </Card>\n              </Accordion.Panel>\n            </Accordion.Item>\n          )}\n          {machine?.is_driver_available && (\n            <Accordion.Item value='driver-settings'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Driver Settings`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <Card withBorder>\n                  <MachineSettingList\n                    machinePk={machinePk}\n                    configType='D'\n                    onChange={refreshAll}\n                  />\n                </Card>\n              </Accordion.Panel>\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </Stack>\n    </>\n  );\n}\n\n/**\n * Table displaying list of available plugins\n */\nexport function MachineListTable({\n  props,\n  renderMachineDrawer = true,\n  createProps\n}: Readonly<{\n  props: InvenTreeTableProps;\n  renderMachineDrawer?: boolean;\n  createProps?: { machine_type?: string; driver?: string };\n}>) {\n  const { machineTypes, machineDrivers } = useMachineTypeDriver();\n\n  const table = useTable('machine');\n  const navigate = useNavigate();\n\n  const machineTableColumns = useMemo<TableColumn<MachineI>[]>(\n    () => [\n      {\n        accessor: 'name',\n        sortable: true,\n        render: (record) => (\n          <Group justify='left' wrap='nowrap'>\n            <MachineStatusIndicator machine={record} />\n            <Text>{record.name}</Text>\n            {record.restart_required && (\n              <Badge color='red'>\n                <Trans>Restart required</Trans>\n              </Badge>\n            )}\n          </Group>\n        )\n      },\n      {\n        accessor: 'machine_type',\n        sortable: true,\n        render: (record) => {\n          const machineType = machineTypes?.find(\n            (m) => m.slug === record.machine_type\n          );\n          return (\n            <Group gap='xs'>\n              <Text>\n                {machineType ? machineType.name : record.machine_type}\n              </Text>\n              {machineTypes && !machineType && <UnavailableIndicator />}\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'driver',\n        sortable: true,\n        render: (record) => {\n          const driver = machineDrivers?.find((d) => d.slug === record.driver);\n          return (\n            <Group gap='xs'>\n              <Text>{driver ? driver.name : record.driver}</Text>\n              {!record.is_driver_available && <UnavailableIndicator />}\n            </Group>\n          );\n        }\n      },\n      BooleanColumn({\n        accessor: 'initialized'\n      }),\n      BooleanColumn({\n        accessor: 'active'\n      }),\n      {\n        accessor: 'status',\n        sortable: false,\n        render: (record) => {\n          const renderer = TableStatusRenderer(\n            `MachineStatus__${record.status_model}` as any\n          );\n          if (renderer && record.status !== -1) {\n            return renderer(record);\n          }\n        }\n      }\n    ],\n    [machineTypes]\n  );\n\n  const [createFormMachineType, setCreateFormMachineType] = useState<\n    null | string\n  >(null);\n  const createFormDriverOptions = useMemo(() => {\n    if (!machineDrivers) return [];\n\n    return machineDrivers\n      .filter((d) => d.machine_type === createFormMachineType)\n      .map((d) => ({\n        value: d.slug,\n        display_name: d.name\n      }));\n  }, [machineDrivers, createFormMachineType]);\n\n  const createMachineForm = useCreateApiFormModal({\n    title: t`Add Machine`,\n    url: ApiEndpoints.machine_list,\n    fields: {\n      name: {},\n      machine_type: {\n        hidden: !!createProps?.machine_type,\n        ...(createProps?.machine_type\n          ? { value: createProps.machine_type }\n          : {}),\n        field_type: 'choice',\n        choices: machineTypes\n          ? machineTypes.map((t) => ({\n              value: t.slug,\n              display_name: t.name\n            }))\n          : [],\n        onValueChange: (value) => setCreateFormMachineType(value)\n      },\n      driver: {\n        hidden: !!createProps?.driver,\n        ...(createProps?.driver ? { value: createProps.driver } : {}),\n        field_type: 'choice',\n        disabled: !createFormMachineType,\n        choices: createFormDriverOptions\n      },\n      active: {}\n    },\n    onFormSuccess: (data) => {\n      table.refreshTable();\n      navigate(\n        renderMachineDrawer ? `machine-${data.pk}/` : `../machine-${data.pk}/`\n      );\n    },\n    onClose: () => {\n      setCreateFormMachineType(null);\n    }\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-machine'\n        tooltip={t`Add machine`}\n        onClick={() => {\n          setCreateFormMachineType(null);\n          createMachineForm.open();\n        }}\n      />\n    ];\n  }, [createMachineForm.open]);\n\n  return (\n    <>\n      {createMachineForm.modal}\n      {renderMachineDrawer && (\n        <DetailDrawer\n          title={t`Machine Detail`}\n          size={'xl'}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('machine-')) return false;\n            return (\n              <MachineDrawer\n                machinePk={id.replace('machine-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.machine_list)}\n        tableState={table}\n        columns={machineTableColumns}\n        props={{\n          ...props,\n          enableDownload: false,\n          onRowClick: (machine) =>\n            navigate(\n              renderMachineDrawer\n                ? `machine-${machine.pk}/`\n                : `../machine-${machine.pk}/`\n            ),\n          tableActions,\n          params: {\n            ...props.params\n          },\n          tableFilters: [\n            {\n              name: 'active',\n              label: t`Active`,\n              type: 'boolean'\n            },\n            {\n              name: 'machine_type',\n              label: t`Machine Type`,\n              type: 'choice',\n              choiceFunction: () =>\n                machineTypes\n                  ? machineTypes.map((t) => ({ value: t.slug, label: t.name }))\n                  : []\n            },\n            {\n              name: 'driver',\n              label: t`Driver`,\n              type: 'choice',\n              choiceFunction: () =>\n                machineDrivers\n                  ? machineDrivers.map((d) => ({\n                      value: d.slug,\n                      label: d.name\n                    }))\n                  : []\n            }\n          ]\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Accordion,\n  ActionIcon,\n  Alert,\n  Badge,\n  Card,\n  Code,\n  Group,\n  List,\n  LoadingOverlay,\n  Stack,\n  Text,\n  Title\n} from '@mantine/core';\nimport { IconExclamationCircle, IconRefresh } from '@tabler/icons-react';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type { InvenTreeTableProps } from '@lib/types/Tables';\nimport { InfoItem } from '../../components/items/InfoItem';\nimport { StylishText } from '../../components/items/StylishText';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport { useTable } from '../../hooks/UseTable';\nimport { BooleanColumn, DescriptionColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { MachineListTable, useMachineTypeDriver } from './MachineListTable';\n\nexport interface MachineTypeI {\n  slug: string;\n  name: string;\n  description: string;\n  provider_file: string;\n  provider_plugin: { slug: string; name: string; pk: number | null } | null;\n  is_builtin: boolean;\n}\n\nexport interface MachineDriverI {\n  slug: string;\n  name: string;\n  description: string;\n  provider_file: string;\n  provider_plugin: { slug: string; name: string; pk: number | null } | null;\n  is_builtin: boolean;\n  machine_type: string;\n  driver_errors: string[];\n}\n\nfunction MachineTypeDrawer({\n  machineTypeSlug\n}: Readonly<{ machineTypeSlug: string }>) {\n  const navigate = useNavigate();\n\n  const { machineTypes, refresh, isFetching } = useMachineTypeDriver({\n    includeDrivers: false\n  });\n  const machineType = useMemo(\n    () => machineTypes?.find((m) => m.slug === machineTypeSlug),\n    [machineTypes, machineTypeSlug]\n  );\n\n  const table = useTable('machineDrivers');\n\n  const machineDriverTableColumns = useMemo<TableColumn<MachineDriverI>[]>(\n    () => [\n      {\n        accessor: 'name',\n        title: t`Name`\n      },\n      DescriptionColumn({}),\n      BooleanColumn({\n        accessor: 'is_builtin',\n        title: t`Builtin driver`\n      })\n    ],\n    []\n  );\n\n  return (\n    <>\n      <Stack>\n        <Group wrap='nowrap'>\n          <StylishText size='md'>\n            {machineType ? machineType.name : machineTypeSlug}\n          </StylishText>\n        </Group>\n\n        {!machineType && (\n          <Alert\n            color='red'\n            title={t`Not Found`}\n            icon={<IconExclamationCircle />}\n          >\n            <Text>{t`Machine type not found.`}</Text>\n          </Alert>\n        )}\n\n        <Accordion\n          multiple\n          defaultValue={['machine-type-info', 'machine-drivers']}\n        >\n          <Accordion.Item value='machine-type-info'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Machine Type Information`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Card withBorder>\n                <Stack pos='relative' gap='xs'>\n                  <LoadingOverlay\n                    visible={isFetching}\n                    overlayProps={{ opacity: 0 }}\n                  />\n                  <InfoItem\n                    name={t`Name`}\n                    value={machineType?.name}\n                    type='text'\n                  />\n                  <InfoItem\n                    name={t`Slug`}\n                    value={machineType?.slug}\n                    type='text'\n                  />\n                  <InfoItem\n                    name={t`Description`}\n                    value={machineType?.description}\n                    type='text'\n                  />\n                  {!machineType?.is_builtin && (\n                    <InfoItem\n                      name={t`Provider plugin`}\n                      value={machineType?.provider_plugin?.name}\n                      type='text'\n                      link={\n                        machineType?.provider_plugin?.pk !== null\n                          ? `../../plugin/${machineType?.provider_plugin?.pk}/`\n                          : undefined\n                      }\n                      detailDrawerLink\n                    />\n                  )}\n                  <InfoItem\n                    name={t`Provider file`}\n                    value={machineType?.provider_file}\n                    type='code'\n                  />\n                  <InfoItem\n                    name={t`Builtin`}\n                    value={machineType?.is_builtin}\n                    type='boolean'\n                  />\n                </Stack>\n              </Card>\n            </Accordion.Panel>\n          </Accordion.Item>\n          <Accordion.Item value='machine-drivers'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Available Drivers`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Card withBorder>\n                <InvenTreeTable\n                  url={apiUrl(ApiEndpoints.machine_driver_list)}\n                  tableState={table}\n                  columns={machineDriverTableColumns}\n                  props={{\n                    dataFormatter: (data: any) => {\n                      return data.filter(\n                        (d: any) => d.machine_type === machineTypeSlug\n                      );\n                    },\n                    enableDownload: false,\n                    enableSearch: false,\n                    onRowClick: (machine) =>\n                      navigate(`../driver-${machine.slug}/`)\n                  }}\n                />\n              </Card>\n            </Accordion.Panel>\n          </Accordion.Item>\n        </Accordion>\n      </Stack>\n    </>\n  );\n}\n\nfunction MachineDriverDrawer({\n  machineDriverSlug\n}: Readonly<{\n  machineDriverSlug: string;\n}>) {\n  const { machineDrivers, machineTypes, refresh, isFetching } =\n    useMachineTypeDriver();\n  const machineDriver = useMemo(\n    () => machineDrivers?.find((d) => d.slug === machineDriverSlug),\n    [machineDrivers, machineDriverSlug]\n  );\n  const machineType = useMemo(\n    () => machineTypes?.find((t) => t.slug === machineDriver?.machine_type),\n    [machineDrivers, machineTypes]\n  );\n\n  return (\n    <Stack>\n      <Group justify='center'>\n        <Title order={4}>\n          {machineDriver ? machineDriver.name : machineDriverSlug}\n        </Title>\n      </Group>\n\n      {!machineDriver && (\n        <Text style={{ fontStyle: 'italic' }}>\n          <Trans>Machine driver not found.</Trans>\n        </Text>\n      )}\n\n      <Card withBorder>\n        <Stack gap='md'>\n          <Group justify='space-between'>\n            <Title order={4}>\n              <Trans>Machine driver information</Trans>\n            </Title>\n            <ActionIcon variant='outline' onClick={() => refresh()}>\n              <IconRefresh />\n            </ActionIcon>\n          </Group>\n\n          <Stack pos='relative' gap='xs'>\n            <LoadingOverlay\n              visible={isFetching}\n              overlayProps={{ opacity: 0 }}\n            />\n            <InfoItem name={t`Name`} value={machineDriver?.name} type='text' />\n            <InfoItem name={t`Slug`} value={machineDriver?.slug} type='text' />\n            <InfoItem\n              name={t`Description`}\n              value={machineDriver?.description}\n              type='text'\n            />\n            <InfoItem\n              name={t`Machine type`}\n              value={\n                machineType ? machineType.name : machineDriver?.machine_type\n              }\n              type='text'\n              link={\n                machineType\n                  ? `../type-${machineDriver?.machine_type}`\n                  : undefined\n              }\n              detailDrawerLink\n            />\n            {!machineDriver?.is_builtin && (\n              <InfoItem\n                name={t`Provider plugin`}\n                value={machineDriver?.provider_plugin?.name}\n                type='text'\n                link={\n                  machineDriver?.provider_plugin?.pk !== null\n                    ? `../../plugin/${machineDriver?.provider_plugin?.pk}/`\n                    : undefined\n                }\n                detailDrawerLink\n              />\n            )}\n            <InfoItem\n              name={t`Provider file`}\n              value={machineDriver?.provider_file}\n              type='code'\n            />\n            <InfoItem\n              name={t`Builtin`}\n              value={machineDriver?.is_builtin}\n              type='boolean'\n            />\n            <Group justify='space-between' gap='xs'>\n              <Text fz='sm' fw={700}>\n                <Trans>Errors</Trans>:\n              </Text>\n              {machineDriver && machineDriver?.driver_errors.length > 0 ? (\n                <Badge color='red' style={{ marginLeft: '10px' }}>\n                  {machineDriver.driver_errors.length}\n                </Badge>\n              ) : (\n                <Text fz='xs'>\n                  <Trans>No errors reported</Trans>\n                </Text>\n              )}\n              <List w='100%'>\n                {machineDriver?.driver_errors.map((error, i) => (\n                  <List.Item key={`${i}-${error}`}>\n                    <Code>{error}</Code>\n                  </List.Item>\n                ))}\n              </List>\n            </Group>\n          </Stack>\n        </Stack>\n      </Card>\n\n      <Card withBorder>\n        <Stack gap='md'>\n          <Title order={4}>\n            <Trans>Machines</Trans>\n          </Title>\n\n          <MachineListTable\n            props={{ params: { driver: machineDriverSlug } }}\n            renderMachineDrawer={false}\n            createProps={{\n              machine_type: machineDriver?.machine_type,\n              driver: machineDriverSlug\n            }}\n          />\n        </Stack>\n      </Card>\n    </Stack>\n  );\n}\n\n/**\n * Table displaying list of available machine types\n */\nexport function MachineTypeListTable({\n  props\n}: Readonly<{\n  props: InvenTreeTableProps;\n}>) {\n  const table = useTable('machineTypes');\n  const navigate = useNavigate();\n\n  const machineTypeTableColumns = useMemo<TableColumn<MachineTypeI>[]>(\n    () => [\n      {\n        accessor: 'name',\n        title: t`Name`\n      },\n      DescriptionColumn({}),\n      BooleanColumn({\n        accessor: 'is_builtin',\n        title: t`Builtin type`\n      })\n    ],\n    []\n  );\n\n  return (\n    <>\n      <DetailDrawer\n        title={t`Machine Type Detail`}\n        size={'xl'}\n        renderContent={(id) => {\n          if (!id || !id.startsWith('type-')) return false;\n          return (\n            <MachineTypeDrawer machineTypeSlug={id.replace('type-', '')} />\n          );\n        }}\n      />\n      <DetailDrawer\n        title={t`Machine Driver Detail`}\n        size={'xl'}\n        renderContent={(id) => {\n          if (!id || !id.startsWith('driver-')) return false;\n          return (\n            <MachineDriverDrawer\n              machineDriverSlug={id.replace('driver-', '')}\n            />\n          );\n        }}\n      />\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.machine_types_list)}\n        tableState={table}\n        columns={machineTypeTableColumns}\n        props={{\n          ...props,\n          enableDownload: false,\n          enableSearch: false,\n          onRowClick: (machine) => navigate(`type-${machine.slug}/`),\n          params: {\n            ...props.params\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  ActionIcon,\n  Alert,\n  Code,\n  Group,\n  List,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { IconInfoCircle, IconRefresh } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { api } from '../../../../App';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { MachineListTable } from '../../../../tables/machine/MachineListTable';\nimport { MachineTypeListTable } from '../../../../tables/machine/MachineTypeTable';\n\ninterface MachineRegistryStatusI {\n  registry_errors: { message: string }[];\n}\n\nexport default function MachineManagementPanel() {\n  const { data: registryStatus, refetch } = useQuery<MachineRegistryStatusI>({\n    queryKey: ['machine-registry-status'],\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.machine_registry_status))\n        .then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n\n  const hasErrors = useMemo(() => {\n    return (\n      registryStatus?.registry_errors &&\n      registryStatus.registry_errors.length > 0\n    );\n  }, [registryStatus]);\n\n  return (\n    <Accordion multiple defaultValue={['machinelist', 'machinetypes']}>\n      <Accordion.Item value='machinelist'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machines`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <MachineListTable props={{}} />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='machinetypes'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Types`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <MachineTypeListTable props={{}} />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='machineerrors'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Errors`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <Stack gap='xs'>\n            <Group\n              justify='space-beteen'\n              wrap='nowrap'\n              style={{ width: '100%' }}\n            >\n              {hasErrors ? (\n                <Alert\n                  flex={10}\n                  color='red'\n                  title={t`Registry Registry Errors`}\n                  icon={<IconInfoCircle />}\n                >\n                  <Text>{t`There are machine registry errors`}</Text>\n                </Alert>\n              ) : (\n                <Alert\n                  flex={10}\n                  color='green'\n                  title={t`Machine Registry Errors`}\n                  icon={<IconInfoCircle />}\n                >\n                  <Text>{t`There are no machine registry errors`}</Text>\n                </Alert>\n              )}\n              <ActionIcon variant='outline' onClick={() => refetch()}>\n                <IconRefresh />\n              </ActionIcon>\n            </Group>\n            {hasErrors && (\n              <List>\n                {registryStatus?.registry_errors?.map((error, i) => (\n                  <List.Item key={i}>\n                    <Code>{error.message}</Code>\n                  </List.Item>\n                ))}\n              </List>\n            )}\n          </Stack>\n        </Accordion.Panel>\n      </Accordion.Item>\n    </Accordion>\n  );\n}\n"],"names":["UnavailableIndicator","jsx","IconAlertCircle","MachineStatusIndicator","machine","style","marginLeft","active","Indicator","Box","color","machine_errors","length","is_driver_available","status","processing","initialized","useMachineTypeDriver","includeTypes","includeDrivers","api","useApi","data","machineTypes","isFetching","isMachineTypesFetching","refetch","refreshMachineTypes","useQuery","enabled","queryKey","queryFn","get","apiUrl","ApiEndpoints","machine_types_list","then","res","staleTime","machineDrivers","isMachineDriversFetching","refreshDrivers","machine_driver_list","refresh","useCallback","MachineDrawer","machinePk","refreshTable","navigate","useNavigate","isMachineFetching","machine_list","isMachineTypeDriverFetching","machineType","useMemo","find","t","slug","machine_type","undefined","machineDriver","d","driver","refreshAll","restartMachine","post","machine_restart","notifications","show","message","_i18n","_","id","icon","IconCheck","machineEditModal","useEditApiFormModal","title","url","pk","fields","name","onClose","machineDeleteModal","useDeleteApiFormModal","successMessage","preFormContent","Text","values","0","onFormSuccess","Fragment","jsxs","Stack","modal","Group","StylishText","restart_required","Badge","_Trans","OptionsActionDropdown","EditItemAction","tooltip","onClick","open","DeleteItemAction","IconRefresh","indicator","Accordion","Card","LoadingOverlay","opacity","InfoItem","DetailDrawerLink","YesNoButton","Flex","StatusRenderer","type","status_model","status_text","List","map","error","i","Code","MachineSettingList","MachineListTable","props","renderMachineDrawer","createProps","table","useTable","machineTableColumns","accessor","sortable","render","record","m","BooleanColumn","renderer","TableStatusRenderer","createFormMachineType","setCreateFormMachineType","useState","createFormDriverOptions","filter","value","display_name","createMachineForm","useCreateApiFormModal","hidden","field_type","choices","onValueChange","disabled","tableActions","AddItemButton","DetailDrawer","startsWith","replace","InvenTreeTable","enableDownload","onRowClick","params","tableFilters","label","choiceFunction","MachineTypeDrawer","machineTypeSlug","machineDriverTableColumns","DescriptionColumn","Alert","IconExclamationCircle","description","is_builtin","provider_plugin","provider_file","dataFormatter","enableSearch","MachineDriverDrawer","machineDriverSlug","Title","fontStyle","ActionIcon","driver_errors","MachineTypeListTable","machineTypeTableColumns","MachineManagementPanel","registryStatus","machine_registry_status","hasErrors","registry_errors","width","IconInfoCircle"],"mappings":"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"}
