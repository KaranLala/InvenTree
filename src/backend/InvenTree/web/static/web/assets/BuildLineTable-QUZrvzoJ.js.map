{"version":3,"file":"BuildLineTable-QUZrvzoJ.js","sources":["../../../../../../frontend/src/tables/build/BuildLineTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Alert, Group, Paper, Stack, Text } from '@mantine/core';\nimport {\n  IconArrowRight,\n  IconCircleMinus,\n  IconShoppingCart,\n  IconTool,\n  IconWand\n} from '@tabler/icons-react';\nimport { DataTable, type DataTableRowExpansionProps } from 'mantine-datatable';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowActions,\n  RowDeleteAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { formatDecimal } from '@lib/functions/Formatting';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport {\n  useAllocateStockToBuildForm,\n  useBuildOrderFields\n} from '../../forms/BuildForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  BooleanColumn,\n  DecimalColumn,\n  DescriptionColumn,\n  LocationColumn,\n  PartColumn\n} from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * Render a sub-table of allocated stock against a particular build line.\n *\n * - Renders a simplified table of stock allocated against the build line\n * - Provides \"edit\" and \"delete\" actions for each allocation\n *\n * Note: We expect that the \"lineItem\" object contains an allocations[] list\n */\nexport function BuildLineSubTable({\n  lineItem,\n  onEditAllocation,\n  onDeleteAllocation\n}: Readonly<{\n  lineItem: any;\n  onEditAllocation?: (pk: number) => void;\n  onDeleteAllocation?: (pk: number) => void;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n\n  const tableColumns: any[] = useMemo(() => {\n    return [\n      {\n        accessor: 'part',\n        title: t`Part`,\n        render: (record: any) => {\n          return <PartColumn part={record.part_detail} />;\n        }\n      },\n      {\n        accessor: 'quantity',\n        title: t`Quantity`,\n        render: (record: any) => {\n          if (!!record.stock_item_detail?.serial) {\n            return `# ${record.stock_item_detail.serial}`;\n          }\n          return record.quantity;\n        }\n      },\n      {\n        accessor: 'stock_item_detail.batch',\n        title: t`Batch`\n      },\n      LocationColumn({\n        accessor: 'location_detail'\n      }),\n      {\n        accessor: '---actions---',\n        title: ' ',\n        width: 50,\n        render: (record: any) => {\n          return (\n            <RowActions\n              title={t`Actions`}\n              index={record.pk}\n              actions={[\n                RowViewAction({\n                  title: t`View Stock Item`,\n                  modelType: ModelType.stockitem,\n                  modelId: record.stock_item,\n                  navigate: navigate\n                }),\n                RowEditAction({\n                  hidden:\n                    !onEditAllocation || !user.hasChangeRole(UserRoles.build),\n                  onClick: () => {\n                    onEditAllocation?.(record.pk);\n                  }\n                }),\n                RowDeleteAction({\n                  hidden:\n                    !onDeleteAllocation || !user.hasDeleteRole(UserRoles.build),\n                  onClick: () => {\n                    onDeleteAllocation?.(record.pk);\n                  }\n                })\n              ]}\n            />\n          );\n        }\n      }\n    ];\n  }, [user, onEditAllocation, onDeleteAllocation]);\n\n  return (\n    <Paper p='md'>\n      <Stack gap='xs'>\n        <DataTable\n          minHeight={50}\n          withTableBorder\n          withColumnBorders\n          striped\n          pinLastColumn\n          idAccessor='pk'\n          columns={tableColumns}\n          records={lineItem.filteredAllocations ?? lineItem.allocations}\n        />\n      </Stack>\n    </Paper>\n  );\n}\n\n/**\n * Render a table of build lines for a particular build.\n */\nexport default function BuildLineTable({\n  build,\n  output,\n  params = {}\n}: Readonly<{\n  build: any;\n  output?: any;\n  params?: any;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n  const buildStatus = useStatusCodes({ modelType: ModelType.build });\n\n  const hasOutput: boolean = useMemo(() => !!output?.pk, [output]);\n\n  const table = useTable(hasOutput ? 'buildline-output' : 'buildline');\n\n  const isActive: boolean = useMemo(() => {\n    return (\n      build?.status == buildStatus.PRODUCTION ||\n      build?.status == buildStatus.PENDING ||\n      build?.status == buildStatus.ON_HOLD\n    );\n  }, [build, buildStatus]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'allocated',\n        label: t`Allocated`,\n        description: t`Show allocated lines`\n      },\n      {\n        name: 'available',\n        label: t`Available`,\n        description: t`Show items with available stock`\n      },\n      {\n        name: 'consumable',\n        label: t`Consumable`,\n        description: t`Show consumable lines`\n      },\n      {\n        name: 'optional',\n        label: t`Optional`,\n        description: t`Show optional lines`\n      },\n      {\n        name: 'assembly',\n        label: t`Assembly`,\n        description: t`Show assembled items`\n      },\n      {\n        name: 'testable',\n        label: t`Testable`,\n        description: t`Show testable items`\n      },\n      {\n        name: 'tracked',\n        label: t`Tracked`,\n        description: t`Show tracked lines`\n      }\n    ];\n  }, []);\n\n  const renderAvailableColumn = useCallback((record: any) => {\n    const bom_item = record?.bom_item_detail ?? {};\n    const extra: any[] = [];\n    let available = record?.available_stock;\n\n    // Account for substitute stock\n    if (record.available_substitute_stock > 0) {\n      available += record.available_substitute_stock;\n      extra.push(\n        <Text key='substitite' size='sm'>\n          {t`Includes substitute stock`}\n        </Text>\n      );\n    }\n\n    // Account for variant stock\n    if (bom_item.allow_variants && record.available_variant_stock > 0) {\n      available += record.available_variant_stock;\n      extra.push(\n        <Text key='variant' size='sm'>\n          {t`Includes variant stock`}\n        </Text>\n      );\n    }\n\n    // Account for in-production stock\n    if (record.in_production > 0) {\n      extra.push(\n        <Text key='production' size='sm'>\n          {t`In production`}: {formatDecimal(record.in_production)}\n        </Text>\n      );\n    }\n\n    // Account for stock on order\n    if (record.on_order > 0) {\n      extra.push(\n        <Text key='on-order' size='sm'>\n          {t`On order`}: {formatDecimal(record.on_order)}\n        </Text>\n      );\n    }\n\n    // Account for \"external\" stock\n    if (record.external_stock > 0) {\n      extra.push(\n        <Text key='external' size='sm'>\n          {t`External stock`}: {formatDecimal(record.external_stock)}\n        </Text>\n      );\n    }\n\n    const sufficient = available >= record.quantity - record.allocated;\n\n    if (!sufficient) {\n      extra.push(\n        <Text key='insufficient' c='orange' size='sm'>\n          {t`Insufficient stock`}\n        </Text>\n      );\n    }\n\n    return (\n      <TableHoverCard\n        icon={sufficient ? 'info' : 'exclamation'}\n        iconColor={sufficient ? 'blue' : 'orange'}\n        value={\n          available > 0 ? (\n            `${formatDecimal(available)}`\n          ) : (\n            <Text\n              c='red'\n              style={{ fontStyle: 'italic' }}\n            >{t`No stock available`}</Text>\n          )\n        }\n        title={t`Available Stock`}\n        extra={extra}\n      />\n    );\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'bom_item',\n        title: t`Component`,\n        ordering: 'part',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          const hasAllocatedItems = record.allocatedQuantity > 0;\n\n          return (\n            <Group wrap='nowrap'>\n              <RowExpansionIcon\n                enabled={hasAllocatedItems}\n                expanded={table.isRowExpanded(record.pk)}\n              />\n              <PartColumn part={record.part_detail} />\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'part_detail.IPN',\n        sortable: false,\n        title: t`IPN`\n      },\n      DescriptionColumn({\n        accessor: 'part_detail.description'\n      }),\n      {\n        accessor: 'bom_item_detail.reference',\n        ordering: 'reference',\n        sortable: true,\n        title: t`Reference`\n      },\n      BooleanColumn({\n        accessor: 'bom_item_detail.optional',\n        ordering: 'optional',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.consumable',\n        ordering: 'consumable',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.allow_variants',\n        ordering: 'allow_variants',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.inherited',\n        ordering: 'inherited',\n        title: t`Gets Inherited`,\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'part_detail.trackable',\n        ordering: 'trackable',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      {\n        accessor: 'bom_item_detail.quantity',\n        sortable: true,\n        title: t`Unit Quantity`,\n        defaultVisible: false,\n        ordering: 'unit_quantity',\n        render: (record: any) => {\n          return (\n            <Group justify='space-between' wrap='nowrap'>\n              <Text>{record.bom_item_detail?.quantity}</Text>\n              {record?.part_detail?.units && (\n                <Text size='xs'>[{record.part_detail.units}]</Text>\n              )}\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'quantity',\n        title: t`Required Quantity`,\n        sortable: true,\n        defaultVisible: false,\n        switchable: false,\n        render: (record: any) => {\n          // Include information about the BOM item (if available)\n          const extra: any[] = [];\n\n          if (record?.bom_item_detail?.setup_quantity) {\n            extra.push(\n              <Text key='setup-quantity' size='sm'>\n                {t`Setup Quantity`}:{' '}\n                {formatDecimal(record.bom_item_detail.setup_quantity)}\n              </Text>\n            );\n          }\n\n          if (record?.bom_item_detail?.attrition) {\n            extra.push(\n              <Text key='attrition' size='sm'>\n                {t`Attrition`}: {record.bom_item_detail.attrition}%\n              </Text>\n            );\n          }\n\n          if (record?.bom_item_detail?.rounding_multiple) {\n            extra.push(\n              <Text key='rounding-multiple' size='sm'>\n                {t`Rounding Multiple`}:{' '}\n                {record.bom_item_detail.rounding_multiple}\n              </Text>\n            );\n          }\n\n          // If a build output is specified, use the provided quantity\n          return (\n            <TableHoverCard\n              title={t`BOM Information`}\n              extra={extra}\n              value={\n                <Group justify='space-between' wrap='nowrap'>\n                  <Text>{formatDecimal(record.requiredQuantity)}</Text>\n                  {record?.part_detail?.units && (\n                    <Text size='xs'>[{record.part_detail.units}]</Text>\n                  )}\n                </Group>\n              }\n            />\n          );\n        }\n      },\n      {\n        accessor: 'available_stock',\n        sortable: true,\n        switchable: false,\n        render: renderAvailableColumn\n      },\n      {\n        accessor: 'in_production',\n        render: (record: any) => {\n          if (record.scheduled_to_build > 0) {\n            return (\n              <ProgressBar\n                progressLabel={true}\n                value={record.in_production}\n                maximum={record.scheduled_to_build}\n              />\n            );\n          } else {\n            return record.part_detail?.is_assembly ? 0 : '-';\n          }\n        }\n      },\n      DecimalColumn({\n        accessor: 'on_order',\n        defaultVisible: false\n      }),\n      {\n        accessor: 'allocated',\n        switchable: false,\n        sortable: true,\n        hidden: !isActive,\n        render: (record: any) => {\n          return record?.bom_item_detail?.consumable ? (\n            <Text style={{ fontStyle: 'italic' }}>{t`Consumable item`}</Text>\n          ) : (\n            <ProgressBar\n              progressLabel={true}\n              value={record.allocatedQuantity}\n              maximum={record.requiredQuantity}\n            />\n          );\n        }\n      }\n    ];\n  }, [hasOutput, isActive, table, output]);\n\n  const buildOrderFields = useBuildOrderFields({\n    create: true,\n    modalId: 'new-build-order'\n  });\n\n  const [initialData, setInitialData] = useState<any>({});\n\n  const [selectedLine, setSelectedLine] = useState<number | null>(null);\n\n  const [selectedRows, setSelectedRows] = useState<any[]>([]);\n\n  const newBuildOrder = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Create Build Order`,\n    fields: buildOrderFields,\n    modalId: 'new-build-order',\n    initialData: initialData,\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const autoAllocateStock = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_auto_allocate,\n    pk: build.pk,\n    title: t`Allocate Stock`,\n    fields: {\n      location: {\n        filters: {\n          structural: false\n        }\n      },\n      exclude_location: {},\n      interchangeable: {},\n      substitutes: {},\n      optional_items: {}\n    },\n    initialData: {\n      location: build.take_from,\n      interchangeable: true,\n      substitutes: true,\n      optional_items: false\n    },\n    successMessage: t`Auto allocation in progress`,\n    table: table,\n    preFormContent: (\n      <Alert color='green' title={t`Auto Allocate Stock`}>\n        <Text>{t`Automatically allocate stock to this build according to the selected options`}</Text>\n      </Alert>\n    )\n  });\n\n  const allocateStock = useAllocateStockToBuildForm({\n    build: build,\n    output: output,\n    outputId: output?.pk ?? null,\n    buildId: build.pk,\n    lineItems: selectedRows,\n    onFormSuccess: () => {\n      table.refreshTable();\n    }\n  });\n\n  const deallocateStock = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_deallocate,\n    pk: build.pk,\n    title: t`Deallocate Stock`,\n    fields: {\n      build_line: {\n        hidden: true\n      },\n      output: {\n        hidden: true\n      }\n    },\n    initialData: {\n      build_line: selectedLine,\n      output: output?.pk ?? null\n    },\n    preFormContent: (\n      <Alert color='red' title={t`Deallocate Stock`}>\n        {selectedLine == undefined ? (\n          <Text>{t`Deallocate all untracked stock for this build order`}</Text>\n        ) : (\n          <Text>{t`Deallocate stock from the selected line item`}</Text>\n        )}\n      </Alert>\n    ),\n    successMessage: t`Stock has been deallocated`,\n    table: table\n  });\n\n  const [selectedAllocation, setSelectedAllocation] = useState<number>(0);\n\n  const editAllocation = useEditApiFormModal({\n    url: ApiEndpoints.build_item_list,\n    pk: selectedAllocation,\n    title: t`Edit Stock Allocation`,\n    fields: {\n      stock_item: {\n        disabled: true\n      },\n      quantity: {}\n    },\n    table: table\n  });\n\n  const deleteAllocation = useDeleteApiFormModal({\n    url: ApiEndpoints.build_item_list,\n    pk: selectedAllocation,\n    title: t`Delete Stock Allocation`,\n    table: table\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const part = record.part_detail ?? {};\n      const in_production = build.status == buildStatus.PRODUCTION;\n      const consumable = record.bom_item_detail?.consumable ?? false;\n\n      const hasOutput = !!output?.pk;\n\n      // Can allocate\n      const canAllocate =\n        in_production &&\n        !consumable &&\n        user.hasChangeRole(UserRoles.build) &&\n        record.trackable == hasOutput;\n\n      // Can de-allocate\n      const canDeallocate =\n        in_production &&\n        !consumable &&\n        user.hasChangeRole(UserRoles.build) &&\n        record.allocated > 0 &&\n        record.trackable == hasOutput;\n\n      const canOrder =\n        !consumable &&\n        user.hasAddRole(UserRoles.purchase_order) &&\n        part.purchaseable;\n\n      const canBuild =\n        !consumable && user.hasAddRole(UserRoles.build) && part.assembly;\n\n      return [\n        {\n          icon: <IconArrowRight />,\n          title: t`Allocate Stock`,\n          hidden: !canAllocate,\n          color: 'green',\n          onClick: () => {\n            setSelectedRows([record]);\n            allocateStock.open();\n          }\n        },\n        {\n          icon: <IconCircleMinus />,\n          title: t`Deallocate Stock`,\n          hidden: !canDeallocate,\n          color: 'red',\n          onClick: () => {\n            setSelectedLine(record.pk);\n            deallocateStock.open();\n          }\n        },\n        {\n          icon: <IconShoppingCart />,\n          title: t`Order Stock`,\n          hidden: !canOrder,\n          color: 'blue',\n          onClick: () => {\n            setPartsToOrder([record.part_detail]);\n            orderPartsWizard.openWizard();\n          }\n        },\n        {\n          icon: <IconTool />,\n          title: t`Build Stock`,\n          hidden: !canBuild,\n          color: 'blue',\n          onClick: () => {\n            setInitialData({\n              part: record.part,\n              parent: build.pk,\n              quantity: record.quantity - record.allocated\n            });\n            newBuildOrder.open();\n          }\n        },\n        RowViewAction({\n          title: t`View Part`,\n          modelType: ModelType.part,\n          modelId: record.part,\n          navigate: navigate\n        })\n      ];\n    },\n    [user, navigate, output, build, buildStatus]\n  );\n\n  const tableActions = useMemo(() => {\n    const production = build.status == buildStatus.PRODUCTION;\n    const canEdit = user.hasChangeRole(UserRoles.build);\n    const visible = production && canEdit;\n    return [\n      <ActionButton\n        key='auto-allocate'\n        icon={<IconWand />}\n        tooltip={t`Auto Allocate Stock`}\n        hidden={!visible || hasOutput}\n        color='blue'\n        onClick={() => {\n          autoAllocateStock.open();\n        }}\n      />,\n      <ActionButton\n        key='order-parts'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        disabled={!table.hasSelectedRecords}\n        icon={<IconShoppingCart />}\n        color='blue'\n        tooltip={t`Order Parts`}\n        onClick={() => {\n          setPartsToOrder(\n            table.selectedRecords\n              .filter(\n                (r) => r.part_detail?.purchaseable && r.part_detail?.active\n              )\n              .map((r) => r.part_detail)\n          );\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <ActionButton\n        key='allocate-stock'\n        icon={<IconArrowRight />}\n        tooltip={t`Allocate Stock`}\n        hidden={!visible}\n        disabled={!table.hasSelectedRecords}\n        color='green'\n        onClick={() => {\n          let rows = table.selectedRecords\n            .filter((r) => r.allocatedQuantity < r.requiredQuantity)\n            .filter((r) => !r.bom_item_detail?.consumable);\n\n          if (hasOutput) {\n            rows = rows.filter((r) => r.trackable);\n          } else {\n            rows = rows.filter((r) => !r.trackable);\n          }\n\n          setSelectedRows(rows);\n          allocateStock.open();\n        }}\n      />,\n      <ActionButton\n        key='deallocate-stock'\n        icon={<IconCircleMinus />}\n        tooltip={t`Deallocate Stock`}\n        hidden={!visible || hasOutput}\n        disabled={table.hasSelectedRecords}\n        color='red'\n        onClick={() => {\n          setSelectedLine(null);\n          deallocateStock.open();\n        }}\n      />\n    ];\n  }, [\n    user,\n    build,\n    buildStatus,\n    hasOutput,\n    table.hasSelectedRecords,\n    table.selectedRecords\n  ]);\n\n  /**\n   * Format the records for the table, before rendering\n   *\n   * - Filter the \"allocations\" field to only show allocations for the selected output\n   * - Pre-calculate the \"requiredQuantity\" and \"allocatedQuantity\" fields\n   */\n  const formatRecords = useCallback(\n    (records: any[]): any[] => {\n      return records.map((record) => {\n        let allocations = [...record.allocations];\n\n        // If an output is specified, filter the allocations to only show those for the selected output\n        if (output?.pk) {\n          allocations = allocations.filter((a) => a.install_into == output.pk);\n        }\n\n        let allocatedQuantity = 0;\n        let requiredQuantity = record.quantity;\n\n        // Calculate the total allocated quantity\n        allocations.forEach((a) => {\n          allocatedQuantity += a.quantity;\n        });\n\n        // Calculate the required quantity (based on the build output)\n        if (output?.quantity && record.bom_item_detail) {\n          requiredQuantity = output.quantity * record.bom_item_detail.quantity;\n        }\n\n        return {\n          ...record,\n          filteredAllocations: allocations,\n          requiredQuantity: requiredQuantity,\n          allocatedQuantity: allocatedQuantity\n        };\n      });\n    },\n    [output]\n  );\n\n  // Control row expansion\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        // Only items with allocated stock can be expanded\n        return table.isRowExpanded(record.pk) || record.allocatedQuantity > 0;\n      },\n      content: ({ record }: { record: any }) => {\n        return (\n          <BuildLineSubTable\n            lineItem={record}\n            onEditAllocation={(pk: number) => {\n              setSelectedAllocation(pk);\n              editAllocation.open();\n            }}\n            onDeleteAllocation={(pk: number) => {\n              setSelectedAllocation(pk);\n              deleteAllocation.open();\n            }}\n          />\n        );\n      }\n    };\n  }, [table.isRowExpanded, output]);\n\n  return (\n    <>\n      {autoAllocateStock.modal}\n      {newBuildOrder.modal}\n      {allocateStock.modal}\n      {deallocateStock.modal}\n      {editAllocation.modal}\n      {deleteAllocation.modal}\n      {orderPartsWizard.wizard}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.build_line_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            ...params,\n            build: build.pk,\n            part_detail: true\n          },\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowActions: rowActions,\n          dataFormatter: formatRecords,\n          enableDownload: true,\n          enableSelection: true,\n          rowExpansion: rowExpansion\n        }}\n      />\n    </>\n  );\n}\n"],"names":["BuildLineSubTable","lineItem","onEditAllocation","onDeleteAllocation","user","useUserState","navigate","useNavigate","tableColumns","useMemo","accessor","title","_i18n","_","id","render","record","jsx","PartColumn","part_detail","stock_item_detail","serial","quantity","LocationColumn","width","RowActions","pk","RowViewAction","modelType","ModelType","stockitem","modelId","stock_item","RowEditAction","hidden","hasChangeRole","UserRoles","build","onClick","RowDeleteAction","hasDeleteRole","Paper","Stack","DataTable","filteredAllocations","allocations","BuildLineTable","output","params","buildStatus","useStatusCodes","hasOutput","table","useTable","isActive","status","PRODUCTION","PENDING","ON_HOLD","tableFilters","name","label","description","renderAvailableColumn","useCallback","bom_item","bom_item_detail","extra","available","available_stock","available_substitute_stock","push","Text","allow_variants","available_variant_stock","in_production","jsxs","formatDecimal","on_order","external_stock","sufficient","allocated","TableHoverCard","fontStyle","ordering","sortable","switchable","hasAllocatedItems","allocatedQuantity","Group","RowExpansionIcon","isRowExpanded","DescriptionColumn","BooleanColumn","defaultVisible","units","setup_quantity","attrition","rounding_multiple","requiredQuantity","scheduled_to_build","ProgressBar","is_assembly","DecimalColumn","consumable","buildOrderFields","useBuildOrderFields","create","modalId","initialData","setInitialData","useState","selectedLine","setSelectedLine","selectedRows","setSelectedRows","newBuildOrder","useCreateApiFormModal","url","ApiEndpoints","build_order_list","fields","follow","autoAllocateStock","build_order_auto_allocate","location","filters","structural","exclude_location","interchangeable","substitutes","optional_items","take_from","successMessage","preFormContent","Alert","allocateStock","useAllocateStockToBuildForm","outputId","buildId","lineItems","onFormSuccess","refreshTable","deallocateStock","build_order_deallocate","build_line","undefined","selectedAllocation","setSelectedAllocation","editAllocation","useEditApiFormModal","build_item_list","disabled","deleteAllocation","useDeleteApiFormModal","partsToOrder","setPartsToOrder","orderPartsWizard","OrderPartsWizard","parts","rowActions","part","canAllocate","trackable","canDeallocate","canOrder","hasAddRole","purchase_order","purchaseable","canBuild","assembly","icon","IconArrowRight","color","open","IconCircleMinus","IconShoppingCart","openWizard","IconTool","parent","tableActions","production","canEdit","visible","ActionButton","IconWand","hasSelectedRecords","selectedRecords","filter","r","active","map","rows","formatRecords","records","a","install_into","forEach","rowExpansion","allowMultiple","expandable","content","modal","wizard","InvenTreeTable","apiUrl","build_line_list","dataFormatter","enableDownload","enableSelection"],"mappings":"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"}
