{"version":3,"file":"CompanyDetail-C2WDfD8o.js","sources":["../../../../../../frontend/src/tables/company/AddressTable.tsx","../../../../../../frontend/src/pages/company/CompanyDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { LinkColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function AddressTable({\n  companyId,\n  params\n}: Readonly<{\n  companyId: number;\n  params?: any;\n}>) {\n  const user = useUserState();\n\n  const table = useTable('address');\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'title',\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'primary',\n        switchable: false,\n        sortable: false,\n        render: (record: any) => YesNoButton({ value: record.primary })\n      },\n      {\n        accessor: 'address',\n        title: t`Address`,\n        sortable: false,\n        switchable: false,\n        render: (record: any) => {\n          let address = '';\n\n          if (record?.line1) {\n            address += record.line1;\n          }\n\n          if (record?.line2) {\n            address += ` ${record.line2}`;\n          }\n\n          return address.trim();\n        }\n      },\n      {\n        accessor: 'postal_code',\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'postal_city',\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'province',\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'country',\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'shipping_notes',\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'internal_shipping_notes',\n        sortable: false,\n        switchable: true\n      },\n      LinkColumn({})\n    ];\n  }, []);\n\n  const addressFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      company: {},\n      title: {},\n      primary: {},\n      line1: {},\n      line2: {},\n      postal_code: {},\n      postal_city: {},\n      province: {},\n      country: {},\n      shipping_notes: {},\n      internal_shipping_notes: {},\n      link: {}\n    };\n  }, []);\n\n  const newAddress = useCreateApiFormModal({\n    url: ApiEndpoints.address_list,\n    title: t`Add Address`,\n    fields: addressFields,\n    initialData: {\n      company: companyId\n    },\n    successMessage: t`Address created`,\n    table: table\n  });\n\n  const [selectedAddress, setSelectedAddress] = useState<number>(-1);\n\n  const editAddress = useEditApiFormModal({\n    url: ApiEndpoints.address_list,\n    pk: selectedAddress,\n    title: t`Edit Address`,\n    fields: addressFields,\n    table: table\n  });\n\n  const deleteAddress = useDeleteApiFormModal({\n    url: ApiEndpoints.address_list,\n    pk: selectedAddress,\n    title: t`Delete Address`,\n    preFormWarning: t`Are you sure you want to delete this address?`,\n    table: table\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const can_edit =\n        user.hasChangeRole(UserRoles.purchase_order) ||\n        user.hasChangeRole(UserRoles.sales_order);\n\n      const can_delete =\n        user.hasDeleteRole(UserRoles.purchase_order) ||\n        user.hasDeleteRole(UserRoles.sales_order);\n\n      return [\n        RowEditAction({\n          hidden: !can_edit,\n          onClick: () => {\n            setSelectedAddress(record.pk);\n            editAddress.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !can_delete,\n          onClick: () => {\n            setSelectedAddress(record.pk);\n            deleteAddress.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  const tableActions = useMemo(() => {\n    const can_add =\n      user.hasChangeRole(UserRoles.purchase_order) ||\n      user.hasChangeRole(UserRoles.sales_order);\n\n    return [\n      <AddItemButton\n        key='add-address'\n        tooltip={t`Add Address`}\n        onClick={() => newAddress.open()}\n        hidden={!can_add}\n      />\n    ];\n  }, [user]);\n\n  return (\n    <>\n      {newAddress.modal}\n      {editAddress.modal}\n      {deleteAddress.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.address_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          enableDownload: true,\n          rowActions: rowActions,\n          tableActions: tableActions,\n          params: {\n            ...params,\n            company: companyId\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Grid, Skeleton, Stack } from '@mantine/core';\nimport {\n  IconBuildingWarehouse,\n  IconInfoCircle,\n  IconMap2,\n  IconPackageExport,\n  IconPackages,\n  IconShoppingCart,\n  IconTruckDelivery,\n  IconTruckReturn,\n  IconUsersGroup\n} from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport DetailsBadge from '../../components/details/DetailsBadge';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  DeleteItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport type { Breadcrumb } from '../../components/nav/BreadcrumbList';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport { companyFields } from '../../forms/CompanyForms';\nimport {\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useUserState } from '../../states/UserState';\nimport { AddressTable } from '../../tables/company/AddressTable';\nimport { ContactTable } from '../../tables/company/ContactTable';\nimport { ManufacturerPartTable } from '../../tables/purchasing/ManufacturerPartTable';\nimport { PurchaseOrderTable } from '../../tables/purchasing/PurchaseOrderTable';\nimport { SupplierPartTable } from '../../tables/purchasing/SupplierPartTable';\nimport { ReturnOrderTable } from '../../tables/sales/ReturnOrderTable';\nimport { SalesOrderTable } from '../../tables/sales/SalesOrderTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\n\nexport type CompanyDetailProps = {\n  title: string;\n  breadcrumbs: Breadcrumb[];\n  last_crumb_url: string;\n};\n\n/**\n * Detail view for a single company instance\n */\nexport default function CompanyDetail(props: Readonly<CompanyDetailProps>) {\n  const { id } = useParams();\n\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const {\n    instance: company,\n    refreshInstance,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.company_list,\n    pk: id,\n    params: {},\n    refetchOnMount: true\n  });\n\n  const detailsPanel = useMemo(() => {\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const tl: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'description',\n        label: t`Description`,\n        copy: true\n      },\n      {\n        type: 'link',\n        name: 'website',\n        label: t`Website`,\n        external: true,\n        copy: true,\n        hidden: !company.website\n      },\n      {\n        type: 'text',\n        name: 'phone',\n        label: t`Phone Number`,\n        copy: true,\n        hidden: !company.phone\n      },\n      {\n        type: 'text',\n        name: 'email',\n        label: t`Email Address`,\n        copy: true,\n        hidden: !company.email\n      },\n      {\n        type: 'text',\n        name: 'tax_id',\n        label: t`Tax ID`,\n        copy: true,\n        hidden: !company.tax_id\n      }\n    ];\n\n    const tr: DetailsField[] = [\n      {\n        type: 'string',\n        name: 'currency',\n        label: t`Default Currency`\n      },\n      {\n        type: 'boolean',\n        name: 'is_supplier',\n        label: t`Supplier`,\n        icon: 'suppliers'\n      },\n      {\n        type: 'boolean',\n        name: 'is_manufacturer',\n        label: t`Manufacturer`,\n        icon: 'manufacturers'\n      },\n      {\n        type: 'boolean',\n        name: 'is_customer',\n        label: t`Customer`,\n        icon: 'customers'\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.purchase_order}\n            apiPath={apiUrl(ApiEndpoints.company_list, company.pk)}\n            src={company.image}\n            pk={company.pk}\n            refresh={refreshInstance}\n            imageActions={{\n              uploadFile: true,\n              downloadImage: true,\n              deleteFile: true\n            }}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable item={company} fields={tl} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable item={company} fields={tr} />\n      </ItemDetailsGrid>\n    );\n  }, [company, instanceQuery]);\n\n  const companyPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'details',\n        label: t`Company Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'supplied-parts',\n        label: t`Supplied Parts`,\n        icon: <IconPackageExport />,\n        hidden: !company?.is_supplier,\n        content: company?.pk && (\n          <SupplierPartTable params={{ supplier: company.pk }} />\n        )\n      },\n      {\n        name: 'manufactured-parts',\n        label: t`Manufactured Parts`,\n        icon: <IconBuildingWarehouse />,\n        hidden: !company?.is_manufacturer,\n        content: company?.pk && (\n          <ManufacturerPartTable params={{ manufacturer: company.pk }} />\n        )\n      },\n      {\n        name: 'purchase-orders',\n        label: t`Purchase Orders`,\n        icon: <IconShoppingCart />,\n        hidden: !company?.is_supplier,\n        content: company?.pk && <PurchaseOrderTable supplierId={company.pk} />\n      },\n      {\n        name: 'stock-items',\n        label: t`Stock Items`,\n        icon: <IconPackages />,\n        hidden: !company?.is_manufacturer && !company?.is_supplier,\n        content: company?.pk && (\n          <StockItemTable\n            allowAdd={false}\n            tableName='company-stock'\n            params={{ company: company.pk }}\n          />\n        )\n      },\n      {\n        name: 'sales-orders',\n        label: t`Sales Orders`,\n        icon: <IconTruckDelivery />,\n        hidden: !company?.is_customer,\n        content: company?.pk && <SalesOrderTable customerId={company.pk} />\n      },\n      {\n        name: 'return-orders',\n        label: t`Return Orders`,\n        icon: <IconTruckReturn />,\n        hidden: !company?.is_customer,\n        content: company.pk ? (\n          <ReturnOrderTable customerId={company.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'assigned-stock',\n        label: t`Assigned Stock`,\n        icon: <IconPackageExport />,\n        hidden: !company?.is_customer,\n        content: company?.pk ? (\n          <StockItemTable\n            allowAdd={false}\n            tableName='assigned-stock'\n            showLocation={false}\n            allowReturn\n            params={{ customer: company.pk }}\n          />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'contacts',\n        label: t`Contacts`,\n        icon: <IconUsersGroup />,\n        content: company?.pk && <ContactTable companyId={company.pk} />\n      },\n      {\n        name: 'addresses',\n        label: t`Addresses`,\n        icon: <IconMap2 />,\n        content: company?.pk && <AddressTable companyId={company.pk} />\n      },\n      AttachmentPanel({\n        model_type: ModelType.company,\n        model_id: company.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.company,\n        model_id: company.pk\n      })\n    ];\n  }, [id, company, user]);\n\n  const editCompany = useEditApiFormModal({\n    url: ApiEndpoints.company_list,\n    pk: company?.pk,\n    title: t`Edit Company`,\n    fields: companyFields(),\n    onFormSuccess: refreshInstance\n  });\n\n  const deleteCompany = useDeleteApiFormModal({\n    url: ApiEndpoints.company_list,\n    pk: company?.pk,\n    title: t`Delete Company`,\n    onFormSuccess: () => {\n      navigate('/');\n    }\n  });\n\n  const companyActions = useMemo(() => {\n    return [\n      <AdminButton model={ModelType.company} id={company.pk} />,\n      <PrintingActions\n        modelType={ModelType.company}\n        items={[company.pk]}\n        enableReports\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Company Actions`}\n        actions={[\n          EditItemAction({\n            hidden: !user.hasChangeRole(UserRoles.purchase_order),\n            onClick: () => editCompany.open()\n          }),\n          DeleteItemAction({\n            hidden: !user.hasDeleteRole(UserRoles.purchase_order),\n            onClick: () => deleteCompany.open()\n          })\n        ]}\n      />\n    ];\n  }, [id, company, user]);\n\n  const badges: ReactNode[] = useMemo(() => {\n    return [\n      <DetailsBadge\n        label={t`Inactive`}\n        color='red'\n        visible={company.active == false}\n      />\n    ];\n  }, [company]);\n\n  return (\n    <>\n      {editCompany.modal}\n      {deleteCompany.modal}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredPermission={ModelType.company}\n      >\n        <Stack gap='xs'>\n          <PageDetail\n            title={`${t`Company`}: ${company.name}`}\n            subtitle={company.description}\n            actions={companyActions}\n            imageUrl={company.image}\n            breadcrumbs={props.breadcrumbs}\n            lastCrumb={[\n              {\n                name: company.name,\n                url: `${props.last_crumb_url}/${company.pk}/`\n              }\n            ]}\n            badges={badges}\n            editAction={editCompany.open}\n            editEnabled={user.hasChangePermission(ModelType.company)}\n          />\n          <PanelGroup\n            pageKey='company'\n            panels={companyPanels}\n            instance={company}\n            reloadInstance={refreshInstance}\n            model={ModelType.company}\n            id={company.pk}\n          />\n        </Stack>\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["AddressTable","companyId","params","user","useUserState","table","useTable","columns","useMemo","accessor","sortable","switchable","render","record","YesNoButton","value","primary","title","_i18n","_","id","address","line1","line2","trim","LinkColumn","addressFields","company","postal_code","postal_city","province","country","shipping_notes","internal_shipping_notes","link","newAddress","useCreateApiFormModal","url","ApiEndpoints","address_list","fields","initialData","successMessage","selectedAddress","setSelectedAddress","useState","editAddress","useEditApiFormModal","pk","deleteAddress","useDeleteApiFormModal","preFormWarning","rowActions","useCallback","can_edit","hasChangeRole","UserRoles","purchase_order","sales_order","can_delete","hasDeleteRole","RowEditAction","hidden","onClick","open","RowDeleteAction","tableActions","can_add","jsx","AddItemButton","modal","InvenTreeTable","apiUrl","enableDownload","CompanyDetail","props","useParams","navigate","useNavigate","instance","refreshInstance","instanceQuery","useInstance","endpoint","company_list","refetchOnMount","detailsPanel","isFetching","Skeleton","tl","type","name","label","copy","external","website","phone","email","tax_id","tr","icon","ItemDetailsGrid","jsxs","Grid","DetailsImage","image","uploadFile","downloadImage","deleteFile","base","sm","DetailsTable","companyPanels","IconInfoCircle","content","IconPackageExport","is_supplier","SupplierPartTable","supplier","IconBuildingWarehouse","is_manufacturer","ManufacturerPartTable","manufacturer","IconShoppingCart","PurchaseOrderTable","IconPackages","StockItemTable","IconTruckDelivery","is_customer","SalesOrderTable","IconTruckReturn","ReturnOrderTable","customer","IconUsersGroup","ContactTable","IconMap2","AttachmentPanel","model_type","ModelType","model_id","NotesPanel","editCompany","companyFields","onFormSuccess","deleteCompany","companyActions","AdminButton","PrintingActions","OptionsActionDropdown","EditItemAction","DeleteItemAction","badges","DetailsBadge","active","InstanceDetail","Stack","PageDetail","description","breadcrumbs","last_crumb_url","hasChangePermission","PanelGroup"],"mappings":"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"}
