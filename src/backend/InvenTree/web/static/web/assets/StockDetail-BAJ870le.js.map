{"version":3,"file":"StockDetail-BAJ870le.js","sources":["../../../../../../frontend/src/tables/stock/InstalledItemsTable.tsx","../../../../../../frontend/src/tables/stock/StockItemTestResultTable.tsx","../../../../../../frontend/src/tables/stock/StockTrackingTable.tsx","../../../../../../frontend/src/pages/stock/StockDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Skeleton } from '@mantine/core';\nimport { IconUnlink } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport {\n  useStockItemInstallFields,\n  useStockItemUninstallFields\n} from '../../forms/StockForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { PartColumn, StatusColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function InstalledItemsTable({\n  stockItem\n}: Readonly<{\n  stockItem: any;\n}>) {\n  const table = useTable('stock_item_install');\n  const user = useUserState();\n\n  const installItemFields = useStockItemInstallFields({\n    stockItem: stockItem\n  });\n\n  const installItem = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_install),\n    pk: stockItem.pk,\n    title: t`Install Item`,\n    table: table,\n    successMessage: t`Item installed`,\n    fields: installItemFields\n  });\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const uninstallItemFields = useStockItemUninstallFields();\n\n  const uninstallItem = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_uninstall),\n    pk: selectedRecord.pk,\n    title: t`Uninstall Item`,\n    table: table,\n    successMessage: t`Item uninstalled`,\n    fields: uninstallItemFields,\n    initialData: {\n      location: stockItem.location ?? stockItem.part_detail?.default_location\n    }\n  });\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'part',\n        switchable: false,\n        render: (record: any) => PartColumn({ part: record?.part_detail })\n      },\n      {\n        accessor: 'quantity',\n        switchable: false,\n        render: (record: any) => {\n          let text = record.quantity;\n\n          if (record.serial && record.quantity == 1) {\n            text = `# ${record.serial}`;\n          }\n\n          return text;\n        }\n      },\n      {\n        accessor: 'batch',\n        switchable: false\n      },\n      StatusColumn({ model: ModelType.stockitem })\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='install'\n        tooltip={t`Install Item`}\n        onClick={() => {\n          installItem.open();\n        }}\n        hidden={\n          !user.hasChangeRole(UserRoles.stock) ||\n          stockItem.is_building ||\n          stockItem.part_detail?.assembly != true\n        }\n      />\n    ];\n  }, [stockItem, user]);\n\n  const rowActions = useCallback(\n    (record: any) => {\n      return [\n        {\n          title: t`Uninstall`,\n          tooltip: t`Uninstall stock item`,\n          onClick: () => {\n            setSelectedRecord(record);\n            uninstallItem.open();\n          },\n          icon: <IconUnlink />,\n          hidden: !user.hasChangeRole(UserRoles.stock)\n        }\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {installItem.modal}\n      {uninstallItem.modal}\n      {stockItem.pk ? (\n        <InvenTreeTable\n          url={apiUrl(ApiEndpoints.stock_item_list)}\n          tableState={table}\n          columns={tableColumns}\n          props={{\n            tableActions: tableActions,\n            enableSelection: true,\n            enableLabels: true,\n            enableReports: true,\n            rowActions: rowActions,\n            modelType: ModelType.stockitem,\n            params: {\n              belongs_to: stockItem.pk,\n              part_detail: true\n            }\n          }}\n        />\n      ) : (\n        <Skeleton />\n      )}\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Badge, Group, Text, Tooltip } from '@mantine/core';\nimport { showNotification } from '@mantine/notifications';\nimport {\n  IconCircleCheck,\n  IconCirclePlus,\n  IconInfoCircle\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { DataTable, type DataTableRowExpansionProps } from 'mantine-datatable';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowActions,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { PassFailButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { AttachmentLink } from '../../components/items/AttachmentLink';\nimport { RenderUser } from '../../components/render/User';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate } from '../../defaults/formatters';\nimport { useTestResultFields } from '../../forms/StockForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn, DescriptionColumn, NoteColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\n\nexport default function StockItemTestResultTable({\n  partId,\n  itemId\n}: Readonly<{\n  partId: number;\n  itemId: number;\n}>) {\n  const api = useApi();\n  const user = useUserState();\n  const table = useTable('stocktests');\n\n  const globalSettings = useGlobalSettingsState();\n  const includeTestStation = useMemo(\n    () => globalSettings.isSet('TEST_STATION_DATA'),\n    [globalSettings]\n  );\n  // Fetch the test templates required for this stock item\n  const { data: testTemplates } = useQuery({\n    queryKey: ['stocktesttemplates', partId, itemId],\n    queryFn: async () => {\n      if (!partId) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.part_test_template_list), {\n          params: {\n            part: partId,\n            include_inherited: true,\n            enabled: true\n          }\n        })\n        .then((response) => response.data);\n    }\n  });\n\n  useEffect(() => {\n    table.refreshTable();\n  }, [testTemplates]);\n\n  // Format the test results based on the returned data\n  const formatRecords = useCallback(\n    (records: any[]): any[] => {\n      // Construct a list of test templates\n      const results =\n        testTemplates?.map((template: any) => {\n          return {\n            ...template,\n            templateId: template.pk,\n            results: []\n          };\n        }) ?? [];\n\n      // If any of the tests results point to templates which we do not have, add them in\n      records.forEach((record) => {\n        if (!results.find((r: any) => r.templateId == record.template)) {\n          results.push({\n            ...record.template_detail,\n            templateId: record.template,\n            results: []\n          });\n        }\n      });\n\n      // Iterate through the returned records\n      // Note that the results are sorted by oldest first,\n      // to ensure that the most recent result is displayed \"on top\"\n      records\n        .sort((a: any, b: any) => {\n          return a.pk > b.pk ? 1 : -1;\n        })\n        .forEach((record) => {\n          // Find matching template\n          const idx = results.findIndex(\n            (r: any) => r.templateId == record.template\n          );\n          if (idx >= 0) {\n            results[idx] = {\n              ...results[idx],\n              ...record\n            };\n\n            results[idx].results.push(record);\n          }\n        });\n\n      return results;\n    },\n    [partId, itemId, testTemplates]\n  );\n\n  const constructTableColumns = useCallback(\n    (child: boolean) => {\n      return [\n        {\n          accessor: 'test',\n          title: t`Test`,\n          switchable: false,\n          sortable: true,\n          render: (record: any) => {\n            const enabled = record.enabled ?? record.template_detail?.enabled;\n            const installed =\n              record.stock_item != undefined && record.stock_item != itemId;\n\n            const multipleResults = record.results && record.results.length > 1;\n\n            return (\n              <Group justify='space-between' wrap='nowrap'>\n                {!child && (\n                  <RowExpansionIcon\n                    enabled={multipleResults}\n                    expanded={table.isRowExpanded(record.pk)}\n                  />\n                )}\n                <Text\n                  style={{ fontStyle: installed ? 'italic' : undefined }}\n                  c={enabled ? undefined : 'red'}\n                >\n                  {!record.templateId && '- '}\n                  {record.test_name ?? record.template_detail?.test_name}\n                </Text>\n                <Group justify='right'>\n                  {record.results && record.results.length > 1 && (\n                    <Tooltip label={t`Test Results`}>\n                      <Badge color='lightblue' variant='filled'>\n                        {record.results.length}\n                      </Badge>\n                    </Tooltip>\n                  )}\n                  {installed && (\n                    <Tooltip label={t`Test result for installed stock item`}>\n                      <IconInfoCircle size={16} color='blue' />\n                    </Tooltip>\n                  )}\n                </Group>\n              </Group>\n            );\n          }\n        },\n        {\n          accessor: 'result',\n          title: t`Result`,\n          switchable: false,\n          sortable: true,\n          render: (record: any) => {\n            if (record.result === undefined) {\n              return (\n                <Badge color='lightblue' variant='filled'>{t`No Result`}</Badge>\n              );\n            } else {\n              return <PassFailButton value={record.result} />;\n            }\n          }\n        },\n        DescriptionColumn({}),\n        {\n          accessor: 'value',\n          title: t`Value`\n        },\n        {\n          accessor: 'attachment',\n          title: t`Attachment`,\n          render: (record: any) =>\n            record.attachment && (\n              <AttachmentLink attachment={record.attachment} />\n            ),\n          noContext: true\n        },\n        NoteColumn({}),\n        DateColumn({}),\n        {\n          accessor: 'user',\n          title: t`User`,\n          sortable: false,\n          render: (record: any) =>\n            record.user_detail && <RenderUser instance={record.user_detail} />\n        },\n        {\n          accessor: 'test_station',\n          sortable: true,\n          title: t`Test station`,\n          hidden: !includeTestStation\n        },\n        {\n          accessor: 'started_datetime',\n          sortable: true,\n          title: t`Started`,\n          hidden: !includeTestStation,\n          render: (record: any) => {\n            return (\n              <Group justify='space-between'>\n                {formatDate(record.started_datetime, {\n                  showTime: true,\n                  showSeconds: true\n                })}\n              </Group>\n            );\n          }\n        },\n        {\n          accessor: 'finished_datetime',\n          sortable: true,\n          title: t`Finished`,\n          hidden: !includeTestStation,\n          render: (record: any) => {\n            return (\n              <Group justify='space-between'>\n                {formatDate(record.finished_datetime, {\n                  showTime: true,\n                  showSeconds: true\n                })}\n              </Group>\n            );\n          }\n        }\n      ];\n    },\n    [itemId, includeTestStation, table.expandedRecords]\n  );\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return constructTableColumns(false);\n  }, [itemId, includeTestStation, table.expandedRecords]);\n\n  const [selectedTemplate, setSelectedTemplate] = useState<number | undefined>(\n    undefined\n  );\n\n  const newResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: itemId,\n    templateId: selectedTemplate,\n    editing: false\n  });\n\n  const editResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: itemId,\n    templateId: selectedTemplate,\n    editing: true\n  });\n\n  const newTestModal = useCreateApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    fields: useMemo(() => ({ ...newResultFields }), [newResultFields]),\n    initialData: {\n      template: selectedTemplate,\n      result: true\n    },\n    title: t`Add Test Result`,\n    table: table,\n    successMessage: t`Test result added`\n  });\n\n  const [selectedTest, setSelectedTest] = useState<number>(0);\n\n  const editTestModal = useEditApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    pk: selectedTest,\n    fields: useMemo(() => ({ ...editResultFields }), [editResultFields]),\n    title: t`Edit Test Result`,\n    onFormSuccess: () => table.refreshTable,\n    successMessage: t`Test result updated`\n  });\n\n  const deleteTestModal = useDeleteApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    pk: selectedTest,\n    title: t`Delete Test Result`,\n    table: table,\n    successMessage: t`Test result deleted`\n  });\n\n  const passTest = useCallback(\n    (templateId: number) => {\n      api\n        .post(apiUrl(ApiEndpoints.stock_test_result_list), {\n          template: templateId,\n          stock_item: itemId,\n          result: true\n        })\n        .then(() => {\n          table.refreshTable();\n          showNotification({\n            title: t`Test Passed`,\n            message: t`Test result has been recorded`,\n            color: 'green'\n          });\n        })\n        .catch(() => {\n          showNotification({\n            title: t`Error`,\n            message: t`Failed to record test result`,\n            color: 'red'\n          });\n        });\n    },\n    [itemId]\n  );\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      if (record.stock_item != undefined && record.stock_item != itemId) {\n        // Test results for other stock items cannot be edited\n        return [];\n      }\n\n      return [\n        {\n          title: t`Pass Test`,\n          color: 'green',\n          icon: <IconCircleCheck />,\n          hidden:\n            !record.templateId ||\n            record?.requires_attachment ||\n            record?.requires_value ||\n            record.result,\n          onClick: () => passTest(record.templateId)\n        },\n        {\n          title: t`Add`,\n          tooltip: t`Add Test Result`,\n          color: 'green',\n          icon: <IconCirclePlus />,\n          hidden: !user.hasAddRole(UserRoles.stock) || !record.templateId,\n          onClick: () => {\n            setSelectedTemplate(record.templateId);\n            newTestModal.open();\n          }\n        },\n        RowEditAction({\n          tooltip: t`Edit Test Result`,\n          hidden:\n            !user.hasChangeRole(UserRoles.stock) || !record.template_detail,\n          onClick: () => {\n            setSelectedTest(record.pk);\n            editTestModal.open();\n          }\n        }),\n        RowDeleteAction({\n          tooltip: t`Delete Test Result`,\n          hidden:\n            !user.hasDeleteRole(UserRoles.stock) || !record.template_detail,\n          onClick: () => {\n            setSelectedTest(record.pk);\n            deleteTestModal.open();\n          }\n        })\n      ];\n    },\n    [user, itemId]\n  );\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'required',\n        label: t`Required`,\n        description: t`Show results for required tests`\n      },\n      {\n        name: 'include_installed',\n        label: t`Include Installed`,\n        description: t`Show results for installed stock items`\n      },\n      {\n        name: 'result',\n        label: t`Passed`,\n        description: t`Show only passed tests`\n      },\n      {\n        name: 'enabled',\n        label: t`Enabled`,\n        description: t`Show results for enabled tests`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-test-result'\n        tooltip={t`Add Test Result`}\n        onClick={() => {\n          setSelectedTemplate(undefined);\n          newTestModal.open();\n        }}\n        hidden={!user.hasAddRole(UserRoles.stock)}\n      />\n    ];\n  }, [user]);\n\n  // Row expansion controller\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    const cols: any = [\n      ...constructTableColumns(true),\n      {\n        accessor: 'actions',\n        title: '  ',\n        hidden: false,\n        switchable: false,\n        width: 50,\n        render: (record: any) => (\n          <RowActions actions={rowActions(record) ?? []} />\n        )\n      }\n    ];\n\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        return (\n          table.isRowExpanded(record.pk) ||\n          (record.results && record.results.length > 1)\n        );\n      },\n      content: ({ record }: { record: any }) => {\n        if (!record || !record.results || record.results.length < 2) {\n          return null;\n        }\n\n        const results = record?.results ?? [];\n\n        return (\n          <DataTable\n            key={record.pk}\n            idAccessor={'test'}\n            noHeader\n            columns={cols}\n            records={results.slice(0, -1)}\n          />\n        );\n      }\n    };\n  }, [constructTableColumns, table.isRowExpanded]);\n\n  return (\n    <>\n      {newTestModal.modal}\n      {editTestModal.modal}\n      {deleteTestModal.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_test_result_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          dataFormatter: formatRecords,\n          enablePagination: false,\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowActions: rowActions,\n          rowExpansion: rowExpansion,\n          params: {\n            stock_item: itemId,\n            user_detail: true,\n            attachment_detail: true,\n            template_detail: true\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Table, Text } from '@mantine/core';\nimport { type ReactNode, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { formatDecimal } from '@lib/functions/Formatting';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { RenderBuildOrder } from '../../components/render/Build';\nimport { RenderCompany } from '../../components/render/Company';\nimport {\n  RenderPurchaseOrder,\n  RenderReturnOrder,\n  RenderSalesOrder\n} from '../../components/render/Order';\nimport { RenderPart } from '../../components/render/Part';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport {\n  RenderStockItem,\n  RenderStockLocation\n} from '../../components/render/Stock';\nimport { RenderUser } from '../../components/render/User';\nimport { useTable } from '../../hooks/UseTable';\nimport { DateColumn, DescriptionColumn } from '../ColumnRenderers';\nimport { UserFilter } from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\ntype StockTrackingEntry = {\n  label: string;\n  key: string;\n  details: ReactNode;\n};\n\nexport function StockTrackingTable({ itemId }: Readonly<{ itemId: number }>) {\n  const navigate = useNavigate();\n  const table = useTable('stock_tracking');\n\n  // Render \"details\" for a stock tracking record\n  const renderDetails = useCallback(\n    (record: any) => {\n      const deltas: any = record?.deltas ?? {};\n\n      const entries: StockTrackingEntry[] = [\n        {\n          label: t`Stock Item`,\n          key: 'stockitem',\n          details:\n            deltas.stockitem_detail &&\n            RenderStockItem({ instance: deltas.stockitem_detail, link: true })\n        },\n        {\n          label: t`Stock Item`,\n          key: 'item',\n          details:\n            deltas.item_detail &&\n            RenderStockItem({\n              instance: deltas.item_detail,\n              link: true\n            })\n        },\n        {\n          label: t`Status`,\n          key: 'status',\n          details:\n            deltas.status &&\n            StatusRenderer({ status: deltas.status, type: ModelType.stockitem })\n        },\n        {\n          label: t`Quantity`,\n          key: 'quantity',\n          details: formatDecimal(deltas.quantity)\n        },\n        {\n          label: t`Added`,\n          key: 'added',\n          details: deltas.added\n        },\n        {\n          label: t`Removed`,\n          key: 'removed',\n          details: deltas.removed\n        },\n        {\n          label: t`Part`,\n          key: 'part',\n          details:\n            deltas.part_detail &&\n            RenderPart({\n              instance: deltas.part_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Location`,\n          key: 'location',\n          details:\n            deltas.location_detail &&\n            RenderStockLocation({\n              instance: deltas.location_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Build Order`,\n          key: 'buildorder',\n          details:\n            deltas.buildorder_detail &&\n            RenderBuildOrder({\n              instance: deltas.buildorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Purchase Order`,\n          key: 'purchaseorder',\n          details:\n            deltas.purchaseorder_detail &&\n            RenderPurchaseOrder({\n              instance: deltas.purchaseorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Sales Order`,\n          key: 'salesorder',\n          details:\n            deltas.salesorder_detail &&\n            RenderSalesOrder({\n              instance: deltas.salesorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Return Order`,\n          key: 'returnorder',\n          details:\n            deltas.returnorder_detail &&\n            RenderReturnOrder({\n              instance: deltas.returnorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Customer`,\n          key: 'customer',\n          details:\n            deltas.customer_detail &&\n            RenderCompany({\n              instance: deltas.customer_detail,\n              link: true,\n              navigate: navigate\n            })\n        }\n      ];\n\n      return (\n        <Table striped>\n          <Table.Tbody>\n            {entries.map(\n              (entry) =>\n                entry.details && (\n                  <Table.Tr key={entry.key}>\n                    <Table.Td>\n                      <Text>{entry.label}</Text>\n                    </Table.Td>\n                    <Table.Td>{entry.details}</Table.Td>\n                  </Table.Tr>\n                )\n            )}\n          </Table.Tbody>\n        </Table>\n      );\n    },\n    [navigate]\n  );\n\n  const filters: TableFilter[] = useMemo(() => {\n    return [\n      UserFilter({\n        name: 'user',\n        label: t`User`,\n        description: t`Filter by user`\n      })\n    ];\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      DateColumn({\n        switchable: false\n      }),\n      DescriptionColumn({\n        accessor: 'label'\n      }),\n      {\n        accessor: 'details',\n        title: t`Details`,\n        switchable: false,\n        render: renderDetails\n      },\n      {\n        accessor: 'notes',\n        title: t`Notes`,\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'user',\n        title: t`User`,\n        render: (record: any) => {\n          if (!record.user_detail) {\n            return <Text size='sm' fs='italic'>{t`No user information`}</Text>;\n          }\n\n          return RenderUser({ instance: record.user_detail });\n        }\n      }\n    ];\n  }, []);\n\n  return (\n    <InvenTreeTable\n      tableState={table}\n      url={apiUrl(ApiEndpoints.stock_tracking_list)}\n      columns={tableColumns}\n      props={{\n        params: {\n          item: itemId,\n          user_detail: true\n        },\n        enableDownload: true,\n        tableFilters: filters\n      }}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  Button,\n  Grid,\n  Group,\n  Skeleton,\n  Space,\n  Stack,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport {\n  IconArrowLeft,\n  IconArrowRight,\n  IconBookmark,\n  IconBoxPadding,\n  IconChecklist,\n  IconHistory,\n  IconInfoCircle,\n  IconPackages,\n  IconSearch,\n  IconShoppingCart,\n  IconSitemap\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { type ReactNode, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport { notifications } from '@mantine/notifications';\nimport { useBarcodeScanDialog } from '../../components/barcodes/BarcodeScanDialog';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport DetailsBadge from '../../components/details/DetailsBadge';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  ActionDropdown,\n  BarcodeActionDropdown,\n  DeleteItemAction,\n  DuplicateItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { StylishText } from '../../components/items/StylishText';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport NavigationTree from '../../components/nav/NavigationTree';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport LocateItemButton from '../../components/plugins/LocateItemButton';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatCurrency, formatDecimal } from '../../defaults/formatters';\nimport {\n  type StockOperationProps,\n  useFindSerialNumberForm,\n  useStockFields,\n  useStockItemSerializeFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport BuildAllocatedStockTable from '../../tables/build/BuildAllocatedStockTable';\nimport SalesOrderAllocationTable from '../../tables/sales/SalesOrderAllocationTable';\nimport InstalledItemsTable from '../../tables/stock/InstalledItemsTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\nimport StockItemTestResultTable from '../../tables/stock/StockItemTestResultTable';\nimport { StockTrackingTable } from '../../tables/stock/StockTrackingTable';\n\nexport default function StockDetail() {\n  const { id } = useParams();\n\n  const api = useApi();\n  const user = useUserState();\n\n  const globalSettings = useGlobalSettingsState();\n\n  const enableExpiry = useMemo(\n    () => globalSettings.isSet('STOCK_ENABLE_EXPIRY'),\n    [globalSettings]\n  );\n\n  const navigate = useNavigate();\n\n  const [treeOpen, setTreeOpen] = useState(false);\n\n  const {\n    instance: stockitem,\n    refreshInstance,\n    refreshInstancePromise,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.stock_item_list,\n    pk: id,\n    params: {\n      part_detail: true,\n      location_detail: true,\n      path_detail: true\n    }\n  });\n\n  const { instance: serialNumbers, instanceQuery: serialNumbersQuery } =\n    useInstance({\n      endpoint: ApiEndpoints.stock_serial_info,\n      pk: id\n    });\n\n  const findBySerialNumber = useFindSerialNumberForm({\n    partId: stockitem.part\n  });\n\n  const detailsPanel = useMemo(() => {\n    const data = { ...stockitem };\n    const part = stockitem?.part_detail ?? {};\n\n    data.available_stock = Math.max(0, data.quantity - data.allocated);\n\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    // Top left - core part information\n    const tl: DetailsField[] = [\n      {\n        name: 'part',\n        label: t`Base Part`,\n        type: 'link',\n        model: ModelType.part\n      },\n      {\n        name: 'part_detail.IPN',\n        label: t`IPN`,\n        type: 'text',\n        copy: true,\n        icon: 'part',\n        hidden: !part.IPN\n      },\n      {\n        name: 'status',\n        type: 'status',\n        label: t`Status`,\n        model: ModelType.stockitem\n      },\n      {\n        name: 'status_custom_key',\n        type: 'status',\n        label: t`Custom Status`,\n        model: ModelType.stockitem,\n        icon: 'status',\n        hidden:\n          !stockitem.status_custom_key ||\n          stockitem.status_custom_key == stockitem.status\n      },\n      {\n        type: 'text',\n        name: 'updated',\n        icon: 'calendar',\n        label: t`Last Updated`\n      },\n      {\n        type: 'text',\n        name: 'stocktake',\n        icon: 'calendar',\n        label: t`Last Stocktake`,\n        hidden: !stockitem.stocktake\n      }\n    ];\n\n    // Top right - available stock information\n    const tr: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'serial',\n        label: t`Serial Number`,\n        hidden: !stockitem.serial,\n        value_formatter: () => (\n          <Group gap='xs' justify='space-apart'>\n            <Text>{stockitem.serial}</Text>\n            <Space flex={10} />\n            <Group gap={2} justify='right'>\n              {serialNumbers.previous?.pk && (\n                <Tooltip label={t`Previous serial number`} position='top'>\n                  <Button\n                    p={3}\n                    aria-label='previous-serial-number'\n                    leftSection={<IconArrowLeft />}\n                    variant='transparent'\n                    size='sm'\n                    onClick={() => {\n                      navigate(\n                        getDetailUrl(\n                          ModelType.stockitem,\n                          serialNumbers.previous.pk\n                        )\n                      );\n                    }}\n                  >\n                    {serialNumbers.previous.serial}\n                  </Button>\n                </Tooltip>\n              )}\n              <ActionButton\n                icon={<IconSearch size={18} />}\n                tooltip={t`Find serial number`}\n                tooltipAlignment='top'\n                variant='transparent'\n                onClick={findBySerialNumber.open}\n              />\n              {serialNumbers.next?.pk && (\n                <Tooltip label={t`Next serial number`} position='top'>\n                  <Button\n                    p={3}\n                    aria-label='next-serial-number'\n                    rightSection={<IconArrowRight />}\n                    variant='transparent'\n                    size='sm'\n                    onClick={() => {\n                      navigate(\n                        getDetailUrl(ModelType.stockitem, serialNumbers.next.pk)\n                      );\n                    }}\n                  >\n                    {serialNumbers.next.serial}\n                  </Button>\n                </Tooltip>\n              )}\n            </Group>\n          </Group>\n        )\n      },\n      {\n        type: 'number',\n        name: 'quantity',\n        label: t`Quantity`,\n        unit: part?.units,\n        hidden: !!stockitem.serial && stockitem.quantity == 1\n      },\n      {\n        type: 'number',\n        name: 'available_stock',\n        label: t`Available`,\n        unit: part?.units,\n        icon: 'stock'\n      },\n      {\n        type: 'number',\n        name: 'allocated',\n        label: t`Allocated to Orders`,\n        unit: part?.units,\n        icon: 'tick_off',\n        hidden: !stockitem.allocated\n      },\n      {\n        type: 'text',\n        name: 'batch',\n        label: t`Batch Code`,\n        hidden: !stockitem.batch\n      }\n    ];\n\n    // Bottom left: location information\n    const bl: DetailsField[] = [\n      {\n        name: 'supplier_part',\n        label: t`Supplier Part`,\n        type: 'link',\n        model_field: 'SKU',\n        model: ModelType.supplierpart,\n        hidden: !stockitem.supplier_part\n      },\n      {\n        type: 'link',\n        name: 'location',\n        label: t`Location`,\n        model: ModelType.stocklocation,\n        hidden: !stockitem.location\n      },\n      {\n        type: 'link',\n        name: 'belongs_to',\n        label: t`Installed In`,\n        model_filters: {\n          part_detail: true\n        },\n        model_formatter: (model: any) => {\n          let text = model?.part_detail?.full_name ?? model?.name;\n          if (model.serial && model.quantity == 1) {\n            text += ` # ${model.serial}`;\n          }\n\n          return text;\n        },\n        icon: 'stock',\n        model: ModelType.stockitem,\n        hidden: !stockitem.belongs_to\n      },\n      {\n        type: 'link',\n        name: 'parent',\n        icon: 'sitemap',\n        label: t`Parent Item`,\n        model: ModelType.stockitem,\n        hidden: !stockitem.parent,\n        model_formatter: (model: any) => {\n          return t`Parent stock item`;\n        }\n      },\n      {\n        type: 'link',\n        name: 'consumed_by',\n        label: t`Consumed By`,\n        model: ModelType.build,\n        hidden: !stockitem.consumed_by,\n        icon: 'build',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'build',\n        label: t`Build Order`,\n        model: ModelType.build,\n        hidden: !stockitem.build,\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'purchase_order',\n        label: t`Purchase Order`,\n        model: ModelType.purchaseorder,\n        hidden: !stockitem.purchase_order,\n        icon: 'purchase_orders',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'sales_order',\n        label: t`Sales Order`,\n        model: ModelType.salesorder,\n        hidden: !stockitem.sales_order,\n        icon: 'sales_orders',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'customer',\n        label: t`Customer`,\n        model: ModelType.company,\n        hidden: !stockitem.customer\n      }\n    ];\n\n    // Bottom right - any other information\n    const br: DetailsField[] = [\n      // Expiry date\n      {\n        type: 'date',\n        name: 'expiry_date',\n        label: t`Expiry Date`,\n        hidden: !enableExpiry || !stockitem.expiry_date,\n        icon: 'calendar'\n      },\n      // TODO: Ownership\n      {\n        type: 'text',\n        name: 'purchase_price',\n        label: t`Unit Price`,\n        icon: 'currency',\n        hidden: !stockitem.purchase_price,\n        value_formatter: () => {\n          return formatCurrency(stockitem.purchase_price, {\n            currency: stockitem.purchase_price_currency\n          });\n        }\n      },\n      {\n        type: 'text',\n        name: 'stock_value',\n        label: t`Stock Value`,\n        icon: 'currency',\n        hidden:\n          !stockitem.purchase_price ||\n          stockitem.quantity == 1 ||\n          stockitem.quantity == 0,\n        value_formatter: () => {\n          return formatCurrency(stockitem.purchase_price, {\n            currency: stockitem.purchase_price_currency,\n            multiplier: stockitem.quantity\n          });\n        }\n      },\n      {\n        type: 'text',\n        name: 'packaging',\n        icon: 'part',\n        label: t`Packaging`,\n        hidden: !stockitem.packaging\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.part}\n            apiPath={ApiEndpoints.part_list}\n            src={\n              stockitem.part_detail?.image ?? stockitem?.part_detail?.thumbnail\n            }\n            pk={stockitem.part}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable fields={tl} item={data} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable fields={tr} item={data} />\n        <DetailsTable fields={bl} item={data} />\n        <DetailsTable fields={br} item={data} />\n      </ItemDetailsGrid>\n    );\n  }, [\n    stockitem,\n    serialNumbers,\n    serialNumbersQuery.isFetching,\n    instanceQuery.isFetching,\n    enableExpiry\n  ]);\n\n  const showBuildAllocations: boolean = useMemo(() => {\n    // Determine if \"build allocations\" should be shown for this stock item\n    return (\n      stockitem?.part_detail?.component && // Must be a \"component\"\n      !stockitem?.sales_order && // Must not be assigned to a sales order\n      !stockitem?.belongs_to\n    ); // Must not be installed into another item\n  }, [stockitem]);\n\n  const showSalesAllocations: boolean = useMemo(() => {\n    return stockitem?.part_detail?.salable;\n  }, [stockitem]);\n\n  // API query to determine if this stock item has trackable BOM items\n  const trackedBomItemQuery = useQuery({\n    queryKey: ['tracked-bom-item', stockitem.pk, stockitem.part],\n    queryFn: () => {\n      if (\n        !stockitem.pk ||\n        !stockitem.part ||\n        !stockitem.part_detail?.assembly\n      ) {\n        return false;\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.bom_list), {\n          params: {\n            part: stockitem.part,\n            sub_part_trackable: true,\n            limit: 1\n          }\n        })\n        .then((response) => {\n          if (response.status == 200) {\n            return response.data.count > 0;\n          } else {\n            return null;\n          }\n        });\n    }\n  });\n\n  const showInstalledItems: boolean = useMemo(() => {\n    if (stockitem?.installed_items) {\n      // There are installed items in this stock item\n      return true;\n    }\n\n    if (!!trackedBomItemQuery.data) {\n      return trackedBomItemQuery.data;\n    }\n\n    // Fall back to whether this is an assembly or not\n    return stockitem?.part_detail?.assembly;\n  }, [trackedBomItemQuery, stockitem]);\n\n  const stockPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'details',\n        label: t`Stock Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'tracking',\n        label: t`Stock Tracking`,\n        icon: <IconHistory />,\n        content: stockitem.pk ? (\n          <StockTrackingTable itemId={stockitem.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'allocations',\n        label: t`Allocations`,\n        icon: <IconBookmark />,\n        hidden:\n          !stockitem.in_stock ||\n          (!showSalesAllocations && !showBuildAllocations),\n        content: (\n          <Accordion\n            multiple={true}\n            defaultValue={['buildAllocations', 'salesAllocations']}\n          >\n            {showBuildAllocations && (\n              <Accordion.Item value='buildAllocations' key='buildAllocations'>\n                <Accordion.Control>\n                  <StylishText size='lg'>{t`Build Order Allocations`}</StylishText>\n                </Accordion.Control>\n                <Accordion.Panel>\n                  <BuildAllocatedStockTable\n                    stockId={stockitem.pk}\n                    modelField='build'\n                    modelTarget={ModelType.build}\n                    showBuildInfo\n                  />\n                </Accordion.Panel>\n              </Accordion.Item>\n            )}\n            {showSalesAllocations && (\n              <Accordion.Item value='salesAllocations' key='salesAllocations'>\n                <Accordion.Control>\n                  <StylishText size='lg'>{t`Sales Order Allocations`}</StylishText>\n                </Accordion.Control>\n                <Accordion.Panel>\n                  <SalesOrderAllocationTable\n                    stockId={stockitem.pk}\n                    modelField='order'\n                    modelTarget={ModelType.salesorder}\n                    showOrderInfo\n                  />\n                </Accordion.Panel>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        )\n      },\n      {\n        name: 'testdata',\n        label: t`Test Data`,\n        icon: <IconChecklist />,\n        hidden: !stockitem?.part_detail?.testable,\n        content: stockitem?.pk ? (\n          <StockItemTestResultTable\n            itemId={stockitem.pk}\n            partId={stockitem.part}\n          />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'installed_items',\n        label: t`Installed Items`,\n        icon: <IconBoxPadding />,\n        hidden: !showInstalledItems,\n        content: <InstalledItemsTable stockItem={stockitem} />\n      },\n      {\n        name: 'child_items',\n        label: t`Child Items`,\n        icon: <IconSitemap />,\n        hidden: (stockitem?.child_items ?? 0) == 0,\n        content: stockitem?.pk ? (\n          <StockItemTable\n            tableName='child-stock'\n            params={{ ancestor: stockitem.pk }}\n          />\n        ) : (\n          <Skeleton />\n        )\n      },\n      AttachmentPanel({\n        model_type: ModelType.stockitem,\n        model_id: stockitem.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.stockitem,\n        model_id: stockitem.pk\n      })\n    ];\n  }, [\n    showSalesAllocations,\n    showBuildAllocations,\n    showInstalledItems,\n    stockitem,\n    serialNumbers,\n    serialNumbersQuery,\n    id,\n    user\n  ]);\n\n  const breadcrumbs = useMemo(\n    () => [\n      { name: t`Stock`, url: '/stock' },\n      ...(stockitem.location_path ?? []).map((l: any) => ({\n        name: l.name,\n        url: getDetailUrl(ModelType.stocklocation, l.pk)\n      }))\n    ],\n    [stockitem]\n  );\n\n  const editStockItemFields = useStockFields({\n    create: false,\n    stockItem: stockitem,\n    partId: stockitem.part,\n    modalId: 'edit-stock-item'\n  });\n\n  const editStockItem = useEditApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    pk: stockitem.pk,\n    title: t`Edit Stock Item`,\n    modalId: 'edit-stock-item',\n    fields: editStockItemFields,\n    onFormSuccess: refreshInstance\n  });\n\n  const duplicateStockItemFields = useStockFields({\n    create: true,\n    modalId: 'duplicate-stock-item'\n  });\n\n  const duplicateStockData = useMemo(() => {\n    const duplicate = {\n      ...stockitem,\n      serial_numbers: stockitem.serial\n    };\n\n    // Omit the \"serial\" field for item creation\n    delete duplicate.serial;\n\n    return duplicate;\n  }, [stockitem]);\n\n  const duplicateStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    title: t`Add Stock Item`,\n    modalId: 'duplicate-stock-item',\n    fields: duplicateStockItemFields,\n    initialData: {\n      ...duplicateStockData\n    },\n    follow: true,\n    successMessage: null,\n    modelType: ModelType.stockitem,\n    onFormSuccess: (data) => {\n      // Handle case where multiple stock items are created\n      if (Array.isArray(data) && data.length > 0) {\n        if (data.length == 1) {\n          navigate(getDetailUrl(ModelType.stockitem, data[0]?.pk));\n        } else {\n          const n: number = data.length;\n          notifications.show({\n            title: t`Items Created`,\n            message: t`Created ${n} stock items`,\n            color: 'green'\n          });\n        }\n      }\n    }\n  });\n\n  const preDeleteContent = useMemo(() => {\n    // TODO: Fill this out with information on the stock item.\n    // e.g. list of child items which would be deleted, etc\n    return undefined;\n  }, [stockitem]);\n\n  const deleteStockItem = useDeleteApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    pk: stockitem.pk,\n    title: t`Delete Stock Item`,\n    preFormContent: preDeleteContent,\n    onFormSuccess: () => {\n      // Redirect to the part page\n      navigate(getDetailUrl(ModelType.part, stockitem.part));\n    }\n  });\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      items: [stockitem],\n      model: ModelType.stockitem,\n      refresh: refreshInstance,\n      filters: {\n        in_stock: true\n      }\n    };\n  }, [stockitem]);\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    delete: false,\n    assign: !!stockitem.in_stock,\n    return: !!stockitem.consumed_by || !!stockitem.customer,\n    merge: false\n  });\n\n  const serializeStockFields = useStockItemSerializeFields({\n    partId: stockitem.part,\n    trackable: stockitem.part_detail?.trackable,\n    modalId: 'stock-item-serialize'\n  });\n\n  const serializeStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_serialize,\n    pk: stockitem.pk,\n    title: t`Serialize Stock Item`,\n    modalId: 'stock-item-serialize',\n    fields: serializeStockFields,\n    initialData: {\n      quantity: stockitem.quantity,\n      destination: stockitem.location ?? stockitem.part_detail?.default_location\n    },\n    onFormSuccess: (response: any) => {\n      if (response.length >= stockitem.quantity) {\n        // Entire item was serialized\n        // Navigate to the first result\n        navigate(getDetailUrl(ModelType.stockitem, response[0].pk));\n      } else {\n        refreshInstance();\n      }\n    },\n    successMessage: t`Stock item serialized`\n  });\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: stockitem.part_detail ? [stockitem.part_detail] : []\n  });\n\n  const scanIntoLocation = useBarcodeScanDialog({\n    title: t`Scan Into Location`,\n    modelType: ModelType.stocklocation,\n    callback: async (barcode, response) => {\n      const pk = response.stocklocation.pk;\n\n      return api\n        .post(apiUrl(ApiEndpoints.stock_transfer), {\n          location: pk,\n          items: [\n            {\n              pk: stockitem.pk,\n              quantity: stockitem.quantity\n            }\n          ]\n        })\n        .then(() => {\n          refreshInstance();\n          return {\n            success: t`Scanned stock item into location`\n          };\n        })\n        .catch((error) => {\n          console.log('Error scanning stock item:', error);\n          return {\n            error: t`Error scanning stock item`\n          };\n        });\n    }\n  });\n\n  const stockActions = useMemo(() => {\n    // Can this stock item be transferred to a different location?\n    const canTransfer =\n      user.hasChangeRole(UserRoles.stock) &&\n      !stockitem.sales_order &&\n      !stockitem.belongs_to &&\n      !stockitem.customer &&\n      !stockitem.consumed_by;\n\n    const isBuilding = stockitem.is_building;\n\n    const serial = stockitem.serial;\n    const serialized =\n      serial != null &&\n      serial != undefined &&\n      serial != '' &&\n      stockitem.quantity == 1;\n\n    return [\n      <AdminButton model={ModelType.stockitem} id={stockitem.pk} />,\n      <LocateItemButton stockId={stockitem.pk} />,\n      <BarcodeActionDropdown\n        model={ModelType.stockitem}\n        pk={stockitem.pk}\n        hash={stockitem?.barcode_hash}\n        perm={user.hasChangeRole(UserRoles.stock)}\n        actions={[\n          {\n            name: t`Scan into location`,\n            icon: <InvenTreeIcon icon='location' />,\n            tooltip: t`Scan this item into a location`,\n            onClick: scanIntoLocation.open\n          }\n        ]}\n      />,\n      <PrintingActions\n        modelType={ModelType.stockitem}\n        items={[stockitem.pk]}\n        enableReports\n        enableLabels\n      />,\n      <ActionDropdown\n        tooltip={t`Stock Operations`}\n        icon={<IconPackages />}\n        actions={[\n          ...stockAdjustActions.menuActions,\n          {\n            name: t`Serialize`,\n            tooltip: t`Serialize stock`,\n            hidden:\n              serialized ||\n              stockitem?.quantity < 1 ||\n              stockitem?.part_detail?.trackable != true,\n            icon: <InvenTreeIcon icon='serial' iconProps={{ color: 'blue' }} />,\n            onClick: () => {\n              serializeStockItem.open();\n            }\n          },\n          {\n            name: t`Order`,\n            tooltip: t`Order Stock`,\n            hidden:\n              !user.hasAddRole(UserRoles.purchase_order) ||\n              !stockitem.part_detail?.active ||\n              !stockitem.part_detail?.purchaseable,\n            icon: <IconShoppingCart color='blue' />,\n            onClick: () => {\n              orderPartsWizard.openWizard();\n            }\n          }\n        ]}\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Stock Item Actions`}\n        actions={[\n          DuplicateItemAction({\n            hidden: !user.hasAddRole(UserRoles.stock),\n            onClick: () => duplicateStockItem.open()\n          }),\n          EditItemAction({\n            hidden: !user.hasChangeRole(UserRoles.stock),\n            onClick: () => editStockItem.open()\n          }),\n          DeleteItemAction({\n            hidden: !user.hasDeleteRole(UserRoles.stock),\n            onClick: () => deleteStockItem.open()\n          })\n        ]}\n      />\n    ];\n  }, [id, stockitem, user, stockAdjustActions.menuActions]);\n\n  const stockBadges: ReactNode[] = useMemo(() => {\n    let available = (stockitem?.quantity ?? 0) - (stockitem?.allocated ?? 0);\n    available = Math.max(0, available);\n\n    return instanceQuery.isLoading\n      ? []\n      : [\n          <DetailsBadge\n            color='yellow'\n            label={t`In Production`}\n            visible={stockitem.is_building}\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Serial Number`}: ${stockitem.serial}`}\n            visible={!!stockitem.serial}\n            key='serial'\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Quantity`}: ${formatDecimal(stockitem.quantity)}`}\n            visible={!stockitem.serial}\n            key='quantity'\n          />,\n          <DetailsBadge\n            color='yellow'\n            label={`${t`Available`}: ${formatDecimal(available)}`}\n            visible={\n              stockitem.in_stock &&\n              !stockitem.serial &&\n              available != stockitem.quantity\n            }\n            key='available'\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Batch Code`}: ${stockitem.batch}`}\n            visible={!!stockitem.batch}\n            key='batch'\n          />,\n          <StatusRenderer\n            status={stockitem.status_custom_key || stockitem.status}\n            type={ModelType.stockitem}\n            options={{\n              size: 'lg'\n            }}\n            key='status'\n          />,\n          <DetailsBadge\n            color='yellow'\n            label={t`Stale`}\n            visible={enableExpiry && stockitem.stale && !stockitem.expired}\n            key='stale'\n          />,\n          <DetailsBadge\n            color='orange'\n            label={t`Expired`}\n            visible={enableExpiry && stockitem.expired}\n            key='expired'\n          />,\n          <DetailsBadge\n            color='red'\n            label={t`Unavailable`}\n            visible={stockitem.in_stock == false}\n            key='unavailable'\n          />\n        ];\n  }, [stockitem, instanceQuery, enableExpiry]);\n\n  return (\n    <>\n      {findBySerialNumber.modal}\n      {scanIntoLocation.dialog}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredPermission={ModelType.stockitem}\n      >\n        <Stack>\n          {user.hasViewRole(UserRoles.stock_location) && (\n            <NavigationTree\n              title={t`Stock Locations`}\n              modelType={ModelType.stocklocation}\n              endpoint={ApiEndpoints.stock_location_tree}\n              opened={treeOpen}\n              onClose={() => setTreeOpen(false)}\n              selectedId={stockitem?.location}\n            />\n          )}\n          <PageDetail\n            title={t`Stock Item`}\n            subtitle={stockitem.part_detail?.full_name}\n            imageUrl={stockitem.part_detail?.thumbnail}\n            editAction={editStockItem.open}\n            editEnabled={user.hasChangePermission(ModelType.stockitem)}\n            badges={stockBadges}\n            breadcrumbs={\n              user.hasViewRole(UserRoles.stock_location)\n                ? breadcrumbs\n                : undefined\n            }\n            lastCrumb={[\n              {\n                name: stockitem.name,\n                url: `/stock/item/${stockitem.pk}/`\n              }\n            ]}\n            breadcrumbAction={() => {\n              setTreeOpen(true);\n            }}\n            actions={stockActions}\n          />\n          <PanelGroup\n            pageKey='stockitem'\n            panels={stockPanels}\n            model={ModelType.stockitem}\n            id={stockitem.pk}\n            instance={stockitem}\n          />\n        </Stack>\n      </InstanceDetail>\n      {editStockItem.modal}\n      {duplicateStockItem.modal}\n      {deleteStockItem.modal}\n      {serializeStockItem.modal}\n      {stockAdjustActions.modals.map((modal) => modal.modal)}\n      {orderPartsWizard.wizard}\n    </>\n  );\n}\n"],"names":["InstalledItemsTable","stockItem","table","useTable","user","useUserState","installItemFields","useStockItemInstallFields","installItem","useCreateApiFormModal","url","apiUrl","ApiEndpoints","stock_install","pk","title","_i18n","_","id","successMessage","fields","selectedRecord","setSelectedRecord","useState","uninstallItemFields","useStockItemUninstallFields","uninstallItem","stock_uninstall","initialData","location","part_detail","default_location","tableColumns","useMemo","accessor","switchable","render","record","PartColumn","part","text","quantity","serial","StatusColumn","model","ModelType","stockitem","tableActions","jsx","AddItemButton","open","hasChangeRole","UserRoles","stock","is_building","assembly","rowActions","useCallback","tooltip","onClick","icon","IconUnlink","hidden","modal","InvenTreeTable","stock_item_list","enableSelection","enableLabels","enableReports","modelType","params","belongs_to","Skeleton","StockItemTestResultTable","partId","itemId","api","useApi","globalSettings","useGlobalSettingsState","includeTestStation","isSet","data","testTemplates","useQuery","queryKey","queryFn","get","part_test_template_list","include_inherited","enabled","then","response","useEffect","refreshTable","formatRecords","records","results","map","template","templateId","forEach","find","r","push","template_detail","sort","a","b","idx","findIndex","constructTableColumns","child","sortable","installed","stock_item","undefined","multipleResults","length","jsxs","Group","RowExpansionIcon","isRowExpanded","Text","fontStyle","test_name","Tooltip","Badge","IconInfoCircle","result","PassFailButton","DescriptionColumn","attachment","AttachmentLink","noContext","NoteColumn","DateColumn","user_detail","RenderUser","formatDate","started_datetime","showTime","showSeconds","finished_datetime","expandedRecords","selectedTemplate","setSelectedTemplate","newResultFields","useTestResultFields","editing","editResultFields","newTestModal","stock_test_result_list","selectedTest","setSelectedTest","editTestModal","useEditApiFormModal","onFormSuccess","deleteTestModal","useDeleteApiFormModal","passTest","post","showNotification","message","color","catch","IconCircleCheck","requires_attachment","requires_value","IconCirclePlus","hasAddRole","RowEditAction","RowDeleteAction","hasDeleteRole","tableFilters","name","label","description","rowExpansion","cols","width","RowActions","allowMultiple","expandable","content","DataTable","slice","dataFormatter","enablePagination","attachment_detail","StockTrackingTable","navigate","useNavigate","renderDetails","deltas","entries","key","details","stockitem_detail","RenderStockItem","instance","link","item_detail","status","StatusRenderer","type","formatDecimal","added","removed","RenderPart","location_detail","RenderStockLocation","buildorder_detail","RenderBuildOrder","purchaseorder_detail","RenderPurchaseOrder","salesorder_detail","RenderSalesOrder","returnorder_detail","RenderReturnOrder","customer_detail","RenderCompany","Table","entry","filters","UserFilter","stock_tracking_list","item","enableDownload","StockDetail","useParams","enableExpiry","treeOpen","setTreeOpen","refreshInstance","instanceQuery","useInstance","endpoint","path_detail","serialNumbers","serialNumbersQuery","stock_serial_info","findBySerialNumber","useFindSerialNumberForm","detailsPanel","available_stock","Math","max","allocated","isFetching","tl","copy","IPN","status_custom_key","stocktake","tr","value_formatter","Space","previous","Button","IconArrowLeft","getDetailUrl","ActionButton","IconSearch","next","IconArrowRight","unit","units","batch","bl","model_field","supplierpart","supplier_part","stocklocation","model_filters","model_formatter","full_name","parent","build","consumed_by","purchaseorder","purchase_order","salesorder","sales_order","company","customer","br","expiry_date","purchase_price","formatCurrency","currency","purchase_price_currency","multiplier","packaging","ItemDetailsGrid","Grid","DetailsImage","part_list","image","thumbnail","base","sm","DetailsTable","showBuildAllocations","component","showSalesAllocations","salable","trackedBomItemQuery","bom_list","sub_part_trackable","limit","count","showInstalledItems","installed_items","stockPanels","IconHistory","IconBookmark","in_stock","Accordion","StylishText","BuildAllocatedStockTable","SalesOrderAllocationTable","IconChecklist","testable","IconBoxPadding","IconSitemap","child_items","StockItemTable","ancestor","AttachmentPanel","model_type","model_id","NotesPanel","breadcrumbs","location_path","l","editStockItemFields","useStockFields","create","modalId","editStockItem","duplicateStockItemFields","duplicateStockData","duplicate","serial_numbers","duplicateStockItem","follow","Array","isArray","n","notifications","show","values","preDeleteContent","deleteStockItem","preFormContent","stockOperationProps","items","refresh","stockAdjustActions","useStockAdjustActions","formProps","delete","assign","return","merge","serializeStockFields","useStockItemSerializeFields","trackable","serializeStockItem","stock_serialize","destination","orderPartsWizard","OrderPartsWizard","parts","scanIntoLocation","useBarcodeScanDialog","callback","barcode","stock_transfer","success","error","log","stockActions","serialized","AdminButton","LocateItemButton","BarcodeActionDropdown","barcode_hash","InvenTreeIcon","PrintingActions","ActionDropdown","IconPackages","menuActions","active","purchaseable","IconShoppingCart","openWizard","OptionsActionDropdown","DuplicateItemAction","EditItemAction","DeleteItemAction","stockBadges","available","isLoading","DetailsBadge","size","stale","expired","dialog","InstanceDetail","Stack","hasViewRole","stock_location","NavigationTree","stock_location_tree","PageDetail","hasChangePermission","PanelGroup","modals","wizard"],"mappings":"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"}
