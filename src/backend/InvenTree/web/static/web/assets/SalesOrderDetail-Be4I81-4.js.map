{"version":3,"file":"SalesOrderDetail-Be4I81-4.js","sources":["../../../../../../frontend/src/tables/sales/SalesOrderLineItemTable.tsx","../../../../../../frontend/src/tables/sales/SalesOrderShipmentTable.tsx","../../../../../../frontend/src/pages/sales/SalesOrderDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, Paper, Text } from '@mantine/core';\nimport {\n  IconArrowRight,\n  IconHash,\n  IconShoppingCart,\n  IconSquareArrowRight,\n  IconTools\n} from '@tabler/icons-react';\nimport type { DataTableRowExpansionProps } from 'mantine-datatable';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowDuplicateAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { RenderPart } from '../../components/render/Part';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport { formatCurrency } from '../../defaults/formatters';\nimport { useBuildOrderFields } from '../../forms/BuildForms';\nimport {\n  useAllocateToSalesOrderForm,\n  useSalesOrderAllocateSerialsFields,\n  useSalesOrderLineItemFields\n} from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  DateColumn,\n  DecimalColumn,\n  DescriptionColumn,\n  LinkColumn,\n  PartColumn\n} from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\nimport { TableHoverCard } from '../TableHoverCard';\nimport SalesOrderAllocationTable from './SalesOrderAllocationTable';\n\nexport default function SalesOrderLineItemTable({\n  orderId,\n  orderDetailRefresh,\n  currency,\n  customerId,\n  editable\n}: Readonly<{\n  orderId: number;\n  orderDetailRefresh: () => void;\n  currency: string;\n  customerId: number;\n  editable: boolean;\n}>) {\n  const navigate = useNavigate();\n  const user = useUserState();\n  const table = useTable('sales-order-line-item');\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'part',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          return (\n            <Group wrap='nowrap'>\n              <RowExpansionIcon\n                enabled={record.allocated}\n                expanded={table.isRowExpanded(record.pk)}\n              />\n              <PartColumn part={record.part_detail} />\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'part_detail.IPN',\n        title: t`IPN`,\n        switchable: true\n      },\n      DescriptionColumn({\n        accessor: 'part_detail.description'\n      }),\n      {\n        accessor: 'reference',\n        sortable: false,\n        switchable: true\n      },\n      DecimalColumn({\n        accessor: 'quantity',\n        sortable: true\n      }),\n      {\n        accessor: 'sale_price',\n        render: (record: any) =>\n          formatCurrency(record.sale_price, {\n            currency: record.sale_price_currency\n          })\n      },\n      {\n        accessor: 'total_price',\n        title: t`Total Price`,\n        render: (record: any) =>\n          formatCurrency(record.sale_price, {\n            currency: record.sale_price_currency,\n            multiplier: record.quantity\n          })\n      },\n      DateColumn({\n        accessor: 'target_date',\n        sortable: true,\n        title: t`Target Date`\n      }),\n      {\n        accessor: 'stock',\n        title: t`Available Stock`,\n        render: (record: any) => {\n          const part_stock = record?.available_stock ?? 0;\n          const variant_stock = record?.available_variant_stock ?? 0;\n          const available = part_stock + variant_stock;\n\n          const required = Math.max(\n            record.quantity - record.allocated - record.shipped,\n            0\n          );\n\n          let color: string | undefined = undefined;\n          let text = `${available}`;\n\n          const extra: ReactNode[] = [];\n\n          if (available <= 0) {\n            color = 'red';\n            text = t`No stock available`;\n          } else if (available < required) {\n            color = 'orange';\n          }\n\n          if (variant_stock > 0) {\n            extra.push(<Text size='sm'>{t`Includes variant stock`}</Text>);\n          }\n\n          if (record.building > 0) {\n            extra.push(\n              <Text size='sm'>\n                {t`In production`}: {record.building}\n              </Text>\n            );\n          }\n\n          if (record.on_order > 0) {\n            extra.push(\n              <Text size='sm'>\n                {t`On order`}: {record.on_order}\n              </Text>\n            );\n          }\n\n          return (\n            <TableHoverCard\n              value={<Text c={color}>{text}</Text>}\n              extra={extra}\n              title={t`Stock Information`}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'allocated',\n        sortable: true,\n        render: (record: any) => (\n          <ProgressBar\n            progressLabel={true}\n            value={record.allocated}\n            maximum={record.quantity}\n          />\n        )\n      },\n      {\n        accessor: 'shipped',\n        sortable: true,\n        render: (record: any) => (\n          <ProgressBar\n            progressLabel={true}\n            value={record.shipped}\n            maximum={record.quantity}\n          />\n        )\n      },\n      {\n        accessor: 'notes'\n      },\n      LinkColumn({\n        accessor: 'link'\n      })\n    ];\n  }, [table.isRowExpanded]);\n\n  const [selectedLineId, setSelectedLineId] = useState<number>(0);\n\n  const [selectedSupplierPart, setSelectedSupplierPart] = useState<any>(null);\n\n  const [initialData, setInitialData] = useState({});\n\n  const createLineFields = useSalesOrderLineItemFields({\n    orderId: orderId,\n    customerId: customerId,\n    create: true\n  });\n\n  const newLine = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    title: t`Add Line Item`,\n    fields: createLineFields,\n    initialData: {\n      ...initialData,\n      sale_price_currency: currency\n    },\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const editLineFields = useSalesOrderLineItemFields({\n    orderId: orderId,\n    customerId: customerId,\n    create: false\n  });\n\n  const editLine = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    pk: selectedLineId,\n    title: t`Edit Line Item`,\n    fields: editLineFields,\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const deleteLine = useDeleteApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    pk: selectedLineId,\n    title: t`Delete Line Item`,\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const allocateSerialFields = useSalesOrderAllocateSerialsFields({\n    itemId: selectedLineId,\n    orderId: orderId\n  });\n\n  const allocateBySerials = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_allocate_serials,\n    pk: orderId,\n    title: t`Allocate Serial Numbers`,\n    preFormContent: selectedSupplierPart ? (\n      <Paper withBorder p='sm'>\n        <RenderPart instance={selectedSupplierPart} />\n      </Paper>\n    ) : undefined,\n    initialData: initialData,\n    fields: allocateSerialFields,\n    table: table\n  });\n\n  const buildOrderFields = useBuildOrderFields({\n    create: true,\n    modalId: 'build-order-create-from-sales-order'\n  });\n\n  const newBuildOrder = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Create Build Order`,\n    modalId: 'build-order-create-from-sales-order',\n    fields: buildOrderFields,\n    initialData: initialData,\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const [selectedItems, setSelectedItems] = useState<any[]>([]);\n\n  const allocateStock = useAllocateToSalesOrderForm({\n    orderId: orderId,\n    lineItems: selectedItems,\n    onFormSuccess: () => {\n      table.refreshTable();\n      table.clearSelectedRecords();\n    }\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'allocated',\n        label: t`Allocated`,\n        description: t`Show lines which are fully allocated`\n      },\n      {\n        name: 'completed',\n        label: t`Completed`,\n        description: t`Show lines which are completed`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-line-item'\n        tooltip={t`Add Line Item`}\n        onClick={() => {\n          setInitialData({\n            order: orderId\n          });\n          newLine.open();\n        }}\n        hidden={!editable || !user.hasAddRole(UserRoles.sales_order)}\n      />,\n      <ActionButton\n        key='order-parts'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        disabled={!table.hasSelectedRecords}\n        tooltip={t`Order Parts`}\n        icon={<IconShoppingCart />}\n        color='blue'\n        onClick={() => {\n          setPartsToOrder(table.selectedRecords.map((r) => r.part_detail));\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <ActionButton\n        key='allocate-stock'\n        tooltip={t`Allocate Stock`}\n        icon={<IconArrowRight />}\n        disabled={!table.hasSelectedRecords}\n        color='green'\n        onClick={() => {\n          setSelectedItems(\n            table.selectedRecords.filter((r) => r.allocated < r.quantity)\n          );\n          allocateStock.open();\n        }}\n      />\n    ];\n  }, [user, orderId, table.hasSelectedRecords, table.selectedRecords]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const allocated = (record?.allocated ?? 0) > (record?.quantity ?? 0);\n\n      return [\n        RowViewAction({\n          title: t`View Part`,\n          modelType: ModelType.part,\n          modelId: record.part,\n          navigate: navigate,\n          hidden: !user.hasViewRole(UserRoles.part)\n        }),\n        {\n          hidden:\n            allocated ||\n            !editable ||\n            !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Allocate Stock`,\n          icon: <IconSquareArrowRight />,\n          color: 'green',\n          onClick: () => {\n            setSelectedItems([record]);\n            allocateStock.open();\n          }\n        },\n        {\n          hidden:\n            !record?.part_detail?.trackable ||\n            allocated ||\n            !editable ||\n            !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Allocate serials`,\n          icon: <IconHash />,\n          color: 'green',\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            setSelectedSupplierPart(record?.part_detail ?? null);\n            setInitialData({\n              quantity: record.quantity - record.allocated\n            });\n            allocateBySerials.open();\n          }\n        },\n        {\n          hidden:\n            allocated ||\n            !user.hasAddRole(UserRoles.build) ||\n            !record?.part_detail?.assembly,\n          title: t`Build stock`,\n          icon: <IconTools />,\n          color: 'blue',\n          onClick: () => {\n            setInitialData({\n              part: record.part,\n              quantity: (record?.quantity ?? 1) - (record?.allocated ?? 0),\n              sales_order: orderId\n            });\n            newBuildOrder.open();\n          }\n        },\n        {\n          hidden:\n            allocated ||\n            !user.hasAddRole(UserRoles.purchase_order) ||\n            !record?.part_detail?.purchaseable,\n          title: t`Order stock`,\n          icon: <IconShoppingCart />,\n          color: 'blue',\n          onClick: () => {\n            setPartsToOrder([record.part_detail]);\n            orderPartsWizard.openWizard();\n          }\n        },\n        RowEditAction({\n          hidden: !editable || !user.hasChangeRole(UserRoles.sales_order),\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            editLine.open();\n          }\n        }),\n        RowDuplicateAction({\n          hidden: !editable || !user.hasAddRole(UserRoles.sales_order),\n          onClick: () => {\n            setInitialData(record);\n            newLine.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !editable || !user.hasDeleteRole(UserRoles.sales_order),\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            deleteLine.open();\n          }\n        })\n      ];\n    },\n    [navigate, user, editable]\n  );\n\n  // Control row expansion\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        return table.isRowExpanded(record.pk) || record.allocated > 0;\n      },\n      content: ({ record }: { record: any }) => {\n        return (\n          <SalesOrderAllocationTable\n            showOrderInfo={false}\n            showPartInfo={false}\n            orderId={orderId}\n            lineItemId={record.pk}\n            partId={record.part}\n            allowEdit={true}\n            modelTarget={ModelType.stockitem}\n            modelField={'item'}\n            isSubTable\n          />\n        );\n      }\n    };\n  }, [orderId, table.isRowExpanded]);\n\n  return (\n    <>\n      {editLine.modal}\n      {deleteLine.modal}\n      {newLine.modal}\n      {newBuildOrder.modal}\n      {allocateBySerials.modal}\n      {allocateStock.modal}\n      {orderPartsWizard.wizard}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_line_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableSelection: true,\n          enableDownload: true,\n          params: {\n            order: orderId,\n            part_detail: true\n          },\n          rowActions: rowActions,\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowExpansion: rowExpansion\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { IconTruckDelivery } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowCancelAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport dayjs from 'dayjs';\nimport {\n  useSalesOrderShipmentCompleteFields,\n  useSalesOrderShipmentFields\n} from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn, LinkColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function SalesOrderShipmentTable({\n  orderId\n}: Readonly<{\n  orderId: number;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n  const table = useTable('sales-order-shipment');\n\n  const [selectedShipment, setSelectedShipment] = useState<any>({});\n\n  const newShipmentFields = useSalesOrderShipmentFields({});\n\n  const editShipmentFields = useSalesOrderShipmentFields({});\n\n  const completeShipmentFields = useSalesOrderShipmentCompleteFields({});\n\n  const newShipment = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    fields: newShipmentFields,\n    title: t`Create Shipment`,\n    table: table,\n    initialData: {\n      order: orderId\n    }\n  });\n\n  const deleteShipment = useDeleteApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    pk: selectedShipment.pk,\n    title: t`Cancel Shipment`,\n    table: table\n  });\n\n  const editShipment = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    pk: selectedShipment.pk,\n    fields: editShipmentFields,\n    title: t`Edit Shipment`,\n    table: table\n  });\n\n  const completeShipment = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_complete,\n    pk: selectedShipment.pk,\n    fields: completeShipmentFields,\n    title: t`Complete Shipment`,\n    table: table,\n    focus: 'tracking_number',\n    initialData: {\n      ...selectedShipment,\n      shipment_date: dayjs().format('YYYY-MM-DD')\n    }\n  });\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'reference',\n        title: t`Shipment Reference`,\n        switchable: false,\n        sortable: true\n      },\n      {\n        accessor: 'allocated_items',\n        sortable: true,\n        switchable: false,\n        title: t`Items`\n      },\n      {\n        accessor: 'shipped',\n        title: t`Shipped`,\n        switchable: true,\n        sortable: false,\n        render: (record: any) => <YesNoButton value={!!record.shipment_date} />\n      },\n      DateColumn({\n        accessor: 'shipment_date',\n        title: t`Shipment Date`\n      }),\n      DateColumn({\n        accessor: 'delivery_date',\n        title: t`Delivery Date`\n      }),\n      {\n        accessor: 'tracking_number'\n      },\n      {\n        accessor: 'invoice_number'\n      },\n      LinkColumn({\n        accessor: 'link'\n      })\n    ];\n  }, []);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const shipped: boolean = !!record.shipment_date;\n\n      return [\n        RowViewAction({\n          title: t`View Shipment`,\n          modelType: ModelType.salesordershipment,\n          modelId: record.pk,\n          navigate: navigate\n        }),\n        {\n          hidden: shipped || !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Complete Shipment`,\n          color: 'green',\n          icon: <IconTruckDelivery />,\n          onClick: () => {\n            setSelectedShipment(record);\n            completeShipment.open();\n          }\n        },\n        RowEditAction({\n          hidden: !user.hasChangeRole(UserRoles.sales_order),\n          tooltip: t`Edit shipment`,\n          onClick: () => {\n            setSelectedShipment(record);\n            editShipment.open();\n          }\n        }),\n        RowCancelAction({\n          hidden: shipped || !user.hasDeleteRole(UserRoles.sales_order),\n          tooltip: t`Cancel shipment`,\n          onClick: () => {\n            setSelectedShipment(record);\n            deleteShipment.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-shipment'\n        tooltip={t`Add shipment`}\n        hidden={!user.hasAddRole(UserRoles.sales_order)}\n        onClick={() => {\n          newShipment.open();\n        }}\n      />\n    ];\n  }, [user]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'shipped',\n        label: t`Shipped`,\n        description: t`Show shipments which have been shipped`\n      },\n      {\n        name: 'delivered',\n        label: t`Delivered`,\n        description: t`Show shipments which have been delivered`\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      {newShipment.modal}\n      {editShipment.modal}\n      {deleteShipment.modal}\n      {completeShipment.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_shipment_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          modelType: ModelType.salesordershipment,\n          enableSelection: true,\n          enableReports: true,\n          rowActions: rowActions,\n          params: {\n            order: orderId\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Accordion, Grid, Skeleton, Stack } from '@mantine/core';\nimport {\n  IconBookmark,\n  IconInfoCircle,\n  IconList,\n  IconTools,\n  IconTruckDelivery\n} from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport PrimaryActionButton from '../../components/buttons/PrimaryActionButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  BarcodeActionDropdown,\n  CancelItemAction,\n  DuplicateItemAction,\n  EditItemAction,\n  HoldItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { StylishText } from '../../components/items/StylishText';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport { formatCurrency } from '../../defaults/formatters';\nimport { useSalesOrderFields } from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport { BuildOrderTable } from '../../tables/build/BuildOrderTable';\nimport ExtraLineItemTable from '../../tables/general/ExtraLineItemTable';\nimport SalesOrderAllocationTable from '../../tables/sales/SalesOrderAllocationTable';\nimport SalesOrderLineItemTable from '../../tables/sales/SalesOrderLineItemTable';\nimport SalesOrderShipmentTable from '../../tables/sales/SalesOrderShipmentTable';\n\n/**\n * Detail page for a single SalesOrder\n */\nexport default function SalesOrderDetail() {\n  const { id } = useParams();\n\n  const user = useUserState();\n\n  const globalSettings = useGlobalSettingsState();\n\n  const {\n    instance: order,\n    instanceQuery,\n    refreshInstance\n  } = useInstance({\n    endpoint: ApiEndpoints.sales_order_list,\n    pk: id,\n    params: {\n      customer_detail: true\n    }\n  });\n\n  const orderCurrency = useMemo(() => {\n    return (\n      order.order_currency ||\n      order.customer_detail?.currency ||\n      globalSettings.getSetting('INVENTREE_DEFAULT_CURRENCY')\n    );\n  }, [order, globalSettings]);\n\n  const detailsPanel = useMemo(() => {\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const tl: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'reference',\n        label: t`Reference`,\n        copy: true\n      },\n      {\n        type: 'text',\n        name: 'customer_reference',\n        label: t`Customer Reference`,\n        copy: true,\n        icon: 'reference',\n        hidden: !order.customer_reference\n      },\n      {\n        type: 'link',\n        name: 'customer',\n        icon: 'customers',\n        label: t`Customer`,\n        model: ModelType.company\n      },\n      {\n        type: 'text',\n        name: 'description',\n        label: t`Description`,\n        copy: true\n      },\n      {\n        type: 'status',\n        name: 'status',\n        label: t`Status`,\n        model: ModelType.salesorder\n      },\n      {\n        type: 'status',\n        name: 'status_custom_key',\n        label: t`Custom Status`,\n        model: ModelType.salesorder,\n        icon: 'status',\n        hidden:\n          !order.status_custom_key || order.status_custom_key == order.status\n      }\n    ];\n\n    const tr: DetailsField[] = [\n      {\n        type: 'progressbar',\n        name: 'completed',\n        icon: 'progress',\n        label: t`Completed Line Items`,\n        total: order.line_items,\n        progress: order.completed_lines,\n        hidden: !order.line_items\n      },\n      {\n        type: 'progressbar',\n        name: 'shipments',\n        icon: 'shipment',\n        label: t`Completed Shipments`,\n        total: order.shipments_count,\n        progress: order.completed_shipments_count,\n        hidden: !order.shipments_count\n      },\n      {\n        type: 'text',\n        name: 'currency',\n        label: t`Order Currency`,\n        value_formatter: () => orderCurrency\n      },\n      {\n        type: 'text',\n        name: 'total_price',\n        label: t`Total Cost`,\n        value_formatter: () => {\n          return formatCurrency(order?.total_price, {\n            currency: orderCurrency\n          });\n        }\n      }\n    ];\n\n    const bl: DetailsField[] = [\n      {\n        type: 'link',\n        external: true,\n        name: 'link',\n        label: t`Link`,\n        copy: true,\n        hidden: !order.link\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.name',\n        label: t`Contact`,\n        icon: 'user',\n        copy: true,\n        hidden: !order.contact\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.email',\n        label: t`Contact Email`,\n        icon: 'email',\n        copy: true,\n        hidden: !order.contact_detail?.email\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.phone',\n        label: t`Contact Phone`,\n        icon: 'phone',\n        copy: true,\n        hidden: !order.contact_detail?.phone\n      },\n      {\n        type: 'text',\n        name: 'project_code_label',\n        label: t`Project Code`,\n        icon: 'reference',\n        copy: true,\n        hidden: !order.project_code\n      },\n      {\n        type: 'text',\n        name: 'responsible',\n        label: t`Responsible`,\n        badge: 'owner',\n        hidden: !order.responsible\n      }\n    ];\n\n    const br: DetailsField[] = [\n      {\n        type: 'date',\n        name: 'creation_date',\n        label: t`Creation Date`,\n        copy: true,\n        hidden: !order.creation_date\n      },\n      {\n        type: 'date',\n        name: 'issue_date',\n        label: t`Issue Date`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !order.issue_date\n      },\n      {\n        type: 'date',\n        name: 'start_date',\n        label: t`Start Date`,\n        icon: 'calendar',\n        hidden: !order.start_date,\n        copy: true\n      },\n      {\n        type: 'date',\n        name: 'target_date',\n        label: t`Target Date`,\n        hidden: !order.target_date,\n        copy: true\n      },\n      {\n        type: 'date',\n        name: 'shipment_date',\n        label: t`Completion Date`,\n        hidden: !order.shipment_date,\n        copy: true\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.purchase_order}\n            apiPath={ApiEndpoints.company_list}\n            src={order.customer_detail?.image}\n            pk={order.customer}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable fields={tl} item={order} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable fields={tr} item={order} />\n        <DetailsTable fields={bl} item={order} />\n        <DetailsTable fields={br} item={order} />\n      </ItemDetailsGrid>\n    );\n  }, [order, orderCurrency, instanceQuery]);\n\n  const soStatus = useStatusCodes({ modelType: ModelType.salesorder });\n\n  const salesOrderFields = useSalesOrderFields({});\n\n  const editSalesOrder = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_list,\n    pk: order.pk,\n    title: t`Edit Sales Order`,\n    fields: salesOrderFields,\n    onFormSuccess: () => {\n      refreshInstance();\n    }\n  });\n\n  const duplicateOrderFields = useSalesOrderFields({\n    duplicateOrderId: order.pk\n  });\n\n  const duplicateSalesOrderInitialData = useMemo(() => {\n    const data = { ...order };\n    // if we set the reference to null/undefined, it will be left blank in the form\n    // if we omit the reference altogether, it will be auto-generated via reference pattern\n    // from the OPTIONS response\n    delete data.reference;\n    return data;\n  }, [order]);\n\n  const duplicateSalesOrder = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_list,\n    title: t`Add Sales Order`,\n    fields: duplicateOrderFields,\n    initialData: duplicateSalesOrderInitialData,\n    follow: true,\n    modelType: ModelType.salesorder\n  });\n\n  const orderPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'detail',\n        label: t`Order Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'line-items',\n        label: t`Line Items`,\n        icon: <IconList />,\n        content: (\n          <Accordion\n            multiple={true}\n            defaultValue={['line-items', 'extra-items']}\n          >\n            <Accordion.Item value='line-items' key='lineitems'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Line Items`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <SalesOrderLineItemTable\n                  orderId={order.pk}\n                  orderDetailRefresh={refreshInstance}\n                  currency={orderCurrency}\n                  customerId={order.customer}\n                  editable={\n                    order.status != soStatus.COMPLETE &&\n                    order.status != soStatus.CANCELLED\n                  }\n                />\n              </Accordion.Panel>\n            </Accordion.Item>\n            <Accordion.Item value='extra-items' key='extraitems'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Extra Line Items`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <ExtraLineItemTable\n                  endpoint={ApiEndpoints.sales_order_extra_line_list}\n                  orderId={order.pk}\n                  orderDetailRefresh={refreshInstance}\n                  currency={orderCurrency}\n                  role={UserRoles.sales_order}\n                />\n              </Accordion.Panel>\n            </Accordion.Item>\n          </Accordion>\n        )\n      },\n      {\n        name: 'shipments',\n        label: t`Shipments`,\n        icon: <IconTruckDelivery />,\n        content: <SalesOrderShipmentTable orderId={order.pk} />\n      },\n      {\n        name: 'allocations',\n        label: t`Allocated Stock`,\n        icon: <IconBookmark />,\n        content: (\n          <SalesOrderAllocationTable\n            orderId={order.pk}\n            showPartInfo\n            allowEdit\n            modelField='item'\n            modelTarget={ModelType.stockitem}\n          />\n        )\n      },\n      {\n        name: 'build-orders',\n        label: t`Build Orders`,\n        icon: <IconTools />,\n        hidden: !user.hasViewRole(UserRoles.build),\n        content: order?.pk ? (\n          <BuildOrderTable salesOrderId={order.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      AttachmentPanel({\n        model_type: ModelType.salesorder,\n        model_id: order.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.salesorder,\n        model_id: order.pk\n      })\n    ];\n  }, [order, id, user, soStatus, user]);\n\n  const issueOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_issue, order.pk),\n    title: t`Issue Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Issue this order`,\n    successMessage: t`Order issued`\n  });\n\n  const cancelOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_cancel, order.pk),\n    title: t`Cancel Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Cancel this order`,\n    successMessage: t`Order cancelled`\n  });\n\n  const holdOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_hold, order.pk),\n    title: t`Hold Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Place this order on hold`,\n    successMessage: t`Order placed on hold`\n  });\n\n  const shipOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_complete, order.pk),\n    title: t`Ship Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Ship this order?`,\n    successMessage: t`Order shipped`,\n    fields: {\n      accept_incomplete: {}\n    }\n  });\n\n  const completeOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_complete, order.pk),\n    title: t`Complete Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Mark this order as complete`,\n    successMessage: t`Order completed`,\n    fields: {\n      accept_incomplete: {}\n    }\n  });\n\n  const soActions = useMemo(() => {\n    const canEdit: boolean = user.hasChangeRole(UserRoles.sales_order);\n\n    const canIssue: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING || order.status == soStatus.ON_HOLD);\n\n    const canCancel: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING ||\n        order.status == soStatus.ON_HOLD ||\n        order.status == soStatus.IN_PROGRESS);\n\n    const canHold: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING ||\n        order.status == soStatus.IN_PROGRESS);\n\n    const autoComplete = globalSettings.isSet('SALESORDER_SHIP_COMPLETE');\n\n    const canShip: boolean =\n      !autoComplete && canEdit && order.status == soStatus.IN_PROGRESS;\n    const canComplete: boolean =\n      canEdit &&\n      (order.status == soStatus.SHIPPED ||\n        (autoComplete && order.status == soStatus.IN_PROGRESS));\n\n    return [\n      <PrimaryActionButton\n        title={t`Issue Order`}\n        icon='issue'\n        hidden={!canIssue}\n        color='blue'\n        onClick={issueOrder.open}\n      />,\n      <PrimaryActionButton\n        title={t`Ship Order`}\n        icon='deliver'\n        hidden={!canShip}\n        color='blue'\n        onClick={shipOrder.open}\n      />,\n      <PrimaryActionButton\n        title={t`Complete Order`}\n        icon='complete'\n        hidden={!canComplete}\n        color='green'\n        onClick={completeOrder.open}\n      />,\n      <AdminButton model={ModelType.salesorder} id={order.pk} />,\n      <BarcodeActionDropdown\n        model={ModelType.salesorder}\n        pk={order.pk}\n        hash={order?.barcode_hash}\n      />,\n      <PrintingActions\n        modelType={ModelType.salesorder}\n        items={[order.pk]}\n        enableReports\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Order Actions`}\n        actions={[\n          EditItemAction({\n            hidden: !canEdit,\n            onClick: editSalesOrder.open,\n            tooltip: t`Edit order`\n          }),\n          DuplicateItemAction({\n            hidden: !user.hasAddRole(UserRoles.sales_order),\n            onClick: duplicateSalesOrder.open,\n            tooltip: t`Duplicate order`\n          }),\n          HoldItemAction({\n            tooltip: t`Hold order`,\n            hidden: !canHold,\n            onClick: holdOrder.open\n          }),\n          CancelItemAction({\n            tooltip: t`Cancel order`,\n            hidden: !canCancel,\n            onClick: cancelOrder.open\n          })\n        ]}\n      />\n    ];\n  }, [user, order, soStatus, globalSettings]);\n\n  const orderBadges: ReactNode[] = useMemo(() => {\n    return instanceQuery.isLoading\n      ? []\n      : [\n          <StatusRenderer\n            status={order.status_custom_key}\n            type={ModelType.salesorder}\n            options={{ size: 'lg' }}\n            key={order.pk}\n          />\n        ];\n  }, [order, instanceQuery]);\n\n  const subtitle: string = useMemo(() => {\n    let t = order.customer_detail?.name || '';\n\n    if (order.customer_reference) {\n      t += ` (${order.customer_reference})`;\n    }\n\n    return t;\n  }, [order]);\n\n  return (\n    <>\n      {issueOrder.modal}\n      {cancelOrder.modal}\n      {holdOrder.modal}\n      {shipOrder.modal}\n      {completeOrder.modal}\n      {editSalesOrder.modal}\n      {duplicateSalesOrder.modal}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredRole={UserRoles.sales_order}\n      >\n        <Stack gap='xs'>\n          <PageDetail\n            title={`${t`Sales Order`}: ${order.reference}`}\n            subtitle={subtitle}\n            imageUrl={order.customer_detail?.image}\n            badges={orderBadges}\n            actions={soActions}\n            breadcrumbs={[{ name: t`Sales`, url: '/sales/' }]}\n            lastCrumb={[\n              { name: order.reference, url: `/sales/sales-order/${order.pk}` }\n            ]}\n            editAction={editSalesOrder.open}\n            editEnabled={user.hasChangePermission(ModelType.salesorder)}\n          />\n          <PanelGroup\n            pageKey='salesorder'\n            panels={orderPanels}\n            model={ModelType.salesorder}\n            reloadInstance={refreshInstance}\n            instance={order}\n            id={order.pk}\n          />\n        </Stack>\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["SalesOrderLineItemTable","orderId","orderDetailRefresh","currency","customerId","editable","navigate","useNavigate","user","useUserState","table","useTable","tableColumns","useMemo","accessor","sortable","switchable","render","record","jsxs","Group","jsx","RowExpansionIcon","allocated","isRowExpanded","pk","PartColumn","part_detail","title","_i18n","_","id","DescriptionColumn","DecimalColumn","formatCurrency","sale_price","sale_price_currency","multiplier","quantity","DateColumn","part_stock","available_stock","variant_stock","available_variant_stock","available","required","Math","max","shipped","color","text","extra","push","Text","building","on_order","TableHoverCard","ProgressBar","LinkColumn","selectedLineId","setSelectedLineId","useState","selectedSupplierPart","setSelectedSupplierPart","initialData","setInitialData","createLineFields","useSalesOrderLineItemFields","create","newLine","useCreateApiFormModal","url","ApiEndpoints","sales_order_line_list","fields","onFormSuccess","editLineFields","editLine","useEditApiFormModal","deleteLine","useDeleteApiFormModal","allocateSerialFields","useSalesOrderAllocateSerialsFields","itemId","allocateBySerials","sales_order_allocate_serials","preFormContent","Paper","RenderPart","undefined","buildOrderFields","useBuildOrderFields","modalId","newBuildOrder","build_order_list","follow","modelType","ModelType","build","selectedItems","setSelectedItems","allocateStock","useAllocateToSalesOrderForm","lineItems","refreshTable","clearSelectedRecords","partsToOrder","setPartsToOrder","orderPartsWizard","OrderPartsWizard","parts","tableFilters","name","label","description","tableActions","AddItemButton","order","open","hasAddRole","UserRoles","sales_order","ActionButton","purchase_order","hasSelectedRecords","IconShoppingCart","selectedRecords","map","r","openWizard","IconArrowRight","filter","rowActions","useCallback","RowViewAction","part","modelId","hidden","hasViewRole","hasChangeRole","icon","IconSquareArrowRight","onClick","trackable","IconHash","assembly","IconTools","purchaseable","RowEditAction","RowDuplicateAction","RowDeleteAction","hasDeleteRole","rowExpansion","allowMultiple","expandable","content","SalesOrderAllocationTable","stockitem","modal","wizard","InvenTreeTable","apiUrl","enableSelection","enableDownload","params","SalesOrderShipmentTable","selectedShipment","setSelectedShipment","newShipmentFields","useSalesOrderShipmentFields","editShipmentFields","completeShipmentFields","useSalesOrderShipmentCompleteFields","newShipment","sales_order_shipment_list","deleteShipment","editShipment","completeShipment","sales_order_shipment_complete","focus","shipment_date","dayjs","format","YesNoButton","salesordershipment","IconTruckDelivery","tooltip","RowCancelAction","enableReports","SalesOrderDetail","useParams","globalSettings","useGlobalSettingsState","instance","instanceQuery","refreshInstance","useInstance","endpoint","sales_order_list","customer_detail","orderCurrency","order_currency","getSetting","detailsPanel","isFetching","Skeleton","tl","type","copy","customer_reference","model","company","salesorder","status_custom_key","status","tr","total","line_items","progress","completed_lines","shipments_count","completed_shipments_count","value_formatter","total_price","bl","external","link","contact","contact_detail","email","phone","project_code","badge","responsible","br","creation_date","issue_date","start_date","target_date","ItemDetailsGrid","Grid","DetailsImage","company_list","image","customer","base","sm","DetailsTable","soStatus","useStatusCodes","salesOrderFields","useSalesOrderFields","editSalesOrder","duplicateOrderFields","duplicateOrderId","duplicateSalesOrderInitialData","data","reference","duplicateSalesOrder","orderPanels","IconInfoCircle","IconList","Accordion","StylishText","COMPLETE","CANCELLED","ExtraLineItemTable","sales_order_extra_line_list","IconBookmark","BuildOrderTable","AttachmentPanel","model_type","model_id","NotesPanel","issueOrder","sales_order_issue","preFormWarning","successMessage","cancelOrder","sales_order_cancel","holdOrder","sales_order_hold","shipOrder","sales_order_complete","accept_incomplete","completeOrder","soActions","canEdit","canIssue","PENDING","ON_HOLD","canCancel","IN_PROGRESS","canHold","autoComplete","isSet","canShip","canComplete","SHIPPED","PrimaryActionButton","AdminButton","BarcodeActionDropdown","barcode_hash","PrintingActions","OptionsActionDropdown","EditItemAction","DuplicateItemAction","HoldItemAction","CancelItemAction","orderBadges","isLoading","StatusRenderer","size","subtitle","t","InstanceDetail","Stack","PageDetail","hasChangePermission","PanelGroup"],"mappings":"0uEAyDA,SAAwBA,GAAwB,CAC9CC,QAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,SAAAA,CAOD,EAAG,CACF,MAAMC,EAAWC,GAAY,EACvBC,EAAOC,EAAa,EACpBC,EAAQC,GAAS,uBAAuB,EAExCC,EAA8BC,EAAAA,QAAQ,IACnC,CACL,CACEC,SAAU,OACVC,SAAU,GACVC,WAAY,GACZC,OAASC,GAELC,EAAA,KAACC,GAAM,CAAA,KAAK,SACV,SAAA,CAACC,EAAAA,IAAAC,GAAA,CACC,QAASJ,EAAOK,UAChB,SAAUb,EAAMc,cAAcN,EAAOO,EAAE,CAAE,CAAA,EAE1CJ,EAAAA,IAAAK,GAAA,CAAW,KAAMR,EAAOS,WAAY,CAAA,CAAA,EACvC,CAEJ,EAEF,CACEb,SAAU,kBACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAM,EACbf,WAAY,IAEdgB,GAAkB,CAChBlB,SAAU,yBAAA,CACX,EACD,CACEA,SAAU,YACVC,SAAU,GACVC,WAAY,IAEdiB,GAAc,CACZnB,SAAU,WACVC,SAAU,EAAA,CACX,EACD,CACED,SAAU,aACVG,OAASC,GACPgB,EAAehB,EAAOiB,WAAY,CAChChC,SAAUe,EAAOkB,mBAClB,CAAA,CAAA,EAEL,CACEtB,SAAU,cACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBd,OAASC,GACPgB,EAAehB,EAAOiB,WAAY,CAChChC,SAAUe,EAAOkB,oBACjBC,WAAYnB,EAAOoB,QACpB,CAAA,GAELC,EAAW,CACTzB,SAAU,cACVC,SAAU,GACVa,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,CAAC,CACtB,EACD,CACEjB,SAAU,QACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzBd,OAASC,GAAgB,CACjBsB,MAAAA,GAAatB,GAAAA,YAAAA,EAAQuB,kBAAmB,EACxCC,GAAgBxB,GAAAA,YAAAA,EAAQyB,0BAA2B,EACnDC,EAAYJ,EAAaE,EAEzBG,EAAWC,KAAKC,IACpB7B,EAAOoB,SAAWpB,EAAOK,UAAYL,EAAO8B,QAC5C,CACF,EAEA,IAAIC,EACAC,GAAO,GAAGN,CAAS,GAEvB,MAAMO,EAAqB,CAAE,EAE7B,OAAIP,GAAa,GACPK,EAAA,MACRC,GAAIrB,EAAAC,EAAG,CAAAC,GAAA,QAAA,CAAqB,GACnBa,EAAYC,IACbI,EAAA,UAGNP,EAAgB,GAClBS,EAAMC,KAAK/B,EAAAA,IAACgC,EAAK,CAAA,KAAK,KAAKxB,SAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,GAA0B,CAAO,EAG3Db,EAAOoC,SAAW,GACpBH,EAAMC,KACJjC,OAACkC,EAAK,CAAA,KAAK,KACTxB,SAAAA,CAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,CAAgB,EAAC,KAAGb,EAAOoC,QAAAA,CAAAA,CAC9B,CACF,EAGEpC,EAAOqC,SAAW,GACpBJ,EAAMC,KACJjC,OAACkC,EAAK,CAAA,KAAK,KACTxB,SAAAA,CAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,CAAW,EAAC,KAAGb,EAAOqC,QAAAA,CAAAA,CACzB,CACF,EAIAlC,EAAAA,IAACmC,GACC,CAAA,MAAQnC,EAAA,IAAAgC,EAAA,CAAK,EAAGJ,EAAQC,SAAKA,EAAA,CAAA,EAC7B,MAAAC,EACA,MAAMtB,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAmB,EAC1B,CAAA,CAEN,EAEF,CACEjB,SAAU,YACVC,SAAU,GACVE,OAASC,GACPG,MAACoC,GACC,CAAA,cAAe,GACf,MAAOvC,EAAOK,UACd,QAASL,EAAOoB,QAAS,CAAA,CAAA,EAI/B,CACExB,SAAU,UACVC,SAAU,GACVE,OAASC,GACPG,MAACoC,GACC,CAAA,cAAe,GACf,MAAOvC,EAAO8B,QACd,QAAS9B,EAAOoB,QAAS,CAAA,CAAA,EAI/B,CACExB,SAAU,SAEZ4C,GAAW,CACT5C,SAAU,MAAA,CACX,CAAC,EAEH,CAACJ,EAAMc,aAAa,CAAC,EAElB,CAACmC,EAAgBC,CAAiB,EAAIC,EAAAA,SAAiB,CAAC,EAExD,CAACC,EAAsBC,CAAuB,EAAIF,EAAAA,SAAc,IAAI,EAEpE,CAACG,EAAaC,CAAc,EAAIJ,EAAAA,SAAS,CAAA,CAAE,EAE3CK,EAAmBC,GAA4B,CACnDlE,QAAAA,EACAG,WAAAA,EACAgE,OAAQ,EAAA,CACT,EAEKC,EAAUC,EAAsB,CACpCC,IAAKC,EAAaC,sBAClB7C,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB2C,OAAQR,EACRF,YAAa,CACX,GAAGA,EACH5B,oBAAqBjC,CACvB,EACAwE,cAAezE,EACfQ,MAAAA,CAAAA,CACD,EAEKkE,EAAiBT,GAA4B,CACjDlE,QAAAA,EACAG,WAAAA,EACAgE,OAAQ,EAAA,CACT,EAEKS,EAAWC,EAAoB,CACnCP,IAAKC,EAAaC,sBAClBhD,GAAIkC,EACJ/B,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB2C,OAAQE,EACRD,cAAezE,EACfQ,MAAAA,CAAAA,CACD,EAEKqE,EAAaC,GAAsB,CACvCT,IAAKC,EAAaC,sBAClBhD,GAAIkC,EACJ/B,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B4C,cAAezE,EACfQ,MAAAA,CAAAA,CACD,EAEKuE,EAAuBC,GAAmC,CAC9DC,OAAQxB,EACR1D,QAAAA,CAAAA,CACD,EAEKmF,EAAoBd,EAAsB,CAC9CC,IAAKC,EAAaa,6BAClB5D,GAAIxB,EACJ2B,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA0B,EACjCuD,eAAgBxB,EACbzC,MAAAkE,GAAA,CAAM,WAAU,GAAC,EAAE,KAClB,SAAClE,EAAAA,IAAAmE,GAAA,CAAW,SAAU1B,CAAqB,CAAA,CAC7C,CAAA,EACE2B,OACJzB,YAAAA,EACAU,OAAQO,EACRvE,MAAAA,CAAAA,CACD,EAEKgF,EAAmBC,GAAoB,CAC3CvB,OAAQ,GACRwB,QAAS,qCAAA,CACV,EAEKC,EAAgBvB,EAAsB,CAC1CC,IAAKC,EAAasB,iBAClBlE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqB,EAC5B6D,QAAS,sCACTlB,OAAQgB,EACR1B,YAAAA,EACA+B,OAAQ,GACRC,UAAWC,EAAUC,KAAAA,CACtB,EAEK,CAACC,EAAeC,CAAgB,EAAIvC,EAAAA,SAAgB,CAAA,CAAE,EAEtDwC,EAAgBC,GAA4B,CAChDrG,QAAAA,EACAsG,UAAWJ,EACXxB,cAAeA,IAAM,CACnBjE,EAAM8F,aAAa,EACnB9F,EAAM+F,qBAAqB,CAAA,CAC7B,CACD,EAEK,CAACC,EAAcC,CAAe,EAAI9C,EAAAA,SAAgB,CAAA,CAAE,EAEpD+C,EAAmBC,GAAiB,CACxCC,MAAOJ,CAAAA,CACR,EAEKK,EAA8BlG,EAAAA,QAAQ,IACnC,CACL,CACEmG,KAAM,YACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBmF,YAAWrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsC,CAAC,EAEtD,CACEiF,KAAM,YACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBmF,YAAWrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgC,CAAC,CAC/C,EAEF,EAAE,EAECoF,GAAetG,EAAAA,QAAQ,IACpB,CACLQ,EAAAA,IAAC+F,GAEC,CAAA,QAAQvF,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EACzB,QAAS,IAAM,CACEkC,EAAA,CACboD,MAAOpH,CAAAA,CACR,EACDoE,EAAQiD,KAAK,CACf,EACA,OAAQ,CAACjH,GAAY,CAACG,EAAK+G,WAAWC,EAAUC,WAAW,CARvD,EAAA,eAQyD,EAE/DpG,EAAA,IAACqG,IAEC,OAAQ,CAAClH,EAAK+G,WAAWC,EAAUG,cAAc,EACjD,SAAU,CAACjH,EAAMkH,mBACjB,QAAQ/F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACtB,KAAOV,EAAA,IAAAwG,GAAA,CAAA,CAAgB,EACvB,MAAM,OACN,QAAS,IAAM,CACblB,EAAgBjG,EAAMoH,gBAAgBC,IAAWC,GAAAA,EAAErG,WAAW,CAAC,EAC/DiF,EAAiBqB,WAAW,CAAA,GAR1B,aASF,EAEH5G,EAAA,IAAAqG,GAAA,CAEC,QAAQ7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CACT,EAAA,KAAOV,EAAAA,IAAA6G,GAAA,CAAiB,CAAA,EACxB,SAAU,CAACxH,EAAMkH,mBACjB,MAAM,QACN,QAAS,IAAM,CAEXlH,EAAAA,EAAMoH,gBAAgBK,OAAQH,GAAMA,EAAEzG,UAAYyG,EAAE1F,QAAQ,CAC9D,EACA+D,EAAciB,KAAK,CAAA,CACrB,EAVI,iBAWJ,EAEH,CAAC9G,EAAMP,EAASS,EAAMkH,mBAAoBlH,EAAMoH,eAAe,CAAC,EAE7DM,GAAaC,cAChBnH,GAA6B,WAC5B,MAAMK,IAAaL,GAAAA,YAAAA,EAAQK,YAAa,KAAML,GAAAA,YAAAA,EAAQoB,WAAY,GAElE,MAAO,CACLgG,GAAc,CACZ1G,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBiE,UAAWC,EAAUsC,KACrBC,QAAStH,EAAOqH,KAChBjI,SAAAA,EACAmI,OAAQ,CAACjI,EAAKkI,YAAYlB,EAAUe,IAAI,CAAA,CACzC,EACD,CACEE,OACElH,GACA,CAAClB,GACD,CAACG,EAAKmI,cAAcnB,EAAUC,WAAW,EAC3C7F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB6G,WAAOC,GAAuB,EAAA,EAC9B5F,MAAO,QACP6F,QAASA,IAAM,CACI1C,EAAA,CAAClF,CAAM,CAAC,EACzBmF,EAAciB,KAAK,CAAA,CACrB,EAEF,CACEmB,OACE,GAACvH,EAAAA,GAAAA,YAAAA,EAAQS,cAART,MAAAA,EAAqB6H,YACtBxH,GACA,CAAClB,GACD,CAACG,EAAKmI,cAAcnB,EAAUC,WAAW,EAC3C7F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B6G,WAAOI,GAAW,EAAA,EAClB/F,MAAO,QACP6F,QAASA,IAAM,CACblF,EAAkB1C,EAAOO,EAAE,EACHP,GAAAA,GAAAA,YAAAA,EAAQS,cAAe,IAAI,EACpCsC,EAAA,CACb3B,SAAUpB,EAAOoB,SAAWpB,EAAOK,SAAAA,CACpC,EACD6D,EAAkBkC,KAAK,CAAA,CACzB,EAEF,CACEmB,OACElH,GACA,CAACf,EAAK+G,WAAWC,EAAUtB,KAAK,GAChC,GAAChF,EAAAA,GAAAA,YAAAA,EAAQS,cAART,MAAAA,EAAqB+H,UACxBrH,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrB6G,WAAOM,GAAY,EAAA,EACnBjG,MAAO,OACP6F,QAASA,IAAM,CACE7E,EAAA,CACbsE,KAAMrH,EAAOqH,KACbjG,WAAWpB,GAAAA,YAAAA,EAAQoB,WAAY,KAAMpB,GAAAA,YAAAA,EAAQK,YAAa,GAC1DkG,YAAaxH,CAAAA,CACd,EACD4F,EAAcyB,KAAK,CAAA,CACrB,EAEF,CACEmB,OACElH,GACA,CAACf,EAAK+G,WAAWC,EAAUG,cAAc,GACzC,GAACzG,EAAAA,GAAAA,YAAAA,EAAQS,cAART,MAAAA,EAAqBiI,cACxBvH,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrB6G,WAAOf,GAAmB,EAAA,EAC1B5E,MAAO,OACP6F,QAASA,IAAM,CACGnC,EAAA,CAACzF,EAAOS,WAAW,CAAC,EACpCiF,EAAiBqB,WAAW,CAAA,GAGhCmB,GAAc,CACZX,OAAQ,CAACpI,GAAY,CAACG,EAAKmI,cAAcnB,EAAUC,WAAW,EAC9DqB,QAASA,IAAM,CACblF,EAAkB1C,EAAOO,EAAE,EAC3BoD,EAASyC,KAAK,CAAA,CAEjB,CAAA,EACD+B,GAAmB,CACjBZ,OAAQ,CAACpI,GAAY,CAACG,EAAK+G,WAAWC,EAAUC,WAAW,EAC3DqB,QAASA,IAAM,CACb7E,EAAe/C,CAAM,EACrBmD,EAAQiD,KAAK,CAAA,CAEhB,CAAA,EACDgC,GAAgB,CACdb,OAAQ,CAACpI,GAAY,CAACG,EAAK+I,cAAc/B,EAAUC,WAAW,EAC9DqB,QAASA,IAAM,CACblF,EAAkB1C,EAAOO,EAAE,EAC3BsD,EAAWuC,KAAK,CAAA,CAClB,CACD,CAAC,CAGN,EAAA,CAAChH,EAAUE,EAAMH,CAAQ,CAC3B,EAGMmJ,GAAgD3I,EAAAA,QAAQ,KACrD,CACL4I,cAAe,GACfC,WAAYA,CAAC,CAAExI,OAAAA,CAAAA,IACNR,EAAMc,cAAcN,EAAOO,EAAE,GAAKP,EAAOK,UAAY,EAE9DoI,QAASA,CAAC,CAAEzI,OAAAA,CAAAA,IAERG,MAACuI,IACC,cAAe,GACf,aAAc,GACd,QAAA3J,EACA,WAAYiB,EAAOO,GACnB,OAAQP,EAAOqH,KACf,UAAW,GACX,YAAatC,EAAU4D,UACvB,WAAY,OACZ,WAAU,EACV,CAAA,CAGR,GACC,CAAC5J,EAASS,EAAMc,aAAa,CAAC,EAEjC,OAEKqD,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAASiF,EAAAA,MACT/E,EAAW+E,MACXzF,EAAQyF,MACRjE,EAAciE,MACd1E,EAAkB0E,MAClBzD,EAAcyD,MACdlD,EAAiBmD,OAClB1I,EAAAA,IAAC2I,GACC,CAAA,IAAKC,EAAOzF,EAAaC,qBAAqB,EAC9C,WAAY/D,EACZ,QAASE,EACT,MAAO,CACLsJ,gBAAiB,GACjBC,eAAgB,GAChBC,OAAQ,CACN/C,MAAOpH,EACP0B,YAAa,EACf,EACAyG,WAAAA,GACAjB,aAAAA,GACAJ,aAAAA,EACAyC,aAAAA,EAAAA,CACA,CAAA,CAAA,EAEN,CAEJ,CCveA,SAAwBa,GAAwB,CAC9CpK,QAAAA,CAGD,EAAG,CACF,MAAMO,EAAOC,EAAa,EACpBH,EAAWC,GAAY,EACvBG,EAAQC,GAAS,sBAAsB,EAEvC,CAAC2J,EAAkBC,CAAmB,EAAI1G,EAAAA,SAAc,CAAA,CAAE,EAE1D2G,EAAoBC,GAA4B,EAAE,EAElDC,EAAqBD,GAA4B,EAAE,EAEnDE,EAAyBC,GAAoC,EAAE,EAE/DC,EAAcvG,EAAsB,CACxCC,IAAKC,EAAasG,0BAClBpG,OAAQ8F,EACR5I,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzBrB,MAAAA,EACAsD,YAAa,CACXqD,MAAOpH,CAAAA,CACT,CACD,EAEK8K,EAAiB/F,GAAsB,CAC3CT,IAAKC,EAAasG,0BAClBrJ,GAAI6I,EAAiB7I,GACrBG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzBrB,MAAAA,CAAAA,CACD,EAEKsK,EAAelG,EAAoB,CACvCP,IAAKC,EAAasG,0BAClBrJ,GAAI6I,EAAiB7I,GACrBiD,OAAQgG,EACR9I,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBrB,MAAAA,CAAAA,CACD,EAEKuK,EAAmB3G,EAAsB,CAC7CC,IAAKC,EAAa0G,8BAClBzJ,GAAI6I,EAAiB7I,GACrBiD,OAAQiG,EACR/I,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3BrB,MAAAA,EACAyK,MAAO,kBACPnH,YAAa,CACX,GAAGsG,EACHc,cAAeC,KAAQC,OAAO,YAAY,CAAA,CAC5C,CACD,EAEK1K,EAA8BC,EAAAA,QAAQ,IACnC,CACL,CACEC,SAAU,YACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqB,EAC5Bf,WAAY,GACZD,SAAU,EAAA,EAEZ,CACED,SAAU,kBACVC,SAAU,GACVC,WAAY,GACZY,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAO,CAAC,EAEjB,CACEjB,SAAU,UACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBf,WAAY,GACZD,SAAU,GACVE,OAASC,GAAgBG,MAACkK,IAAY,MAAO,CAAC,CAACrK,EAAOkK,aAAc,CAAA,GAEtE7I,EAAW,CACTzB,SAAU,gBACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,CACvB,CAAA,EACDQ,EAAW,CACTzB,SAAU,gBACVc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,CAAC,CACxB,EACD,CACEjB,SAAU,iBAAA,EAEZ,CACEA,SAAU,kBAEZ4C,GAAW,CACT5C,SAAU,MAAA,CACX,CAAC,EAEH,EAAE,EAECsH,EAAaC,cAChBnH,GAA6B,CACtB8B,MAAAA,EAAmB,CAAC,CAAC9B,EAAOkK,cAElC,MAAO,CACL9C,GAAc,CACZ1G,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBiE,UAAWC,EAAUuF,mBACrBhD,QAAStH,EAAOO,GAChBnB,SAAAA,CAAAA,CACD,EACD,CACEmI,OAAQzF,GAAW,CAACxC,EAAKmI,cAAcnB,EAAUC,WAAW,EAC5D7F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3BkB,MAAO,QACP2F,WAAO6C,GAAoB,EAAA,EAC3B3C,QAASA,IAAM,CACbyB,EAAoBrJ,CAAM,EAC1B+J,EAAiB3D,KAAK,CAAA,GAG1B8B,GAAc,CACZX,OAAQ,CAACjI,EAAKmI,cAAcnB,EAAUC,WAAW,EACjDiE,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACzB+G,QAASA,IAAM,CACbyB,EAAoBrJ,CAAM,EAC1B8J,EAAa1D,KAAK,CAAA,CAErB,CAAA,EACDqE,GAAgB,CACdlD,OAAQzF,GAAW,CAACxC,EAAK+I,cAAc/B,EAAUC,WAAW,EAC5DiE,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EAC3B+G,QAASA,IAAM,CACbyB,EAAoBrJ,CAAM,EAC1B6J,EAAezD,KAAK,CAAA,CACtB,CACD,CAAC,CAAA,EAGN,CAAC9G,CAAI,CACP,EAEM2G,EAAetG,EAAAA,QAAQ,IACpB,CACLQ,EAAAA,IAAC+F,GAEC,CAAA,QAAQvF,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EACvB,OAAQ,CAACvB,EAAK+G,WAAWC,EAAUC,WAAW,EAC9C,QAAS,IAAM,CACboD,EAAYvD,KAAK,CAAA,CACnB,EALI,eAMJ,EAEH,CAAC9G,CAAI,CAAC,EAEHuG,EAA8BlG,EAAAA,QAAQ,IACnC,CACL,CACEmG,KAAM,UACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBmF,YAAWrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAwC,CAAC,EAExD,CACEiF,KAAM,YACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBmF,YAAWrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA0C,CAAC,CACzD,EAEF,EAAE,EAEL,OAEK8I,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAAYf,EAAAA,MACZkB,EAAalB,MACbiB,EAAejB,MACfmB,EAAiBnB,MAClBzI,EAAAA,IAAC2I,GACC,CAAA,IAAKC,EAAOzF,EAAasG,yBAAyB,EAClD,WAAYpK,EACZ,QAASE,EACT,MAAO,CACLuG,aAAAA,EACAJ,aAAAA,EACAf,UAAWC,EAAUuF,mBACrBtB,gBAAiB,GACjB0B,cAAe,GACfxD,WAAAA,EACAgC,OAAQ,CACN/C,MAAOpH,CAAAA,CACT,CACA,CAAA,CAAA,EAEN,CAEJ,CCpKA,SAAwB4L,IAAmB,OACnC,KAAA,CAAE9J,GAAAA,GAAO+J,GAAU,EAEnBtL,EAAOC,EAAa,EAEpBsL,EAAiBC,GAAuB,EAExC,CACJC,SAAU5E,EACV6E,cAAAA,EACAC,gBAAAA,GACEC,GAAY,CACdC,SAAU7H,EAAa8H,iBACvB7K,GAAIM,EACJqI,OAAQ,CACNmC,gBAAiB,EAAA,CACnB,CACD,EAEKC,EAAgB3L,EAAAA,QAAQ,IAAM,OAClC,OACEwG,EAAMoF,kBACNpF,EAAAA,EAAMkF,kBAANlF,YAAAA,EAAuBlH,WACvB4L,EAAeW,WAAW,4BAA4B,CAAA,EAEvD,CAACrF,EAAO0E,CAAc,CAAC,EAEpBY,EAAe9L,EAAAA,QAAQ,IAAM,WACjC,GAAIqL,EAAcU,WAChB,aAAQC,GAAW,EAAA,EAGrB,MAAMC,EAAqB,CACzB,CACEC,KAAM,OACN/F,KAAM,YACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBiL,KAAM,EAAA,EAER,CACED,KAAM,OACN/F,KAAM,qBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqB,EAC5BiL,KAAM,GACNpE,KAAM,YACNH,OAAQ,CAACpB,EAAM4F,kBAAAA,EAEjB,CACEF,KAAM,OACN/F,KAAM,WACN4B,KAAM,YACN3B,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBmL,MAAOjH,EAAUkH,OAAAA,EAEnB,CACEJ,KAAM,OACN/F,KAAM,cACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBiL,KAAM,EAAA,EAER,CACED,KAAM,SACN/F,KAAM,SACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EAChBmL,MAAOjH,EAAUmH,UAAAA,EAEnB,CACEL,KAAM,SACN/F,KAAM,oBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBmL,MAAOjH,EAAUmH,WACjBxE,KAAM,SACNH,OACE,CAACpB,EAAMgG,mBAAqBhG,EAAMgG,mBAAqBhG,EAAMiG,MAAAA,CAChE,EAGGC,EAAqB,CACzB,CACER,KAAM,cACN/F,KAAM,YACN4B,KAAM,WACN3B,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAuB,EAC9ByL,MAAOnG,EAAMoG,WACbC,SAAUrG,EAAMsG,gBAChBlF,OAAQ,CAACpB,EAAMoG,UAAAA,EAEjB,CACEV,KAAM,cACN/F,KAAM,YACN4B,KAAM,WACN3B,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsB,EAC7ByL,MAAOnG,EAAMuG,gBACbF,SAAUrG,EAAMwG,0BAChBpF,OAAQ,CAACpB,EAAMuG,eAAAA,EAEjB,CACEb,KAAM,OACN/F,KAAM,WACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB+L,gBAAiBA,IAAMtB,CAAAA,EAEzB,CACEO,KAAM,OACN/F,KAAM,cACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB+L,gBAAiBA,IACR5L,EAAemF,GAAAA,YAAAA,EAAO0G,YAAa,CACxC5N,SAAUqM,CAAAA,CACX,CACH,CACD,EAGGwB,EAAqB,CACzB,CACEjB,KAAM,OACNkB,SAAU,GACVjH,KAAM,OACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAO,EACdiL,KAAM,GACNvE,OAAQ,CAACpB,EAAM6G,IAAAA,EAEjB,CACEnB,KAAM,OACN/F,KAAM,sBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjB6G,KAAM,OACNoE,KAAM,GACNvE,OAAQ,CAACpB,EAAM8G,OAAAA,EAEjB,CACEpB,KAAM,OACN/F,KAAM,uBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB6G,KAAM,QACNoE,KAAM,GACNvE,OAAQ,GAACpB,EAAAA,EAAM+G,iBAAN/G,MAAAA,EAAsBgH,MAAAA,EAEjC,CACEtB,KAAM,OACN/F,KAAM,uBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB6G,KAAM,QACNoE,KAAM,GACNvE,OAAQ,GAACpB,EAAAA,EAAM+G,iBAAN/G,MAAAA,EAAsBiH,MAAAA,EAEjC,CACEvB,KAAM,OACN/F,KAAM,qBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB6G,KAAM,YACNoE,KAAM,GACNvE,OAAQ,CAACpB,EAAMkH,YAAAA,EAEjB,CACExB,KAAM,OACN/F,KAAM,cACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrByM,MAAO,QACP/F,OAAQ,CAACpB,EAAMoH,WAAAA,CAChB,EAGGC,EAAqB,CACzB,CACE3B,KAAM,OACN/F,KAAM,gBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBiL,KAAM,GACNvE,OAAQ,CAACpB,EAAMsH,aAAAA,EAEjB,CACE5B,KAAM,OACN/F,KAAM,aACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB6G,KAAM,WACNoE,KAAM,GACNvE,OAAQ,CAACpB,EAAMuH,UAAAA,EAEjB,CACE7B,KAAM,OACN/F,KAAM,aACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB6G,KAAM,WACNH,OAAQ,CAACpB,EAAMwH,WACf7B,KAAM,EAAA,EAER,CACED,KAAM,OACN/F,KAAM,cACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrB0G,OAAQ,CAACpB,EAAMyH,YACf9B,KAAM,EAAA,EAER,CACED,KAAM,OACN/F,KAAM,gBACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB0G,OAAQ,CAACpB,EAAM+D,cACf4B,KAAM,EAAA,CACP,EAGH,cACG+B,GACC,CAAA,SAAA,CAAC5N,EAAAA,KAAA6N,GAAA,CAAK,KAAI,GACR,SAAA,CAAA3N,EAAA,IAAC4N,GACC,CAAA,QAASzH,EAAUG,eACnB,QAASnD,EAAa0K,aACtB,KAAK7H,EAAAA,EAAMkF,kBAANlF,YAAAA,EAAuB8H,MAC5B,GAAI9H,EAAM+H,SAAS,EAEpB/N,EAAAA,IAAA2N,GAAK,IAAL,CAAS,KAAM,CAAEK,KAAM,GAAIC,GAAI,CAAA,EAC9B,SAACjO,EAAA,IAAAkO,EAAA,CAAa,OAAQzC,EAAI,KAAMzF,EAAM,CACxC,CAAA,CAAA,EACF,EACChG,EAAA,IAAAkO,EAAA,CAAa,OAAQhC,EAAI,KAAMlG,EAAM,EACrChG,EAAA,IAAAkO,EAAA,CAAa,OAAQvB,EAAI,KAAM3G,EAAM,EACrChG,EAAA,IAAAkO,EAAA,CAAa,OAAQb,EAAI,KAAMrH,CAAM,CAAA,CAAA,EACxC,CAED,EAAA,CAACA,EAAOmF,EAAeN,CAAa,CAAC,EAElCsD,EAAWC,GAAe,CAAEzJ,UAAWC,EAAUmH,UAAAA,CAAY,EAE7DsC,EAAmBC,GAAoB,EAAE,EAEzCC,EAAiB9K,EAAoB,CACzCP,IAAKC,EAAa8H,iBAClB7K,GAAI4F,EAAM5F,GACVG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B2C,OAAQgL,EACR/K,cAAeA,IAAM,CACHwH,EAAA,CAAA,CAClB,CACD,EAEK0D,EAAuBF,GAAoB,CAC/CG,iBAAkBzI,EAAM5F,EAAAA,CACzB,EAEKsO,EAAiClP,EAAAA,QAAQ,IAAM,CACnD,MAAMmP,EAAO,CAAE,GAAG3I,CAAM,EAIxB,cAAO2I,EAAKC,UACLD,CAAAA,EACN,CAAC3I,CAAK,CAAC,EAEJ6I,EAAsB5L,EAAsB,CAChDC,IAAKC,EAAa8H,iBAClB1K,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB2C,OAAQmL,EACR7L,YAAa+L,EACbhK,OAAQ,GACRC,UAAWC,EAAUmH,UAAAA,CACtB,EAEK+C,EAA2BtP,EAAAA,QAAQ,IAChC,CACL,CACEmG,KAAM,SACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB6G,WAAOwH,GAAiB,EAAA,EACxBzG,QAASgD,CAAAA,EAEX,CACE3F,KAAM,aACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB6G,WAAOyH,GAAW,EAAA,EAClB1G,eACG2G,EACC,CAAA,SAAU,GACV,aAAc,CAAC,aAAc,aAAa,EAE1C,SAAA,CAAAnP,EAAA,KAACmP,EAAU,KAAV,CAAe,MAAM,aACpB,SAAA,CAAAjP,EAAAA,IAACiP,EAAU,QAAV,CACC,eAACC,GAAY,CAAA,KAAK,KAAK1O,SAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,GAAc,CACxC,CAAA,EACAV,EAAAA,IAACiP,EAAU,MAAV,CACC,SAAAjP,EAAAA,IAACrB,IACC,QAASqH,EAAM5F,GACf,mBAAoB0K,EACpB,SAAUK,EACV,WAAYnF,EAAM+H,SAClB,SACE/H,EAAMiG,QAAUkC,EAASgB,UACzBnJ,EAAMiG,QAAUkC,EAASiB,SAC1B,CAAA,CAEL,CAAA,CAAA,CAAA,EAfqC,WAgBvC,EACCtP,EAAA,KAAAmP,EAAU,KAAV,CAAe,MAAM,cACpB,SAAA,CAAAjP,EAAAA,IAACiP,EAAU,QAAV,CACC,eAACC,GAAY,CAAA,KAAK,KAAK1O,SAAAC,EAAAA,EAAC,CAAAC,GAAA,QAAA,GAAoB,CAC9C,CAAA,QACCuO,EAAU,MAAV,CACC,SAACjP,EAAA,IAAAqP,GAAA,CACC,SAAUlM,EAAamM,4BACvB,QAAStJ,EAAM5F,GACf,mBAAoB0K,EACpB,SAAUK,EACV,KAAMhF,EAAUC,YAAY,CAEhC,CAAA,CAAA,CAAA,EAZsC,YAaxC,CAAA,CACF,CAAA,CAAA,EAGJ,CACET,KAAM,YACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnB6G,WAAO6C,GAAoB,EAAA,EAC3B9B,QAAStI,EAAA,IAACgJ,GAAwB,CAAA,QAAShD,EAAM5F,EAAG,CAAA,CAAA,EAEtD,CACEuF,KAAM,cACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB6G,WAAOgI,GAAe,EAAA,EACtBjH,QACEtI,EAAA,IAACuI,GACC,CAAA,QAASvC,EAAM5F,GACf,aAAY,GACZ,UAAS,GACT,WAAW,OACX,YAAawE,EAAU4D,SAAU,CAAA,CAAA,EAIvC,CACE7C,KAAM,eACNC,MAAKpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB6G,WAAOM,GAAY,EAAA,EACnBT,OAAQ,CAACjI,EAAKkI,YAAYlB,EAAUtB,KAAK,EACzCyD,QAAStC,GAAAA,MAAAA,EAAO5F,GACbJ,EAAAA,IAAAwP,GAAA,CAAgB,aAAcxJ,EAAM5F,EAAM,CAAA,EAE3CJ,EAAA,IAACwL,GAAQ,CAAA,CAAA,GAGbiE,GAAgB,CACdC,WAAY9K,EAAUmH,WACtB4D,SAAU3J,EAAM5F,EACjB,CAAA,EACDwP,GAAW,CACTF,WAAY9K,EAAUmH,WACtB4D,SAAU3J,EAAM5F,EAAAA,CACjB,CAAC,EAEH,CAAC4F,EAAOtF,EAAIvB,EAAMgP,EAAUhP,CAAI,CAAC,EAE9B0Q,EAAa5M,EAAsB,CACvCC,IAAK0F,EAAOzF,EAAa2M,kBAAmB9J,EAAM5F,EAAE,EACpDG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3B4C,cAAewH,EACfiF,eAAcvP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EACnCsP,eAAcxP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,CAAC,CAChC,EAEKuP,EAAchN,EAAsB,CACxCC,IAAK0F,EAAOzF,EAAa+M,mBAAoBlK,EAAM5F,EAAE,EACrDG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqB,EAC5B4C,cAAewH,EACfiF,eAAcvP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EACpCsP,eAAcxP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,CAAC,CACnC,EAEKyP,EAAYlN,EAAsB,CACtCC,IAAK0F,EAAOzF,EAAaiN,iBAAkBpK,EAAM5F,EAAE,EACnDG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B4C,cAAewH,EACfiF,eAAcvP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA2B,EAC3CsP,eAAcxP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsB,CAAC,CACxC,EAEK2P,EAAYpN,EAAsB,CACtCC,IAAK0F,EAAOzF,EAAamN,qBAAsBtK,EAAM5F,EAAE,EACvDG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B4C,cAAewH,EACfiF,eAAcvP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EACnCsP,eAAcxP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EAChC2C,OAAQ,CACNkN,kBAAmB,CAAA,CAAC,CACtB,CACD,EAEKC,EAAgBvN,EAAsB,CAC1CC,IAAK0F,EAAOzF,EAAamN,qBAAsBtK,EAAM5F,EAAE,EACvDG,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAuB,EAC9B4C,cAAewH,EACfiF,eAAcvP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA8B,EAC9CsP,eAAcxP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EAClC2C,OAAQ,CACNkN,kBAAmB,CAAA,CAAC,CACtB,CACD,EAEKE,EAAYjR,EAAAA,QAAQ,IAAM,CAC9B,MAAMkR,EAAmBvR,EAAKmI,cAAcnB,EAAUC,WAAW,EAE3DuK,EACJD,IACC1K,EAAMiG,QAAUkC,EAASyC,SAAW5K,EAAMiG,QAAUkC,EAAS0C,SAE1DC,EACJJ,IACC1K,EAAMiG,QAAUkC,EAASyC,SACxB5K,EAAMiG,QAAUkC,EAAS0C,SACzB7K,EAAMiG,QAAUkC,EAAS4C,aAEvBC,EACJN,IACC1K,EAAMiG,QAAUkC,EAASyC,SACxB5K,EAAMiG,QAAUkC,EAAS4C,aAEvBE,EAAevG,EAAewG,MAAM,0BAA0B,EAE9DC,EACJ,CAACF,GAAgBP,GAAW1K,EAAMiG,QAAUkC,EAAS4C,YACjDK,EACJV,IACC1K,EAAMiG,QAAUkC,EAASkD,SACvBJ,GAAgBjL,EAAMiG,QAAUkC,EAAS4C,aAE9C,MAAO,CACL/Q,EAAAA,IAACsR,EACC,CAAA,MAAM9Q,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACpB,KAAK,QACL,OAAQ,CAACiQ,EACT,MAAM,OACN,QAASd,EAAW5J,IACpB,CAAA,EACDjG,EAAA,IAAAsR,EAAA,CACC,MAAM9Q,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAY,EACnB,KAAK,UACL,OAAQ,CAACyQ,EACT,MAAM,OACN,QAASd,EAAUpK,IACnB,CAAA,EACDjG,EAAA,IAAAsR,EAAA,CACC,MAAM9Q,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EACxB,KAAK,WACL,OAAQ,CAAC0Q,EACT,MAAM,QACN,QAASZ,EAAcvK,IAAAA,CAAK,EAE7BjG,EAAA,IAAAuR,GAAA,CAAY,MAAO3M,EAAUmH,WAAY,GAAI/F,EAAM5F,EAAM,CAAA,EAC1DJ,EAAA,IAACwR,GACC,CAAA,MAAO5M,EAAUmH,WACjB,GAAI/F,EAAM5F,GACV,KAAM4F,GAAAA,YAAAA,EAAOyL,aAAa,EAE3BzR,MAAA0R,GAAA,CACC,UAAW9M,EAAUmH,WACrB,MAAO,CAAC/F,EAAM5F,EAAE,EAChB,cAAa,GAAA,EAEfJ,EAAAA,IAAC2R,GACC,CAAA,QAAQnR,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EACxB,QAAS,CACPkR,GAAe,CACbxK,OAAQ,CAACsJ,EACTjJ,QAAS8G,EAAetI,KACxBoE,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,CACtB,CAAA,EACDmR,GAAoB,CAClBzK,OAAQ,CAACjI,EAAK+G,WAAWC,EAAUC,WAAW,EAC9CqB,QAASoH,EAAoB5I,KAC7BoE,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,CAC3B,CAAA,EACDoR,GAAe,CACbzH,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACtB0G,OAAQ,CAAC4J,EACTvJ,QAAS0I,EAAUlK,IACpB,CAAA,EACD8L,GAAiB,CACf1H,QAAO7J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACxB0G,OAAQ,CAAC0J,EACTrJ,QAASwI,EAAYhK,IAAAA,CACtB,CAAC,CACF,CAAA,CACF,GAEH,CAAC9G,EAAM6G,EAAOmI,EAAUzD,CAAc,CAAC,EAEpCsH,EAA2BxS,EAAAA,QAAQ,IAChCqL,EAAcoH,UACjB,CAAE,EACF,CACEjS,EAAAA,IAACkS,GACC,CAAA,OAAQlM,EAAMgG,kBACd,KAAMpH,EAAUmH,WAChB,QAAS,CAAEoG,KAAM,IAAA,GACZnM,EAAM5F,EAAG,CACd,EAEP,CAAC4F,EAAO6E,CAAa,CAAC,EAEnBuH,EAAmB5S,EAAAA,QAAQ,IAAM,OACjC6S,IAAAA,IAAIrM,EAAAA,EAAMkF,kBAANlF,YAAAA,EAAuBL,OAAQ,GAEvC,OAAIK,EAAM4F,qBACHyG,GAAA,KAAKrM,EAAM4F,kBAAkB,KAG7ByG,CAAAA,EACN,CAACrM,CAAK,CAAC,EAEV,OAEK6J,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAAWpH,EAAAA,MACXwH,EAAYxH,MACZ0H,EAAU1H,MACV4H,EAAU5H,MACV+H,EAAc/H,MACd8F,EAAe9F,MACfoG,EAAoBpG,MACrBzI,EAAAA,IAACsS,GACC,CAAA,MAAOzH,EACP,aAAc1E,EAAUC,YAExB,SAAAtG,EAAA,KAACyS,GAAM,CAAA,IAAI,KACT,SAAA,CAACvS,EAAAA,IAAAwS,GAAA,CACC,MAAO,GAAAhS,EAAAC,EAAG,CAAAC,GAAA,QAAA,CAAa,MAAMsF,EAAM4I,SAAS,GAC5C,SAAAwD,EACA,UAAUpM,EAAAA,EAAMkF,kBAANlF,YAAAA,EAAuB8H,MACjC,OAAQkE,EACR,QAASvB,EACT,YAAa,CAAC,CAAE9K,KAAInF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EAAEwC,IAAK,SAAA,CAAW,EAChD,UAAW,CACT,CAAEyC,KAAMK,EAAM4I,UAAW1L,IAAK,sBAAsB8C,EAAM5F,EAAE,EAAA,CAAI,EAElE,WAAYmO,EAAetI,KAC3B,YAAa9G,EAAKsT,oBAAoB7N,EAAUmH,UAAU,EAAE,EAE7D/L,EAAA,IAAA0S,GAAA,CACC,QAAQ,aACR,OAAQ5D,EACR,MAAOlK,EAAUmH,WACjB,eAAgBjB,EAChB,SAAU9E,EACV,GAAIA,EAAM5F,EAAG,CAAA,CAAA,CAAA,CAEjB,CACF,CAAA,CAAA,EACF,CAEJ"}
